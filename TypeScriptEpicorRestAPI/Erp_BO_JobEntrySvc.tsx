import * as configEpicorSchemas from "./configEpicorSchemas"


/** 
// Title: Erp.BO.JobEntrySvc
// Description: The Job Entry service.
// Version: v1
*/ 



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// OData methods:
//////////////////////////////////////////////////////////////////////////

   /**  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => application/json
   */  
export function getServiceDocument(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<JSON>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as JSON)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: Returns metadata document => content
   */  
export function get_metadata(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/$metadata", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobEntries items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobEntries
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadRow
   */  
export function get_JobEntries(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobEntries
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobHeadRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobHeadRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobEntries(requestBody:Erp_Tablesets_JobHeadRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobEntry item
   Description: Calls GetByID to retrieve the JobEntry item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobEntry
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobHeadRow
   */  
export function get_JobEntries_Company_JobNum(Company:string, JobNum:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobHeadRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobHeadRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobEntry for the service
   Description: Calls UpdateExt to update JobEntry. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobEntry
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobHeadRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobEntries_Company_JobNum(Company:string, JobNum:string, requestBody:Erp_Tablesets_JobHeadRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobEntry item
   Description: Call UpdateExt to delete JobEntry item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobEntry
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobEntries_Company_JobNum(Company:string, JobNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAsmbls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmbls1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRow
   */  
export function get_JobEntries_Company_JobNum_JobAsmbls(Company:string, JobNum:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAsmbls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmbl item
   Description: Calls GetByID to retrieve the JobAsmbl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmbl1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblRow
   */  
export function get_JobEntries_Company_JobNum_JobAsmbls_Company_JobNum_AssemblySeq(Company:string, JobNum:string, AssemblySeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAudits items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAudits1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAuditRow
   */  
export function get_JobEntries_Company_JobNum_JobAudits(Company:string, JobNum:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAuditRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAudits", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAuditRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAudit item
   Description: Calls GetByID to retrieve the JobAudit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAudit1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param ChangeDate Desc: ChangeDate   Required: True   Allow empty value : True
      @param ChangeTime Desc: ChangeTime   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAuditRow
   */  
export function get_JobEntries_Company_JobNum_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company:string, JobNum:string, ChangeDate:string, ChangeTime:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAuditRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAuditRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobParts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobParts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobPartRow
   */  
export function get_JobEntries_Company_JobNum_JobParts(Company:string, JobNum:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobPartRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobParts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobPartRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobPart item
   Description: Calls GetByID to retrieve the JobPart item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobPart1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobPartRow
   */  
export function get_JobEntries_Company_JobNum_JobParts_Company_JobNum_PartNum(Company:string, JobNum:string, PartNum:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobPartRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobParts(" + Company + "," + JobNum + "," + PartNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobPartRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobHeadAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobHeadAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadAttchRow
   */  
export function get_JobEntries_Company_JobNum_JobHeadAttches(Company:string, JobNum:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobHeadAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobHeadAttch item
   Description: Calls GetByID to retrieve the JobHeadAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobHeadAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobHeadAttchRow
   */  
export function get_JobEntries_Company_JobNum_JobHeadAttches_Company_JobNum_DrawingSeq(Company:string, JobNum:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobHeadAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobHeadAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAsmbls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmbls
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRow
   */  
export function get_JobAsmbls(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmbls
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAsmblRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmbls(requestBody:Erp_Tablesets_JobAsmblRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmbl item
   Description: Calls GetByID to retrieve the JobAsmbl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmbl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq(Company:string, JobNum:string, AssemblySeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAsmbl for the service
   Description: Calls UpdateExt to update JobAsmbl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmbl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAsmbls_Company_JobNum_AssemblySeq(Company:string, JobNum:string, AssemblySeq:string, requestBody:Erp_Tablesets_JobAsmblRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAsmbl item
   Description: Call UpdateExt to delete JobAsmbl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmbl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAsmbls_Company_JobNum_AssemblySeq(Company:string, JobNum:string, AssemblySeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblInsps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblInsps1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblInspRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblInsps(Company:string, JobNum:string, AssemblySeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblInsps", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblInsp item
   Description: Calls GetByID to retrieve the JobAsmblInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblInsp1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblInspRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, PlanSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobMtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtls1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobMtls(Company:string, JobNum:string, AssemblySeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobMtls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtl item
   Description: Calls GetByID to retrieve the JobMtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtl1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOpers items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOpers1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobOpers(Company:string, JobNum:string, AssemblySeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobOpers", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOper item
   Description: Calls GetByID to retrieve the JobOper item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOper1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblRestrictions1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictionRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblRestrictions(Company:string, JobNum:string, AssemblySeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblRestrictions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblRestriction item
   Description: Calls GetByID to retrieve the JobAsmblRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestriction1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAsmRefDes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmRefDes1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmRefDesRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmRefDes(Company:string, JobNum:string, AssemblySeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmRefDes", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmRefDe item
   Description: Calls GetByID to retrieve the JobAsmRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmRefDe1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblAttchRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblAttches(Company:string, JobNum:string, AssemblySeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblAttch item
   Description: Calls GetByID to retrieve the JobAsmblAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   */  
export function get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblInsps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblInsps
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblInspRow
   */  
export function get_JobAsmblInsps(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblInsps
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAsmblInspRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmblInsps(requestBody:Erp_Tablesets_JobAsmblInspRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblInsp item
   Description: Calls GetByID to retrieve the JobAsmblInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblInspRow
   */  
export function get_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, PlanSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAsmblInsp for the service
   Description: Calls UpdateExt to update JobAsmblInsp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, PlanSeq:string, requestBody:Erp_Tablesets_JobAsmblInspRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAsmblInsp item
   Description: Call UpdateExt to delete JobAsmblInsp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, PlanSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobMtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtls
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRow
   */  
export function get_JobMtls(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtls
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobMtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobMtls(requestBody:Erp_Tablesets_JobMtlRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtl item
   Description: Calls GetByID to retrieve the JobMtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobMtl for the service
   Description: Calls UpdateExt to update JobMtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, requestBody:Erp_Tablesets_JobMtlRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobMtl item
   Description: Call UpdateExt to delete JobMtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobMtlInsps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlInsps1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlInspRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlInsps(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlInsps", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlInsp item
   Description: Calls GetByID to retrieve the JobMtlInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlInsp1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlInspRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, PlanSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobMtlRefDes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlRefDes1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRefDesRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRefDes(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRefDes", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlRefDe item
   Description: Calls GetByID to retrieve the JobMtlRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRefDe1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobMtlRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlRestrictions1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictionRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRestrictions(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRestrictions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlRestriction item
   Description: Calls GetByID to retrieve the JobMtlRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestriction1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobMtlAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlAttchRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlAttches(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlAttch item
   Description: Calls GetByID to retrieve the JobMtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlAttchRow
   */  
export function get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobMtlInsps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlInsps
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlInspRow
   */  
export function get_JobMtlInsps(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlInsps
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobMtlInspRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobMtlInsps(requestBody:Erp_Tablesets_JobMtlInspRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlInsp item
   Description: Calls GetByID to retrieve the JobMtlInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlInspRow
   */  
export function get_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, PlanSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobMtlInsp for the service
   Description: Calls UpdateExt to update JobMtlInsp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, PlanSeq:string, requestBody:Erp_Tablesets_JobMtlInspRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobMtlInsp item
   Description: Call UpdateExt to delete JobMtlInsp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, PlanSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobMtlRefDes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlRefDes
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRefDesRow
   */  
export function get_JobMtlRefDes(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobMtlRefDesRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobMtlRefDes(requestBody:Erp_Tablesets_JobMtlRefDesRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlRefDe item
   Description: Calls GetByID to retrieve the JobMtlRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRefDe
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   */  
export function get_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobMtlRefDe for the service
   Description: Calls UpdateExt to update JobMtlRefDe. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlRefDe
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, requestBody:Erp_Tablesets_JobMtlRefDesRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobMtlRefDe item
   Description: Call UpdateExt to delete JobMtlRefDe item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlRefDe
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobMtlRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlRestrictions
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictionRow
   */  
export function get_JobMtlRestrictions(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlRestrictions
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobMtlRestrictions(requestBody:Erp_Tablesets_JobMtlRestrictionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlRestriction item
   Description: Calls GetByID to retrieve the JobMtlRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   */  
export function get_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobMtlRestriction for the service
   Description: Calls UpdateExt to update JobMtlRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, requestBody:Erp_Tablesets_JobMtlRestrictionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobMtlRestriction item
   Description: Call UpdateExt to delete JobMtlRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobMtlRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlRestrictSubsts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictSubstRow
   */  
export function get_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_JobMtlRestrictSubsts(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")/JobMtlRestrictSubsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlRestrictSubst item
   Description: Calls GetByID to retrieve the JobMtlRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestrictSubst1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   */  
export function get_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, SubstanceID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobMtlRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlRestrictSubsts
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictSubstRow
   */  
export function get_JobMtlRestrictSubsts(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlRestrictSubsts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobMtlRestrictSubsts(requestBody:Erp_Tablesets_JobMtlRestrictSubstRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlRestrictSubst item
   Description: Calls GetByID to retrieve the JobMtlRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   */  
export function get_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, SubstanceID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobMtlRestrictSubst for the service
   Description: Calls UpdateExt to update JobMtlRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, SubstanceID:string, requestBody:Erp_Tablesets_JobMtlRestrictSubstRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobMtlRestrictSubst item
   Description: Call UpdateExt to delete JobMtlRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RestrictionTypeID:string, SubstanceID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobMtlAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlAttchRow
   */  
export function get_JobMtlAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlAttches
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobMtlAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobMtlAttches(requestBody:Erp_Tablesets_JobMtlAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobMtlAttch item
   Description: Calls GetByID to retrieve the JobMtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobMtlAttchRow
   */  
export function get_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobMtlAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobMtlAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobMtlAttch for the service
   Description: Calls UpdateExt to update JobMtlAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, DrawingSeq:string, requestBody:Erp_Tablesets_JobMtlAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobMtlAttch item
   Description: Call UpdateExt to delete JobMtlAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOpers items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOpers
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRow
   */  
export function get_JobOpers(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOpers
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOpers(requestBody:Erp_Tablesets_JobOperRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOper item
   Description: Calls GetByID to retrieve the JobOper item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOper
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOper for the service
   Description: Calls UpdateExt to update JobOper. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOper
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, requestBody:Erp_Tablesets_JobOperRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOper item
   Description: Call UpdateExt to delete JobOper item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOper
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperActions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperActions1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperActions(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperActions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperAction item
   Description: Calls GetByID to retrieve the JobOperAction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAction1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperActionRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperActionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperActionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperInsps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperInsps1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperInspRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperInsps(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperInsps", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperInsp item
   Description: Calls GetByID to retrieve the JobOperInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperInsp1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperInspRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, PlanSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperMachParams items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperMachParams1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperMachParamRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperMachParams(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperMachParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperMachParams", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperMachParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperMachParam item
   Description: Calls GetByID to retrieve the JobOperMachParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperMachParam1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param MachParamSeq Desc: MachParamSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperMachParamRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, MachParamSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperMachParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperMachParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOpDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOpDtls1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOpDtlRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOpDtls(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOpDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOpDtls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOpDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOpDtl item
   Description: Calls GetByID to retrieve the JobOpDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOpDtl1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOpDtlRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOpDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOpDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperRestrictions1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictionRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperRestrictions(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperRestrictions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperRestriction item
   Description: Calls GetByID to retrieve the JobOperRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestriction1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperAttchRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperAttches(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperAttch item
   Description: Calls GetByID to retrieve the JobOperAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperAttchRow
   */  
export function get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperActions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperActions
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionRow
   */  
export function get_JobOperActions(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperActions
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperActionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperActions(requestBody:Erp_Tablesets_JobOperActionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperAction item
   Description: Calls GetByID to retrieve the JobOperAction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperActionRow
   */  
export function get_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperActionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperActionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperAction for the service
   Description: Calls UpdateExt to update JobOperAction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperAction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, requestBody:Erp_Tablesets_JobOperActionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperAction item
   Description: Call UpdateExt to delete JobOperAction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperAction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperActionParams items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperActionParams1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionParamRow
   */  
export function get_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_JobOperActionParams(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")/JobOperActionParams", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperActionParam item
   Description: Calls GetByID to retrieve the JobOperActionParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperActionParam1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param ActionParamSeq Desc: ActionParamSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperActionParamRow
   */  
export function get_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, ActionParamSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperActionParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperActionParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperActionParams items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperActionParams
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionParamRow
   */  
export function get_JobOperActionParams(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperActionParams
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperActionParamRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperActionParams(requestBody:Erp_Tablesets_JobOperActionParamRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperActionParam item
   Description: Calls GetByID to retrieve the JobOperActionParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperActionParam
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param ActionParamSeq Desc: ActionParamSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperActionParamRow
   */  
export function get_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, ActionParamSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperActionParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperActionParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperActionParam for the service
   Description: Calls UpdateExt to update JobOperActionParam. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperActionParam
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param ActionParamSeq Desc: ActionParamSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, ActionParamSeq:string, requestBody:Erp_Tablesets_JobOperActionParamRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperActionParam item
   Description: Call UpdateExt to delete JobOperActionParam item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperActionParam
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param ActionSeq Desc: ActionSeq   Required: True
      @param ActionParamSeq Desc: ActionParamSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, ActionSeq:string, ActionParamSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperInsps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperInsps
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperInspRow
   */  
export function get_JobOperInsps(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperInsps
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperInspRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperInsps(requestBody:Erp_Tablesets_JobOperInspRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperInsp item
   Description: Calls GetByID to retrieve the JobOperInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperInspRow
   */  
export function get_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, PlanSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperInspRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperInspRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperInsp for the service
   Description: Calls UpdateExt to update JobOperInsp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, PlanSeq:string, requestBody:Erp_Tablesets_JobOperInspRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperInsp item
   Description: Call UpdateExt to delete JobOperInsp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperInsp
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param PlanSeq Desc: PlanSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, PlanSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperMachParams items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperMachParams
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperMachParamRow
   */  
export function get_JobOperMachParams(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperMachParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperMachParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperMachParams
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperMachParamRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperMachParams(requestBody:Erp_Tablesets_JobOperMachParamRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperMachParam item
   Description: Calls GetByID to retrieve the JobOperMachParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperMachParam
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param MachParamSeq Desc: MachParamSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperMachParamRow
   */  
export function get_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, MachParamSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperMachParamRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperMachParamRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperMachParam for the service
   Description: Calls UpdateExt to update JobOperMachParam. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperMachParam
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param MachParamSeq Desc: MachParamSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, MachParamSeq:string, requestBody:Erp_Tablesets_JobOperMachParamRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperMachParam item
   Description: Call UpdateExt to delete JobOperMachParam item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperMachParam
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param MachParamSeq Desc: MachParamSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, MachParamSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOpDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOpDtls
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOpDtlRow
   */  
export function get_JobOpDtls(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOpDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOpDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOpDtls
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOpDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOpDtls(requestBody:Erp_Tablesets_JobOpDtlRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOpDtl item
   Description: Calls GetByID to retrieve the JobOpDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOpDtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOpDtlRow
   */  
export function get_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOpDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOpDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOpDtl for the service
   Description: Calls UpdateExt to update JobOpDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOpDtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, requestBody:Erp_Tablesets_JobOpDtlRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOpDtl item
   Description: Call UpdateExt to delete JobOpDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOpDtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobResources items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobResources1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobResourcesRow
   */  
export function get_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_JobResources(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobResourcesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")/JobResources", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobResourcesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobResource item
   Description: Calls GetByID to retrieve the JobResource item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobResource1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param WhatIf Desc: WhatIf   Required: True
      @param AllocNum Desc: AllocNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobResourcesRow
   */  
export function get_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, WhatIf:string, AllocNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobResourcesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobResourcesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobResources items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobResources
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobResourcesRow
   */  
export function get_JobResources(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobResourcesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobResourcesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobResources
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobResourcesRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobResources(requestBody:Erp_Tablesets_JobResourcesRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobResource item
   Description: Calls GetByID to retrieve the JobResource item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobResource
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param WhatIf Desc: WhatIf   Required: True
      @param AllocNum Desc: AllocNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobResourcesRow
   */  
export function get_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, WhatIf:string, AllocNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobResourcesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobResourcesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobResource for the service
   Description: Calls UpdateExt to update JobResource. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobResource
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param WhatIf Desc: WhatIf   Required: True
      @param AllocNum Desc: AllocNum   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, WhatIf:string, AllocNum:string, requestBody:Erp_Tablesets_JobResourcesRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobResource item
   Description: Call UpdateExt to delete JobResource item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobResource
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param OpDtlSeq Desc: OpDtlSeq   Required: True
      @param WhatIf Desc: WhatIf   Required: True
      @param AllocNum Desc: AllocNum   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, OpDtlSeq:string, WhatIf:string, AllocNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperRestrictions
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictionRow
   */  
export function get_JobOperRestrictions(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperRestrictions
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperRestrictions(requestBody:Erp_Tablesets_JobOperRestrictionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperRestriction item
   Description: Calls GetByID to retrieve the JobOperRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   */  
export function get_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperRestriction for the service
   Description: Calls UpdateExt to update JobOperRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, requestBody:Erp_Tablesets_JobOperRestrictionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperRestriction item
   Description: Call UpdateExt to delete JobOperRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobOperRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperRestrictSubsts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictSubstRow
   */  
export function get_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_JobOperRestrictSubsts(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")/JobOperRestrictSubsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperRestrictSubst item
   Description: Calls GetByID to retrieve the JobOperRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestrictSubst1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   */  
export function get_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, SubstanceID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperRestrictSubsts
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictSubstRow
   */  
export function get_JobOperRestrictSubsts(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperRestrictSubsts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperRestrictSubsts(requestBody:Erp_Tablesets_JobOperRestrictSubstRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperRestrictSubst item
   Description: Calls GetByID to retrieve the JobOperRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   */  
export function get_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, SubstanceID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperRestrictSubst for the service
   Description: Calls UpdateExt to update JobOperRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, SubstanceID:string, requestBody:Erp_Tablesets_JobOperRestrictSubstRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperRestrictSubst item
   Description: Call UpdateExt to delete JobOperRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, RestrictionTypeID:string, SubstanceID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobOperAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperAttchRow
   */  
export function get_JobOperAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperAttches
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobOperAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobOperAttches(requestBody:Erp_Tablesets_JobOperAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobOperAttch item
   Description: Calls GetByID to retrieve the JobOperAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobOperAttchRow
   */  
export function get_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobOperAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobOperAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobOperAttch for the service
   Description: Calls UpdateExt to update JobOperAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, DrawingSeq:string, requestBody:Erp_Tablesets_JobOperAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobOperAttch item
   Description: Call UpdateExt to delete JobOperAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param OprSeq Desc: OprSeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, OprSeq:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblRestrictions
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictionRow
   */  
export function get_JobAsmblRestrictions(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblRestrictions
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmblRestrictions(requestBody:Erp_Tablesets_JobAsmblRestrictionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblRestriction item
   Description: Calls GetByID to retrieve the JobAsmblRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   */  
export function get_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblRestrictionRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblRestrictionRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAsmblRestriction for the service
   Description: Calls UpdateExt to update JobAsmblRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, requestBody:Erp_Tablesets_JobAsmblRestrictionRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAsmblRestriction item
   Description: Call UpdateExt to delete JobAsmblRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblRestriction
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblRestrictSubsts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictSubstRow
   */  
export function get_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID_JobAsmblRestrictSubsts(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")/JobAsmblRestrictSubsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblRestrictSubst item
   Description: Calls GetByID to retrieve the JobAsmblRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestrictSubst1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   */  
export function get_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, SubstanceID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblRestrictSubsts
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictSubstRow
   */  
export function get_JobAsmblRestrictSubsts(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblRestrictSubsts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmblRestrictSubsts(requestBody:Erp_Tablesets_JobAsmblRestrictSubstRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblRestrictSubst item
   Description: Calls GetByID to retrieve the JobAsmblRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   */  
export function get_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, SubstanceID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblRestrictSubstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblRestrictSubstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAsmblRestrictSubst for the service
   Description: Calls UpdateExt to update JobAsmblRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, SubstanceID:string, requestBody:Erp_Tablesets_JobAsmblRestrictSubstRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAsmblRestrictSubst item
   Description: Call UpdateExt to delete JobAsmblRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblRestrictSubst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param RestrictionTypeID Desc: RestrictionTypeID   Required: True   Allow empty value : True
      @param SubstanceID Desc: SubstanceID   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company:string, JobNum:string, AssemblySeq:string, RestrictionTypeID:string, SubstanceID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAsmRefDes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmRefDes
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmRefDesRow
   */  
export function get_JobAsmRefDes(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAsmRefDesRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmRefDes(requestBody:Erp_Tablesets_JobAsmRefDesRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmRefDe item
   Description: Calls GetByID to retrieve the JobAsmRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmRefDe
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   */  
export function get_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmRefDesRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmRefDesRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAsmRefDe for the service
   Description: Calls UpdateExt to update JobAsmRefDe. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmRefDe
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, requestBody:Erp_Tablesets_JobAsmRefDesRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAsmRefDe item
   Description: Call UpdateExt to delete JobAsmRefDe item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmRefDe
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param MtlSeq Desc: MtlSeq   Required: True
      @param RefDesSeq Desc: RefDesSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company:string, JobNum:string, AssemblySeq:string, MtlSeq:string, RefDesSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblAttchRow
   */  
export function get_JobAsmblAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblAttches
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAsmblAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmblAttches(requestBody:Erp_Tablesets_JobAsmblAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAsmblAttch item
   Description: Calls GetByID to retrieve the JobAsmblAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   */  
export function get_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAsmblAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAsmblAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAsmblAttch for the service
   Description: Calls UpdateExt to update JobAsmblAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, DrawingSeq:string, requestBody:Erp_Tablesets_JobAsmblAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAsmblAttch item
   Description: Call UpdateExt to delete JobAsmblAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company:string, JobNum:string, AssemblySeq:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobAudits items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAudits
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAuditRow
   */  
export function get_JobAudits(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAuditRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAuditRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAudits
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAuditRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobAuditRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAudits(requestBody:Erp_Tablesets_JobAuditRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobAudit item
   Description: Calls GetByID to retrieve the JobAudit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAudit
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param ChangeDate Desc: ChangeDate   Required: True   Allow empty value : True
      @param ChangeTime Desc: ChangeTime   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobAuditRow
   */  
export function get_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company:string, JobNum:string, ChangeDate:string, ChangeTime:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobAuditRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobAuditRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobAudit for the service
   Description: Calls UpdateExt to update JobAudit. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAudit
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param ChangeDate Desc: ChangeDate   Required: True   Allow empty value : True
      @param ChangeTime Desc: ChangeTime   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAuditRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company:string, JobNum:string, ChangeDate:string, ChangeTime:string, requestBody:Erp_Tablesets_JobAuditRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobAudit item
   Description: Call UpdateExt to delete JobAudit item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAudit
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param ChangeDate Desc: ChangeDate   Required: True   Allow empty value : True
      @param ChangeTime Desc: ChangeTime   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company:string, JobNum:string, ChangeDate:string, ChangeTime:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobParts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobParts
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobPartRow
   */  
export function get_JobParts(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobPartRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobPartRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobParts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobPartRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobPartRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobParts(requestBody:Erp_Tablesets_JobPartRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobPart item
   Description: Calls GetByID to retrieve the JobPart item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobPart
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobPartRow
   */  
export function get_JobParts_Company_JobNum_PartNum(Company:string, JobNum:string, PartNum:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobPartRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobPartRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobPart for the service
   Description: Calls UpdateExt to update JobPart. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobPart
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobPartRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobParts_Company_JobNum_PartNum(Company:string, JobNum:string, PartNum:string, requestBody:Erp_Tablesets_JobPartRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobPart item
   Description: Call UpdateExt to delete JobPart item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobPart
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobParts_Company_JobNum_PartNum(Company:string, JobNum:string, PartNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get JobProds items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobProds1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobProdRow
   */  
export function get_JobParts_Company_JobNum_PartNum_JobProds(Company:string, JobNum:string, PartNum:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobProdRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")/JobProds", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobProdRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobProd item
   Description: Calls GetByID to retrieve the JobProd item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobProd1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      @param WarehouseCode Desc: WarehouseCode   Required: True   Allow empty value : True
      @param TargetJobNum Desc: TargetJobNum   Required: True   Allow empty value : True
      @param TargetAssemblySeq Desc: TargetAssemblySeq   Required: True
      @param TargetMtlSeq Desc: TargetMtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobProdRow
   */  
export function get_JobParts_Company_JobNum_PartNum_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company:string, JobNum:string, PartNum:string, OrderNum:string, OrderLine:string, OrderRelNum:string, WarehouseCode:string, TargetJobNum:string, TargetAssemblySeq:string, TargetMtlSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobProdRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobProdRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobProds items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobProds
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobProdRow
   */  
export function get_JobProds(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobProdRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobProdRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobProds
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobProdRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobProdRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobProds(requestBody:Erp_Tablesets_JobProdRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobProd item
   Description: Calls GetByID to retrieve the JobProd item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobProd
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      @param WarehouseCode Desc: WarehouseCode   Required: True   Allow empty value : True
      @param TargetJobNum Desc: TargetJobNum   Required: True   Allow empty value : True
      @param TargetAssemblySeq Desc: TargetAssemblySeq   Required: True
      @param TargetMtlSeq Desc: TargetMtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobProdRow
   */  
export function get_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company:string, JobNum:string, PartNum:string, OrderNum:string, OrderLine:string, OrderRelNum:string, WarehouseCode:string, TargetJobNum:string, TargetAssemblySeq:string, TargetMtlSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobProdRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobProdRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobProd for the service
   Description: Calls UpdateExt to update JobProd. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobProd
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      @param WarehouseCode Desc: WarehouseCode   Required: True   Allow empty value : True
      @param TargetJobNum Desc: TargetJobNum   Required: True   Allow empty value : True
      @param TargetAssemblySeq Desc: TargetAssemblySeq   Required: True
      @param TargetMtlSeq Desc: TargetMtlSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobProdRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company:string, JobNum:string, PartNum:string, OrderNum:string, OrderLine:string, OrderRelNum:string, WarehouseCode:string, TargetJobNum:string, TargetAssemblySeq:string, TargetMtlSeq:string, requestBody:Erp_Tablesets_JobProdRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobProd item
   Description: Call UpdateExt to delete JobProd item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobProd
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param PartNum Desc: PartNum   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      @param WarehouseCode Desc: WarehouseCode   Required: True   Allow empty value : True
      @param TargetJobNum Desc: TargetJobNum   Required: True   Allow empty value : True
      @param TargetAssemblySeq Desc: TargetAssemblySeq   Required: True
      @param TargetMtlSeq Desc: TargetMtlSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company:string, JobNum:string, PartNum:string, OrderNum:string, OrderLine:string, OrderRelNum:string, WarehouseCode:string, TargetJobNum:string, TargetAssemblySeq:string, TargetMtlSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobHeadAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobHeadAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadAttchRow
   */  
export function get_JobHeadAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobHeadAttches
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobHeadAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobHeadAttches(requestBody:Erp_Tablesets_JobHeadAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobHeadAttch item
   Description: Calls GetByID to retrieve the JobHeadAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobHeadAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobHeadAttchRow
   */  
export function get_JobHeadAttches_Company_JobNum_DrawingSeq(Company:string, JobNum:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobHeadAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobHeadAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobHeadAttch for the service
   Description: Calls UpdateExt to update JobHeadAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobHeadAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobHeadAttches_Company_JobNum_DrawingSeq(Company:string, JobNum:string, DrawingSeq:string, requestBody:Erp_Tablesets_JobHeadAttchRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobHeadAttch item
   Description: Call UpdateExt to delete JobHeadAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobHeadAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobHeadAttches_Company_JobNum_DrawingSeq(Company:string, JobNum:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get JobStages items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobStages
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobStageRow
   */  
export function get_JobStages(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobStageRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobStageRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobStages
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobStageRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference #/components/schemas/Erp.Tablesets.JobStageRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobStages(requestBody:Erp_Tablesets_JobStageRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the JobStage item
   Description: Calls GetByID to retrieve the JobStage item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobStage
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param StageSeq Desc: StageSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Erp.Tablesets.JobStageRow
   */  
export function get_JobStages_Company_JobNum_AssemblySeq_StageSeq(Company:string, JobNum:string, AssemblySeq:string, StageSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_JobStageRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages(" + Company + "," + JobNum + "," + AssemblySeq + "," + StageSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Erp_Tablesets_JobStageRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update JobStage for the service
   Description: Calls UpdateExt to update JobStage. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobStage
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param StageSeq Desc: StageSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      @param requestBody  Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobStageRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_JobStages_Company_JobNum_AssemblySeq_StageSeq(Company:string, JobNum:string, AssemblySeq:string, StageSeq:string, requestBody:Erp_Tablesets_JobStageRow, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages(" + Company + "," + JobNum + "," + AssemblySeq + "," + StageSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete JobStage item
   Description: Call UpdateExt to delete JobStage item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobStage
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param AssemblySeq Desc: AssemblySeq   Required: True
      @param StageSeq Desc: StageSeq   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_JobStages_Company_JobNum_AssemblySeq_StageSeq(Company:string, JobNum:string, AssemblySeq:string, StageSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages(" + Company + "," + JobNum + "," + AssemblySeq + "," + StageSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference #/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadListRow
   */  
export function get_List(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadListRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadListRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Custom methods:
//////////////////////////////////////////////////////////////////////////

   /**  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetRows(whereClauseJobHead:string, whereClauseJobHeadAttch:string, whereClauseJobAsmbl:string, whereClauseJobAsmblAttch:string, whereClauseJobAsmblInsp:string, whereClauseJobMtl:string, whereClauseJobMtlAttch:string, whereClauseJobMtlInsp:string, whereClauseJobMtlRefDes:string, whereClauseJobMtlRestriction:string, whereClauseJobMtlRestrictSubst:string, whereClauseJobOper:string, whereClauseJobOperAttch:string, whereClauseJobOperAction:string, whereClauseJobOperActionParam:string, whereClauseJobOperInsp:string, whereClauseJobOperMachParam:string, whereClauseJobOpDtl:string, whereClauseJobResources:string, whereClauseJobOperRestriction:string, whereClauseJobOperRestrictSubst:string, whereClauseJobAsmblRestriction:string, whereClauseJobAsmblRestrictSubst:string, whereClauseJobAsmRefDes:string, whereClauseJobAudit:string, whereClauseJobPart:string, whereClauseJobProd:string, whereClauseJobStage:string, pageSize:string, absolutePage:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof whereClauseJobHead!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobHead=" + whereClauseJobHead
   }
   if(typeof whereClauseJobHeadAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobHeadAttch=" + whereClauseJobHeadAttch
   }
   if(typeof whereClauseJobAsmbl!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAsmbl=" + whereClauseJobAsmbl
   }
   if(typeof whereClauseJobAsmblAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAsmblAttch=" + whereClauseJobAsmblAttch
   }
   if(typeof whereClauseJobAsmblInsp!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAsmblInsp=" + whereClauseJobAsmblInsp
   }
   if(typeof whereClauseJobMtl!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobMtl=" + whereClauseJobMtl
   }
   if(typeof whereClauseJobMtlAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobMtlAttch=" + whereClauseJobMtlAttch
   }
   if(typeof whereClauseJobMtlInsp!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobMtlInsp=" + whereClauseJobMtlInsp
   }
   if(typeof whereClauseJobMtlRefDes!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobMtlRefDes=" + whereClauseJobMtlRefDes
   }
   if(typeof whereClauseJobMtlRestriction!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobMtlRestriction=" + whereClauseJobMtlRestriction
   }
   if(typeof whereClauseJobMtlRestrictSubst!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobMtlRestrictSubst=" + whereClauseJobMtlRestrictSubst
   }
   if(typeof whereClauseJobOper!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOper=" + whereClauseJobOper
   }
   if(typeof whereClauseJobOperAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperAttch=" + whereClauseJobOperAttch
   }
   if(typeof whereClauseJobOperAction!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperAction=" + whereClauseJobOperAction
   }
   if(typeof whereClauseJobOperActionParam!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperActionParam=" + whereClauseJobOperActionParam
   }
   if(typeof whereClauseJobOperInsp!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperInsp=" + whereClauseJobOperInsp
   }
   if(typeof whereClauseJobOperMachParam!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperMachParam=" + whereClauseJobOperMachParam
   }
   if(typeof whereClauseJobOpDtl!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOpDtl=" + whereClauseJobOpDtl
   }
   if(typeof whereClauseJobResources!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobResources=" + whereClauseJobResources
   }
   if(typeof whereClauseJobOperRestriction!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperRestriction=" + whereClauseJobOperRestriction
   }
   if(typeof whereClauseJobOperRestrictSubst!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobOperRestrictSubst=" + whereClauseJobOperRestrictSubst
   }
   if(typeof whereClauseJobAsmblRestriction!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAsmblRestriction=" + whereClauseJobAsmblRestriction
   }
   if(typeof whereClauseJobAsmblRestrictSubst!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAsmblRestrictSubst=" + whereClauseJobAsmblRestrictSubst
   }
   if(typeof whereClauseJobAsmRefDes!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAsmRefDes=" + whereClauseJobAsmRefDes
   }
   if(typeof whereClauseJobAudit!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobAudit=" + whereClauseJobAudit
   }
   if(typeof whereClauseJobPart!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobPart=" + whereClauseJobPart
   }
   if(typeof whereClauseJobProd!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobProd=" + whereClauseJobProd
   }
   if(typeof whereClauseJobStage!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseJobStage=" + whereClauseJobStage
   }
   if(typeof pageSize!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "pageSize=" + pageSize
   }
   if(typeof absolutePage!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "absolutePage=" + absolutePage
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetRows_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetRows" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetRows_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetByID(jobNum:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof jobNum!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "jobNum=" + jobNum
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetByID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetByID" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetByID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      @param whereClause Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      @param pageSize Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      @param absolutePage Desc: Page of rows to return.   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetList(whereClause:string, pageSize:string, absolutePage:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof whereClause!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClause=" + whereClause
   }
   if(typeof pageSize!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "pageSize=" + pageSize
   }
   if(typeof absolutePage!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "absolutePage=" + absolutePage
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetList_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetList" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetList_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtlRefDes
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtlRefDes(requestBody:GetNewJobMtlRefDes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtlRefDes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtlRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtlRefDes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtlRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlRestriction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtlRestriction(requestBody:GetNewJobMtlRestriction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtlRestriction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtlRestriction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtlRestriction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtlRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlRestrictSubst
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtlRestrictSubst(requestBody:GetNewJobMtlRestrictSubst_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtlRestrictSubst_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtlRestrictSubst", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtlRestrictSubst_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOper
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOper
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOper(requestBody:GetNewJobOper_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOper_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOper", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOper_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperAttch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperAttch(requestBody:GetNewJobOperAttch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperAttch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperAttch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperAction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperAction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperAction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperAction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperAction(requestBody:GetNewJobOperAction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperAction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperAction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperAction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperActionParam
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperActionParam
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperActionParam_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperActionParam_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperActionParam(requestBody:GetNewJobOperActionParam_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperActionParam_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperActionParam", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperActionParam_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperInsp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperInsp
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperInsp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperInsp_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperInsp(requestBody:GetNewJobOperInsp_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperInsp_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperInsp", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperInsp_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperMachParam
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperMachParam
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperMachParam_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperMachParam_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperMachParam(requestBody:GetNewJobOperMachParam_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperMachParam_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperMachParam", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperMachParam_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOpDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOpDtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOpDtl(requestBody:GetNewJobOpDtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOpDtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOpDtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOpDtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperRestriction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperRestriction(requestBody:GetNewJobOperRestriction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperRestriction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperRestriction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperRestriction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobOperRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperRestrictSubst
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobOperRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobOperRestrictSubst(requestBody:GetNewJobOperRestrictSubst_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobOperRestrictSubst_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobOperRestrictSubst", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobOperRestrictSubst_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAsmblRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblRestriction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAsmblRestriction(requestBody:GetNewJobAsmblRestriction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAsmblRestriction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAsmblRestriction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAsmblRestriction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAsmblRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblRestrictSubst
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAsmblRestrictSubst(requestBody:GetNewJobAsmblRestrictSubst_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAsmblRestrictSubst_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAsmblRestrictSubst", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAsmblRestrictSubst_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAsmRefDes
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAsmRefDes(requestBody:GetNewJobAsmRefDes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAsmRefDes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAsmRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAsmRefDes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAudit
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAudit
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAudit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAudit_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAudit(requestBody:GetNewJobAudit_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAudit_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAudit", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAudit_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobPart
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobPart
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobPart(requestBody:GetNewJobPart_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobPart_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobPart", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobPart_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobProd
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobProd
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobProd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobProd_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobProd(requestBody:GetNewJobProd_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobProd_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobProd", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobProd_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobStage
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobStage
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobStage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobStage_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobStage(requestBody:GetNewJobStage_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobStage_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobStage", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobStage_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_DeleteByID(requestBody:DeleteByID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<DeleteByID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/DeleteByID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as DeleteByID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetBySysRowID(id:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof id!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "id=" + id
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetBySysRowID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetBySysRowID" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetBySysRowID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetBySysRowIDs(ids:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof ids!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "ids=" + ids
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetBySysRowIDs_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetBySysRowIDs" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetBySysRowIDs_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_Update(requestBody:Update_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Update_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/Update", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as Update_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_UpdateExt(requestBody:UpdateExt_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<UpdateExt_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/UpdateExt", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as UpdateExt_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdMakeToType
   Description: This method runs logic determine what fields can have value based on the MakeToType
and runs logic to set the stock and order WIP quantities.
This method should run when the JobProd.MakeToType field changes.
   OperationID: ChangeJobProdMakeToType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdMakeToType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdMakeToType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdMakeToType(requestBody:ChangeJobProdMakeToType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdMakeToType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdMakeToType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdMakeToType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdOrderLine
   Description: This method sets the OrderRelNum to zero when OrderLine is changed.
This method should run when the JobProd.OrderLine field is changed.
   OperationID: ChangeJobProdOrderLine
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdOrderLine(requestBody:ChangeJobProdOrderLine_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdOrderLine_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdOrderLine_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdOrderNum
   Description: This method runs logic to numerous associated fields to blank or zero based on a new OrderNum.
This method should run when the JobProd.OrderNum field changes.
   OperationID: ChangeJobProdOrderNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOrderNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOrderNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdOrderNum(requestBody:ChangeJobProdOrderNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdOrderNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdOrderNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdOrderNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdOrderRelNum
   Description: This method runs logic to validate if a link exists, update the Production Quantity,
set stock and order WIP quantities, and validate if direct has been selected.
This method should run when the JobProd.OrderRelNum field changes.
   OperationID: ChangeJobProdOrderRelNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOrderRelNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOrderRelNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdOrderRelNum(requestBody:ChangeJobProdOrderRelNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdOrderRelNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdOrderRelNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdOrderRelNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdOurStockQty
   Description: This method runs public method CheckJobProdProdQty to validate quantities.
This method should run when the JobProd.OurStockQty field changes.
   OperationID: ChangeJobProdOurStockQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOurStockQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOurStockQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdOurStockQty(requestBody:ChangeJobProdOurStockQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdOurStockQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdOurStockQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdOurStockQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdProdQty
   Description: This method runs public method CheckJobProdProdQty to validate quantities and
set stock and order WIP quantities.
This method should run when the JobProd.ProdQty field changes.
   OperationID: ChangeJobProdProdQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdProdQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdProdQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdProdQty(requestBody:ChangeJobProdProdQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdProdQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdProdQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdProdQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdTargetAssemblySeq
   Description: This method runs logic to clear detail sequence and populate the MakeToJobQty field.
This method should run when the JobProd.TargetAssemblySeq field changes.
   OperationID: ChangeJobProdTargetAssemblySeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdTargetAssemblySeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdTargetAssemblySeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdTargetAssemblySeq(requestBody:ChangeJobProdTargetAssemblySeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdTargetAssemblySeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdTargetAssemblySeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdTargetAssemblySeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdTargetJobNum
   Description: This method should run when the JobProd.TargetJobNum field changes.
   OperationID: ChangeJobProdTargetJobNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdTargetJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdTargetJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdTargetJobNum(requestBody:ChangeJobProdTargetJobNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdTargetJobNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdTargetJobNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdTargetJobNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdTargetMtlSeq
   Description: This method runs validation for links, assign values, and populate MakeToJobQty field
This method should run when the JobProd.TargetMtlSeq field changes.
   OperationID: ChangeJobProdTargetMtlSeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdTargetMtlSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdTargetMtlSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdTargetMtlSeq(requestBody:ChangeJobProdTargetMtlSeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdTargetMtlSeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdTargetMtlSeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdTargetMtlSeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeResTopics
   Description: This method should be invoked when the ResTopics changes.
Validates and sets the individual ResTopic fields.
   OperationID: ChangeResTopics
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeResTopics_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeResTopics_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeResTopics(requestBody:ChangeResTopics_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeResTopics_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeResTopics", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeResTopics_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckApprovedSupplier
   Description: This method runs logic to verify if supplier is approved.  This should be called
after adding/updating a demand link or adding/updating a subcontract operation.
This method always needs a jobnumber inputted.  However, ipJobOperRowid or ipJobProdRowid
can either be blank.  If ipJobOperRowid has value then this method will ignore any value
in ipJobProdRowid.   This method will output warning messages that may or may not
exist.
   OperationID: CheckApprovedSupplier
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckApprovedSupplier_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckApprovedSupplier_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckApprovedSupplier(requestBody:CheckApprovedSupplier_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckApprovedSupplier_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckApprovedSupplier", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckApprovedSupplier_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobAsmblParent
   Description: This method validates validates the new Parent field
   OperationID: CheckChangeJobAsmblParent
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobAsmblParent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobAsmblParent_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobAsmblParent(requestBody:CheckChangeJobAsmblParent_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobAsmblParent_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobAsmblParent", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobAsmblParent_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobMtlMiscCharge
   Description: This method validates if transaction exists
   OperationID: CheckChangeJobMtlMiscCharge
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobMtlMiscCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobMtlMiscCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobMtlMiscCharge(requestBody:CheckChangeJobMtlMiscCharge_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobMtlMiscCharge_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobMtlMiscCharge", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobMtlMiscCharge_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlAttributeSetID
   OperationID: ChangeJobMtlAttributeSetID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlAttributeSetID(requestBody:ChangeJobMtlAttributeSetID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlAttributeSetID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlAttributeSetID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlAttributeSetID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadAttributeSetID
   OperationID: ChangeJobHeadAttributeSetID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadAttributeSetID(requestBody:ChangeJobHeadAttributeSetID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadAttributeSetID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadAttributeSetID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadAttributeSetID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobPartAttributeSetID
   OperationID: ChangeJobPartAttributeSetID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobPartAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobPartAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobPartAttributeSetID(requestBody:ChangeJobPartAttributeSetID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobPartAttributeSetID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobPartAttributeSetID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobPartAttributeSetID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobOperPartNum
   Description: This method validates the JobOper.PartNum
This method should run when the JobOper.PartNum field changes.
   OperationID: CheckChangeJobOperPartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobOperPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobOperPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobOperPartNum(requestBody:CheckChangeJobOperPartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobOperPartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobOperPartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobOperPartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobProdOrderRelNum
   Description: This method runs logic to validate if a link exists, and validate if direct has been selected.
   OperationID: CheckChangeJobProdOrderRelNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdOrderRelNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdOrderRelNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobProdOrderRelNum(requestBody:CheckChangeJobProdOrderRelNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobProdOrderRelNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobProdOrderRelNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobProdOrderRelNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobProdTargetAssemblySeq
   Description: This method checks if a record to make the assembly direct already exists.
   OperationID: CheckChangeJobProdTargetAssemblySeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdTargetAssemblySeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdTargetAssemblySeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobProdTargetAssemblySeq(requestBody:CheckChangeJobProdTargetAssemblySeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobProdTargetAssemblySeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobProdTargetAssemblySeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobProdTargetAssemblySeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobProdTargetJobNum
   Description: This method checks to see if the target job is closed or not
and returns a message if job is closed, also validates the jobnum
   OperationID: CheckChangeJobProdTargetJobNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdTargetJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdTargetJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobProdTargetJobNum(requestBody:CheckChangeJobProdTargetJobNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobProdTargetJobNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobProdTargetJobNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobProdTargetJobNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangeJobProdTargetMtlSeq
   Description: This method runs validation for links, assign values, and populate MakeToJobQty field
This method should run when the JobProd.TargetMtlSeq field changes.
   OperationID: CheckChangeJobProdTargetMtlSeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdTargetMtlSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdTargetMtlSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangeJobProdTargetMtlSeq(requestBody:CheckChangeJobProdTargetMtlSeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckChangeJobProdTargetMtlSeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckChangeJobProdTargetMtlSeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckChangeJobProdTargetMtlSeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckConfigurationAndGetConfigType
   Description: This method checks if a part must be configured prior to a GetDetails.
   OperationID: CheckConfigurationAndGetConfigType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckConfigurationAndGetConfigType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfigurationAndGetConfigType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckConfigurationAndGetConfigType(requestBody:CheckConfigurationAndGetConfigType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckConfigurationAndGetConfigType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckConfigurationAndGetConfigType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckConfigurationAndGetConfigType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckConfiguration
   Description: This method checks if a part must be configured prior to a GetDetails.
   OperationID: CheckConfiguration
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckConfiguration_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfiguration_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckConfiguration(requestBody:CheckConfiguration_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckConfiguration_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckConfiguration", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckConfiguration_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckConfigurationAndGetConfigInfo
   Description: This method checks if a part must be configured prior to a GetDetails and retrieves information related to the configuration.
   OperationID: CheckConfigurationAndGetConfigInfo
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckConfigurationAndGetConfigInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfigurationAndGetConfigInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckConfigurationAndGetConfigInfo(requestBody:CheckConfigurationAndGetConfigInfo_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckConfigurationAndGetConfigInfo_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckConfigurationAndGetConfigInfo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckConfigurationAndGetConfigInfo_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method UpdateKBMaxConfigurator
   Description: Update the CPQ Configurator on the given Job
   OperationID: UpdateKBMaxConfigurator
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/UpdateKBMaxConfigurator_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateKBMaxConfigurator_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_UpdateKBMaxConfigurator(requestBody:UpdateKBMaxConfigurator_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<UpdateKBMaxConfigurator_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/UpdateKBMaxConfigurator", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as UpdateKBMaxConfigurator_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method SyncKBMaxConfigurator
   Description: This will trigger the loading of the method from CPQ onto the Job Assembly.
   OperationID: SyncKBMaxConfigurator
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/SyncKBMaxConfigurator_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SyncKBMaxConfigurator_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_SyncKBMaxConfigurator(requestBody:SyncKBMaxConfigurator_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<SyncKBMaxConfigurator_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/SyncKBMaxConfigurator", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as SyncKBMaxConfigurator_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method SetKBMaxConfigProdID
   Description: Set the CPQ Quote Product ID on the given Job.
This will trigger the loading of the method from CPQ onto the Job Assembly.
   OperationID: SetKBMaxConfigProdID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/SetKBMaxConfigProdID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetKBMaxConfigProdID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_SetKBMaxConfigProdID(requestBody:SetKBMaxConfigProdID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<SetKBMaxConfigProdID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/SetKBMaxConfigProdID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as SetKBMaxConfigProdID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method PopulateCallContext
   Description: Allows for assigning of a generic CallContext for integrations.
   OperationID: PopulateCallContext
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/PopulateCallContext_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PopulateCallContext_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PopulateCallContext(requestBody:PopulateCallContext_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<PopulateCallContext_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/PopulateCallContext", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as PopulateCallContext_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetApprovedConfiguredRevisionNum
   Description: Gets the most recent approved configured revision.
   OperationID: GetApprovedConfiguredRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetApprovedConfiguredRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetApprovedConfiguredRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetApprovedConfiguredRevisionNum(requestBody:GetApprovedConfiguredRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetApprovedConfiguredRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetApprovedConfiguredRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetApprovedConfiguredRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckForChanges
   Description: This method determines if a job audit description needs to be entered into
ttjobhead.changedescription to be stored in the jobaudit record.  Call this
before the update of the JobHead record.
   OperationID: CheckForChanges
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckForChanges_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckForChanges_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckForChanges(requestBody:CheckForChanges_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckForChanges_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckForChanges", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckForChanges_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckInactiveSchedRequirement
   Description: Validates if we're using an Inactive Scheduling Resource
   OperationID: CheckInactiveSchedRequirement
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckInactiveSchedRequirement_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckInactiveSchedRequirement_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckInactiveSchedRequirement(requestBody:CheckInactiveSchedRequirement_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckInactiveSchedRequirement_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckInactiveSchedRequirement", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckInactiveSchedRequirement_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobMtlBuyIt
   Description: This method should run when the JobMtl.BuyIt field is changing.
   OperationID: CheckJobMtlBuyIt
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobMtlBuyIt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobMtlBuyIt_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobMtlBuyIt(requestBody:CheckJobMtlBuyIt_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobMtlBuyIt_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobMtlBuyIt", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobMtlBuyIt_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobMtlPartNumFixQty
   Description: This method validates the Fixed Qty checkbox control on screen, according to Serial Numbers rules.
   OperationID: CheckJobMtlPartNumFixQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobMtlPartNumFixQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobMtlPartNumFixQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobMtlPartNumFixQty(requestBody:CheckJobMtlPartNumFixQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobMtlPartNumFixQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobMtlPartNumFixQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobMtlPartNumFixQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobOperOprSeq
   Description: This method validates for an invalid sequence for Operation of Subcontract
   OperationID: CheckJobOperOprSeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobOperOprSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobOperOprSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobOperOprSeq(requestBody:CheckJobOperOprSeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobOperOprSeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobOperOprSeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobOperOprSeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobOperPrimaryProdOpDtl
   Description: This method validated the value of Primary Production Operation Detail.
This method should run when the JobOper.PrimaryProdOpDtl is changing.
   OperationID: CheckJobOperPrimaryProdOpDtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobOperPrimaryProdOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobOperPrimaryProdOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobOperPrimaryProdOpDtl(requestBody:CheckJobOperPrimaryProdOpDtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobOperPrimaryProdOpDtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobOperPrimaryProdOpDtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobOperPrimaryProdOpDtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobOperPrimarySetupOpDtl
   Description: This method validated the value of Primary Setup Operation Detail.
This method should run when the JobOper.PrimarySetupOpDtl is changing.
   OperationID: CheckJobOperPrimarySetupOpDtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobOperPrimarySetupOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobOperPrimarySetupOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobOperPrimarySetupOpDtl(requestBody:CheckJobOperPrimarySetupOpDtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobOperPrimarySetupOpDtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobOperPrimarySetupOpDtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobOperPrimarySetupOpDtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobPartPartNumIsSerTra
   Description: This method validates the JobPart.PartNum is not serial tracked. The rule is that additional JobPart
records are not allowed to be serial tracked.
   OperationID: CheckJobPartPartNumIsSerTra
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobPartPartNumIsSerTra_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobPartPartNumIsSerTra_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobPartPartNumIsSerTra(requestBody:CheckJobPartPartNumIsSerTra_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobPartPartNumIsSerTra_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobPartPartNumIsSerTra", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobPartPartNumIsSerTra_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobProdMakeToType
   Description: This method validates for an invalid if you can change the JobProd.MakeToType
to the provided new value.
   OperationID: CheckJobProdMakeToType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobProdMakeToType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobProdMakeToType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobProdMakeToType(requestBody:CheckJobProdMakeToType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobProdMakeToType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobProdMakeToType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobProdMakeToType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobProdProdQty
   Description: This method validates the JobProd.ProdQty field and returns a message.
   OperationID: CheckJobProdProdQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobProdProdQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobProdProdQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobProdProdQty(requestBody:CheckJobProdProdQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobProdProdQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobProdProdQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobProdProdQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobProdQtyJob
   Description: This method checks the allocated material/assembly to see if short/over requested quantity
and returns a message.
   OperationID: CheckJobProdQtyJob
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobProdQtyJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobProdQtyJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobProdQtyJob(requestBody:CheckJobProdQtyJob_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobProdQtyJob_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobProdQtyJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobProdQtyJob_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckLink
   Description: can be changed make direct or not
   OperationID: CheckLink
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckLink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLink_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckLink(requestBody:CheckLink_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckLink_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckLink", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckLink_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckPrePartInfo
   Description: This method checks to see if there are any questions or issues with the part entered
and returns a message, a part number and if any substitutes exist.
   OperationID: CheckPrePartInfo
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckPrePartInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPrePartInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckPrePartInfo(requestBody:CheckPrePartInfo_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckPrePartInfo_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckPrePartInfo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckPrePartInfo_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckPreProjectID
   Description: This method validates the project id and returns a question if you would like to proceed message.
   OperationID: CheckPreProjectID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckPreProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPreProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckPreProjectID(requestBody:CheckPreProjectID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckPreProjectID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckPreProjectID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckPreProjectID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckIfMaterialIsIssued
   Description: This method validates if the part has been issued.
   OperationID: CheckIfMaterialIsIssued
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckIfMaterialIsIssued_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckIfMaterialIsIssued_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckIfMaterialIsIssued(requestBody:CheckIfMaterialIsIssued_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckIfMaterialIsIssued_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckIfMaterialIsIssued", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckIfMaterialIsIssued_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckResourcePlants
   Description: This method validates that the Plant of the job operation resources
are the same as the job
Maintenance Jobs are and exception,
they can have resources of the Job Plant or Equipments Plant or the Plant Maintenance Plant
   OperationID: CheckResourcePlants
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckResourcePlants_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckResourcePlants_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckResourcePlants(requestBody:CheckResourcePlants_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckResourcePlants_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckResourcePlants", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckResourcePlants_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckEngineered
   OperationID: CheckEngineered
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckEngineered_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckEngineered(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckEngineered_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckEngineered", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckEngineered_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckToScheduleAnUnengineered
   OperationID: CheckToScheduleAnUnengineered
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckToScheduleAnUnengineered_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckToScheduleAnUnengineered_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckToScheduleAnUnengineered(requestBody:CheckToScheduleAnUnengineered_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckToScheduleAnUnengineered_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckToScheduleAnUnengineered", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckToScheduleAnUnengineered_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckToReschedule
   Description: This method checks the required due date and production quantity and
returns a message asking if you would like to schedule if the conditions are met.
   OperationID: CheckToReschedule
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckToReschedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckToReschedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckToReschedule(requestBody:CheckToReschedule_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckToReschedule_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckToReschedule", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckToReschedule_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckTotProdQty
   Description: This method checks the total production quantity and returns messages if conditions exist
and the returned message will contain 'do you want to continue?'.
Depending on how/where it is called, the ipJobNum may be blank and the ipQuantity may be zero.
Job Entry calls this on "changing" of the Engineered flag to true. In this case it passes the ipQuantity is zero since
the jobs production demands are already known.
During Job Manager, Create Job the ipJobNum is blank, but the ipQuantity of the demand is passed since this demand is yet in the
job.
   OperationID: CheckTotProdQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckTotProdQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckTotProdQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckTotProdQty(requestBody:CheckTotProdQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckTotProdQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckTotProdQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckTotProdQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckUnfirmJob
   Description: This method checks to see if the unfirmed job the user is firming
is the child of another job (make to job) that is as of yet
not firmed. If so, then ask the user if they still want to continue to firm the
job.
   OperationID: CheckUnfirmJob
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckUnfirmJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckUnfirmJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckUnfirmJob(requestBody:CheckUnfirmJob_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckUnfirmJob_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckUnfirmJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckUnfirmJob_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChooseUnlink
   Description: This method unlinks and deletes a jobprod record and returns the updated dataset
   OperationID: ChooseUnlink
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChooseUnlink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChooseUnlink_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChooseUnlink(requestBody:ChooseUnlink_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChooseUnlink_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChooseUnlink", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChooseUnlink_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method JobAsmblChildDelete
   Description: Deletes the JobAsmbl child records
   OperationID: JobAsmblChildDelete
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/JobAsmblChildDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/JobAsmblChildDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobAsmblChildDelete(requestBody:JobAsmblChildDelete_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<JobAsmblChildDelete_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblChildDelete", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as JobAsmblChildDelete_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CreateJobPWB
   Description: The method will create a job when properly called from Planning Workbench.
   OperationID: CreateJobPWB
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CreateJobPWB_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateJobPWB_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CreateJobPWB(requestBody:CreateJobPWB_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CreateJobPWB_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CreateJobPWB", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CreateJobPWB_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method DeleteAll
   Description: The method deletes all assemblys and their subassemblys, materials and operations
while leaving the base assembly sequence alone however removing the base assembly's material
and operations.
   OperationID: DeleteAll
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/DeleteAll_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteAll_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_DeleteAll(requestBody:DeleteAll_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<DeleteAll_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/DeleteAll", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as DeleteAll_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method DeleteRefDesRange
   Description: Deletes JobMtlRefDes records based on the JobMtl dataset fields.
   OperationID: DeleteRefDesRange
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/DeleteRefDesRange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteRefDesRange_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_DeleteRefDesRange(requestBody:DeleteRefDesRange_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<DeleteRefDesRange_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/DeleteRefDesRange", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as DeleteRefDesRange_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtlByStageNumber
   Description: Inserts a new JobMtl row in the DataSet with defaults populated, based on Stage Number.
   OperationID: GetNewJobMtlByStageNumber
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlByStageNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlByStageNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtlByStageNumber(requestBody:GetNewJobMtlByStageNumber_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtlByStageNumber_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtlByStageNumber", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtlByStageNumber_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method FindAssembly
   Description: This method will locate a JobAsmbl record in the tree based on the inputted parameters.
   OperationID: FindAssembly
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/FindAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/FindAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_FindAssembly(requestBody:FindAssembly_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<FindAssembly_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/FindAssembly", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as FindAssembly_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetAssemblyCosts
   Description: Returns the costs of Assemblies and Materials.
   OperationID: GetAssemblyCosts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetAssemblyCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAssemblyCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetAssemblyCosts(requestBody:GetAssemblyCosts_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetAssemblyCosts_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetAssemblyCosts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetAssemblyCosts_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetByIdandJobType
   Description: A variation of the standard GetByID. Besides JobNum also has parameter for JobType(s).
Note JobType is a comma separated list of types to be considered valid for this Get.
Used as a predecessor to calling GetByID.
   OperationID: GetByIdandJobType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetByIdandJobType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByIdandJobType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetByIdandJobType(requestBody:GetByIdandJobType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetByIdandJobType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetByIdandJobType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetByIdandJobType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDatasetForTreeByRef
   Description: Same as GetDataSetForTree but expects ref JobEntryTableset to improve performance within kinetic merging large volumes of data.
            
This methods will return the dataset for Job Entry.  The method will return the
records related to the assembly provided and the first child level assemblies related to
the input inputted assembly.
   OperationID: GetDatasetForTreeByRef
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetDatasetForTreeByRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDatasetForTreeByRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDatasetForTreeByRef(requestBody:GetDatasetForTreeByRef_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetDatasetForTreeByRef_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetDatasetForTreeByRef", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetDatasetForTreeByRef_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDatasetForTree
   Description: This methods will return the dataset for Job Entry.  The method will return the
records related to the assembly provided and the first child level assemblies related to
the input inputted assembly.
   OperationID: GetDatasetForTree
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetDatasetForTree_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDatasetForTree_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDatasetForTree(requestBody:GetDatasetForTree_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetDatasetForTree_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetDatasetForTree", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetDatasetForTree_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDetails
   Description: This method retrieves the manufacturing details from a source file.  The source file
will either be a Quote, a Job, or a Method (Part).  The assembly records will
be created regardless if the part is in error or not.
   OperationID: GetDetails
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDetails(requestBody:GetDetails_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetDetails_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetDetails", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetDetails_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDetailsMsgWarning
   Description: This method retrieves the manufacturing details from a source file and generates a list of Warning messages. The source file
will either be a Quote, a Job, or a Method (Part).  The assembly records will
be created regardless if the part is in error or not.
   OperationID: GetDetailsMsgWarning
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetDetailsMsgWarning_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDetailsMsgWarning_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDetailsMsgWarning(requestBody:GetDetailsMsgWarning_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetDetailsMsgWarning_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetDetailsMsgWarning", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetDetailsMsgWarning_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetJMtlStat
   Description: This method returns the JMtlStat dataset.  This dataset is used for the
Job Material Status view.  Prior to running this method, the RowMod field
in JMtlStatFilters must be set to U if it does not alreay have this value.
   OperationID: GetJMtlStat
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetJMtlStat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJMtlStat_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetJMtlStat(requestBody:GetJMtlStat_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetJMtlStat_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetJMtlStat", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetJMtlStat_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetJMtlStatFilters
   Description: This method returns a record in the JMtlStatFilters dataset.  This record
is used to capture the filters to retrieve the JMtlStat data for the
Job Material Status view.
   OperationID: GetJMtlStatFilters
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetJMtlStatFilters_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJMtlStatFilters_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetJMtlStatFilters(requestBody:GetJMtlStatFilters_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetJMtlStatFilters_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetJMtlStatFilters", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetJMtlStatFilters_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetLinkedQuoteLineList
   Description: This method returns a list of QuoteNum and QuoteLine values for a JobProd record whose
OrderNum is greater than 0.
   OperationID: GetLinkedQuoteLineList
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetLinkedQuoteLineList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLinkedQuoteLineList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetLinkedQuoteLineList(requestBody:GetLinkedQuoteLineList_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetLinkedQuoteLineList_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetLinkedQuoteLineList", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetLinkedQuoteLineList_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetMaintJobEntryUIDefaults
   Description: Return separated list of values for use in MaintJobEntry: ExternalMES, JobReleaseAutoReserve, Use3rdPartySched from PlantConfCtrl
   OperationID: GetMaintJobEntryUIDefaults
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMaintJobEntryUIDefaults_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetMaintJobEntryUIDefaults(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetMaintJobEntryUIDefaults_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetMaintJobEntryUIDefaults", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetMaintJobEntryUIDefaults_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNextJobNum
   Description: This methods generates the next available job number from the JCSyst table.
   OperationID: GetNextJobNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNextJobNum(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNextJobNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNextJobNum", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNextJobNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNextJobNumOrderRelease
   Description: This methods generates the job number based off
of the OrderRel record related to the input PartSug.
   OperationID: GetNextJobNumOrderRelease
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNextJobNumOrderRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextJobNumOrderRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNextJobNumOrderRelease(requestBody:GetNextJobNumOrderRelease_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNextJobNumOrderRelease_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNextJobNumOrderRelease", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNextJobNumOrderRelease_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNextMntJobNum
   Description: Gets Next Job number for a "Maintenance" Job
   OperationID: GetNextMntJobNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextMntJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNextMntJobNum(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNextMntJobNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNextMntJobNum", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNextMntJobNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetMultiJobList
   Description: This method searches for Multi Jobs and its parent/child jobs, validating the proper flags are active
(autoLoadParentJobs and autoLoadChildJobs).
   OperationID: GetMultiJobList
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetMultiJobList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMultiJobList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetMultiJobList(requestBody:GetMultiJobList_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetMultiJobList_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetMultiJobList", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetMultiJobList_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetProjectRoles
   Description: Returns list of Project Roles
   OperationID: GetProjectRoles
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetProjectRoles_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetProjectRoles(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetProjectRoles_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetProjectRoles", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetProjectRoles_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InitJobOperSNReqSubConShip
   OperationID: InitJobOperSNReqSubConShip
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InitJobOperSNReqSubConShip_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InitJobOperSNReqSubConShip_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InitJobOperSNReqSubConShip(requestBody:InitJobOperSNReqSubConShip_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InitJobOperSNReqSubConShip_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InitJobOperSNReqSubConShip", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InitJobOperSNReqSubConShip_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertBOMAsm
   Description: This methods allows for the insertion of an engineering assembly for drag/drop functionality,
validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMAsm
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertBOMAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertBOMAsm(requestBody:InsertBOMAsm_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertBOMAsm_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertBOMAsm", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertBOMAsm_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertBOMMtl
   Description: This methods allows for the insertion of an engineering material for drag/drop functionality,
validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMMtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertBOMMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertBOMMtl(requestBody:InsertBOMMtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertBOMMtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertBOMMtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertBOMMtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertBOMMtlWithStage
   Description: This methods allows for the insertion of an engineering material for drag/drop functionality,
validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMMtlWithStage
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertBOMMtlWithStage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMMtlWithStage_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertBOMMtlWithStage(requestBody:InsertBOMMtlWithStage_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertBOMMtlWithStage_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertBOMMtlWithStage", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertBOMMtlWithStage_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertBOMOper
   Description: This methods allows for the insertion of an engineering operation for drag/drop functionality,
validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMOper
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertBOMOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertBOMOper(requestBody:InsertBOMOper_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertBOMOper_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertBOMOper", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertBOMOper_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertMaterial
   Description: This methods allows for the insertion on a material for drag/drop functionality,
validates a JobAsmbl record exists and the part is valid.
   OperationID: InsertMaterial
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertMaterial_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertMaterial_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertMaterial(requestBody:InsertMaterial_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertMaterial_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertMaterial", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertMaterial_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertMaterialWithStage
   Description: This methods allows for the insertion on a material for drag/drop functionality,
validates a JobAsmbl record exists and the part is valid. Used by Jobs with stages
   OperationID: InsertMaterialWithStage
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertMaterialWithStage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertMaterialWithStage_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertMaterialWithStage(requestBody:InsertMaterialWithStage_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertMaterialWithStage_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertMaterialWithStage", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertMaterialWithStage_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertNewJobAsmbl
   Description: This method creates a new Assembly after prompting for the AsemblySeq and BOMLevel
as well as the JobNum field. This is to replace the standard GetNewJobAsmbl when
needing to insert a new record between two existing records.
   OperationID: InsertNewJobAsmbl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertNewJobAsmbl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewJobAsmbl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertNewJobAsmbl(requestBody:InsertNewJobAsmbl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertNewJobAsmbl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertNewJobAsmbl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertNewJobAsmbl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertNewJobMtl
   Description: This methods allows for the insertion on a material for drag/drop functionality,
validates a JobAsmbl record exists and the part is valid.
   OperationID: InsertNewJobMtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertNewJobMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewJobMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertNewJobMtl(requestBody:InsertNewJobMtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertNewJobMtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertNewJobMtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertNewJobMtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertNewJobOper
   Description: This methods allows for the insertion on a new operation between two records
   OperationID: InsertNewJobOper
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertNewJobOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewJobOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertNewJobOper(requestBody:InsertNewJobOper_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertNewJobOper_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertNewJobOper", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertNewJobOper_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOpDtlCapability
   Description: This method allows for the insertion of Capability on an operation to create
operation detail for drag/drop functionality.
   OperationID: InsertOpDtlCapability
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOpDtlCapability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOpDtlCapability_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOpDtlCapability(requestBody:InsertOpDtlCapability_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOpDtlCapability_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOpDtlCapability", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOpDtlCapability_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOpDtlResGroup
   Description: This method allows for the insertion of Resource Group on an operation to create
operation detail for drag/drop functionality.
   OperationID: InsertOpDtlResGroup
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOpDtlResGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOpDtlResGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOpDtlResGroup(requestBody:InsertOpDtlResGroup_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOpDtlResGroup_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOpDtlResGroup", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOpDtlResGroup_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOpDtlResource
   Description: This method allows for the insertion of Resource on an operation to create
operation detail for drag/drop functionality.
   OperationID: InsertOpDtlResource
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOpDtlResource_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOpDtlResource_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOpDtlResource(requestBody:InsertOpDtlResource_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOpDtlResource_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOpDtlResource", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOpDtlResource_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOperationOP
   Description: This methods allows for the insertion on an operation for drag/drop functionality
   OperationID: InsertOperationOP
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOperationOP_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperationOP_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOperationOP(requestBody:InsertOperationOP_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOperationOP_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOperationOP", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOperationOP_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOperCapability
   Description: This method allows for the insertion of Capability on an assembly to create
JobOper/JobOpDtl for drag/drop functionality.
   OperationID: InsertOperCapability
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOperCapability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperCapability_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOperCapability(requestBody:InsertOperCapability_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOperCapability_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOperCapability", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOperCapability_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOperResGroup
   Description: This method allows for the insertion of ResourceGroup on an assembly to create
JobOper/JobOpDtl for drag/drop functionality.
   OperationID: InsertOperResGroup
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOperResGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperResGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOperResGroup(requestBody:InsertOperResGroup_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOperResGroup_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOperResGroup", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOperResGroup_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertOperResource
   Description: This method allows for the insertion of Resource on an assembly to create
JobOper/JobOpDtl for drag/drop functionality.
   OperationID: InsertOperResource
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertOperResource_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperResource_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertOperResource(requestBody:InsertOperResource_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertOperResource_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertOperResource", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertOperResource_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertSubAssembly
   Description: This methods allows for the insertion of a subassembly for drag/drop functionality,
validates the part.
   OperationID: InsertSubAssembly
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertSubAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertSubAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertSubAssembly(requestBody:InsertSubAssembly_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertSubAssembly_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertSubAssembly", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertSubAssembly_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method InsertNewSubAssembly
   Description: This methods allows for the insertion of a subassembly for drag/drop functionality,
validates the part.
   OperationID: InsertNewSubAssembly
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/InsertNewSubAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewSubAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_InsertNewSubAssembly(requestBody:InsertNewSubAssembly_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<InsertNewSubAssembly_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/InsertNewSubAssembly", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as InsertNewSubAssembly_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CollapseAsm
   OperationID: CollapseAsm
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CollapseAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CollapseAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CollapseAsm(requestBody:CollapseAsm_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CollapseAsm_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CollapseAsm", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CollapseAsm_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method JobScheduling
   Description: Calls jc/jcshded.p and performs the job scheduling without an interface like in Sales Order
   OperationID: JobScheduling
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/JobScheduling_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/JobScheduling_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_JobScheduling(requestBody:JobScheduling_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<JobScheduling_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobScheduling", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as JobScheduling_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method PreCheckNewJobProd
   Description: This method is ran before GetNewJobProd.  It will determine if you can create a
demand link with a Make To Type of Stock.  It will validate that you aren't creating
a Stock demand link with a non-stock part.
   OperationID: PreCheckNewJobProd
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/PreCheckNewJobProd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreCheckNewJobProd_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PreCheckNewJobProd(requestBody:PreCheckNewJobProd_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<PreCheckNewJobProd_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/PreCheckNewJobProd", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as PreCheckNewJobProd_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method PreGetDetails
   Description: This method should be called right before the GetDetails method.  It necessasry,
it'll return a question on resequencing assembly's while getting details.
The answer will be sent as a parameter to the GetDetails method.
This method will also return a BasePartNum and BaseRevisionNum.  If the BasePartNum
isn't null then use this as the default part number for GetDetails.
This is called from GetDetailsEntry
   OperationID: PreGetDetails
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/PreGetDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreGetDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PreGetDetails(requestBody:PreGetDetails_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<PreGetDetails_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/PreGetDetails", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as PreGetDetails_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetMtlConfigPartRevAndConfigType
   OperationID: GetMtlConfigPartRevAndConfigType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetMtlConfigPartRevAndConfigType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMtlConfigPartRevAndConfigType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetMtlConfigPartRevAndConfigType(requestBody:GetMtlConfigPartRevAndConfigType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetMtlConfigPartRevAndConfigType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetMtlConfigPartRevAndConfigType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetMtlConfigPartRevAndConfigType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetMtlConfigPartRev
   OperationID: GetMtlConfigPartRev
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetMtlConfigPartRev_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMtlConfigPartRev_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetMtlConfigPartRev(requestBody:GetMtlConfigPartRev_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetMtlConfigPartRev_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetMtlConfigPartRev", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetMtlConfigPartRev_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ResequenceOperations
   Description: This method will resequence the operations, update the ECORev and JobMtl records.
This method should run from the menu/task "Operation>Resequence" as it was in the old
Vantage 6.1.  When the method is finished running, it will run a GetById based on the
inputted Group ID. This will cause a refreshing of the dataset to reflect all of the changes.
   OperationID: ResequenceOperations
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ResequenceOperations_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ResequenceOperations_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ResequenceOperations(requestBody:ResequenceOperations_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ResequenceOperations_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ResequenceOperations", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ResequenceOperations_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ResequenceMaterials
   Description: This method will resequence the operations, update the JobMtl records.
This method should run from the context menu > Resequence
When the method is finished running, it will run a GetDatasetForTree or GetByID
Depending on what is passed from UI.
   OperationID: ResequenceMaterials
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ResequenceMaterials_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ResequenceMaterials_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ResequenceMaterials(requestBody:ResequenceMaterials_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ResequenceMaterials_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ResequenceMaterials", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ResequenceMaterials_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method PreInsertSubAssembly
   Description: This method should be called right before the InsertMaterial.  It necessasry,
it'll return a warning if there is no source method.
   OperationID: PreInsertSubAssembly
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/PreInsertSubAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreInsertSubAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PreInsertSubAssembly(requestBody:PreInsertSubAssembly_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<PreInsertSubAssembly_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/PreInsertSubAssembly", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as PreInsertSubAssembly_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RemoveFromSchedule
   Description: Removes job from schedule
   OperationID: RemoveFromSchedule
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/RemoveFromSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RemoveFromSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RemoveFromSchedule(requestBody:RemoveFromSchedule_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<RemoveFromSchedule_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/RemoveFromSchedule", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as RemoveFromSchedule_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateInspection
   Description: Method to validate the Inspection control fields. (EQM)
   OperationID: ValidateInspection
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ValidateInspection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInspection_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateInspection(requestBody:ValidateInspection_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ValidateInspection_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ValidateInspection", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ValidateInspection_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateJobNum
   Description: This method will validate that the job number entered not through a search
will be a valid job number for the entered plant.
   OperationID: ValidateJobNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ValidateJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateJobNum(requestBody:ValidateJobNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ValidateJobNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ValidateJobNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ValidateJobNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateJobNumJobType
   Description: Checks if the requested job has the proper job type.
Ex: When calling from MaintJobEntry only Jobs with JobType = "MNT" are allowed.
Ex: When calling from ServiceJobEntry only Jobs with JobType = "SRV" are allowed.
Calling from standard JobEntry, types of "MFG,PRJ,SRV" are allowed.
   OperationID: ValidateJobNumJobType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ValidateJobNumJobType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateJobNumJobType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateJobNumJobType(requestBody:ValidateJobNumJobType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ValidateJobNumJobType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ValidateJobNumJobType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ValidateJobNumJobType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetPlantConfCtrlUse3rdPartySched
   Description: Get the Use3rdPartySched field from PlantConfCtrl table.
   OperationID: GetPlantConfCtrlUse3rdPartySched
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPlantConfCtrlUse3rdPartySched_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetPlantConfCtrlUse3rdPartySched(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetPlantConfCtrlUse3rdPartySched_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetPlantConfCtrlUse3rdPartySched", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetPlantConfCtrlUse3rdPartySched_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateRefDes
   Description: Check the number of reference designators are equal to
the Required Ref Designators defined on JobMtl.
   OperationID: ValidateRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ValidateRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateRefDes(requestBody:ValidateRefDes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ValidateRefDes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ValidateRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ValidateRefDes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method nextMtlRefDesSeq
   Description: Functions nextAsmInspPlanSeq,nextMtlInspPlanSeq, nextMtlRefDesSeq, and nextOprInspPlanSeq are used during
the CollapseAssembly process.
   OperationID: nextMtlRefDesSeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/nextMtlRefDesSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/nextMtlRefDesSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_nextMtlRefDesSeq(requestBody:nextMtlRefDesSeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<nextMtlRefDesSeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/nextMtlRefDesSeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as nextMtlRefDesSeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetIfCurrentSiteHasExternalMES
   Description: Purpose:
Parameters:  none
Notes:
   OperationID: GetIfCurrentSiteHasExternalMES
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetIfCurrentSiteHasExternalMES_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetIfCurrentSiteHasExternalMES(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetIfCurrentSiteHasExternalMES_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetIfCurrentSiteHasExternalMES", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetIfCurrentSiteHasExternalMES_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetJobMtlIsMtlConfigurationOn
   Description: After Material was configured we need to check if was success to display the correct Materials Tree Context Menu option (Configure or Configuration)
   OperationID: GetJobMtlIsMtlConfigurationOn
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetJobMtlIsMtlConfigurationOn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJobMtlIsMtlConfigurationOn_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetJobMtlIsMtlConfigurationOn(requestBody:GetJobMtlIsMtlConfigurationOn_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetJobMtlIsMtlConfigurationOn_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetJobMtlIsMtlConfigurationOn", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetJobMtlIsMtlConfigurationOn_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method setJobMtlIsMtlConfigurationOn
   OperationID: setJobMtlIsMtlConfigurationOn
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/setJobMtlIsMtlConfigurationOn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/setJobMtlIsMtlConfigurationOn_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_setJobMtlIsMtlConfigurationOn(requestBody:setJobMtlIsMtlConfigurationOn_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<setJobMtlIsMtlConfigurationOn_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/setJobMtlIsMtlConfigurationOn", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as setJobMtlIsMtlConfigurationOn_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ConfigurationRefreshQty
   Description: Update PriceList Qty breaks and set new unit price on those
when the Part Number is changed by Document Rule.
   OperationID: ConfigurationRefreshQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ConfigurationRefreshQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConfigurationRefreshQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ConfigurationRefreshQty(requestBody:ConfigurationRefreshQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ConfigurationRefreshQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ConfigurationRefreshQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ConfigurationRefreshQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingNumberOfPieces
   Description: Logic for when the number of pieces is changing
   OperationID: OnChangingNumberOfPieces
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingNumberOfPieces_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingNumberOfPieces_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingNumberOfPieces(requestBody:OnChangingNumberOfPieces_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingNumberOfPieces_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingNumberOfPieces", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingNumberOfPieces_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingSalvageNumberOfPieces
   Description: Logic for when the salvage number of pieces is changing
   OperationID: OnChangingSalvageNumberOfPieces
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingSalvageNumberOfPieces_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingSalvageNumberOfPieces_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingSalvageNumberOfPieces(requestBody:OnChangingSalvageNumberOfPieces_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingSalvageNumberOfPieces_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingSalvageNumberOfPieces", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingSalvageNumberOfPieces_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingJobProdAttributeSetID
   Description: Call this method when the attribute set changes
   OperationID: OnChangingJobProdAttributeSetID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingJobProdAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobProdAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingJobProdAttributeSetID(requestBody:OnChangingJobProdAttributeSetID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingJobProdAttributeSetID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingJobProdAttributeSetID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingJobProdAttributeSetID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingJobProdNumberOfPieces
   Description: Logic for when the number of pieces is changing
   OperationID: OnChangingJobProdNumberOfPieces
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingJobProdNumberOfPieces_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobProdNumberOfPieces_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingJobProdNumberOfPieces(requestBody:OnChangingJobProdNumberOfPieces_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingJobProdNumberOfPieces_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingJobProdNumberOfPieces", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingJobProdNumberOfPieces_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetTreeStructure
   Description: GetDataTreeStructure
   OperationID: GetTreeStructure
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetTreeStructure_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetTreeStructure_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetTreeStructure(requestBody:GetTreeStructure_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetTreeStructure_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetTreeStructure", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetTreeStructure_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewOprByStageNumber
   OperationID: GetNewOprByStageNumber
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewOprByStageNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOprByStageNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewOprByStageNumber(requestBody:GetNewOprByStageNumber_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewOprByStageNumber_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewOprByStageNumber", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewOprByStageNumber_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingSalvageAttributeSetID
   Description: Logic for when the salvage attribute set changes
   OperationID: OnChangingSalvageAttributeSetID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingSalvageAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingSalvageAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingSalvageAttributeSetID(requestBody:OnChangingSalvageAttributeSetID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingSalvageAttributeSetID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingSalvageAttributeSetID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingSalvageAttributeSetID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingSalvageRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingSalvageRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingSalvageRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingSalvageRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingSalvageRevisionNum(requestBody:OnChangingSalvageRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingSalvageRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingSalvageRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingSalvageRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingJobOperRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingJobOperRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingJobOperRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobOperRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingJobOperRevisionNum(requestBody:OnChangingJobOperRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingJobOperRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingJobOperRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingJobOperRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobHead
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobHead
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobHead(requestBody:GetNewJobHead_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobHead_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobHead", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobHead_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobHeadAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobHeadAttch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobHeadAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobHeadAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobHeadAttch(requestBody:GetNewJobHeadAttch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobHeadAttch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobHeadAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobHeadAttch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAsmbl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmbl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmbl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmbl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAsmbl(requestBody:GetNewJobAsmbl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAsmbl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAsmbl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAsmbl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAsmblAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblAttch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAsmblAttch(requestBody:GetNewJobAsmblAttch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAsmblAttch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAsmblAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAsmblAttch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobAsmblInsp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblInsp
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblInsp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblInsp_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobAsmblInsp(requestBody:GetNewJobAsmblInsp_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobAsmblInsp_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobAsmblInsp", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobAsmblInsp_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtl(requestBody:GetNewJobMtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtlAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlAttch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtlAttch(requestBody:GetNewJobMtlAttch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtlAttch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtlAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtlAttch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewJobMtlInsp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlInsp
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlInsp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlInsp_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewJobMtlInsp(requestBody:GetNewJobMtlInsp_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetNewJobMtlInsp_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetNewJobMtlInsp", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetNewJobMtlInsp_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetCodeDescList
   OperationID: GetCodeDescList
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetCodeDescList(requestBody:GetCodeDescList_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetCodeDescList_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetCodeDescList", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetCodeDescList_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddOperation
   Description: THIS METHOD NEEDS TO BE PUBLIC - CALLED FROM bo/Project/Project.p
   OperationID: AddOperation
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/AddOperation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddOperation_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddOperation(requestBody:AddOperation_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<AddOperation_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/AddOperation", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as AddOperation_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddRefDesRange
   Description: Creates new JobMtlRefDes records based on the JobMtl dataset fields.
   OperationID: AddRefDesRange
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/AddRefDesRange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddRefDesRange_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddRefDesRange(requestBody:AddRefDesRange_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<AddRefDesRange_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/AddRefDesRange", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as AddRefDesRange_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AppendDetails
   OperationID: AppendDetails
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/AppendDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AppendDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AppendDetails(requestBody:AppendDetails_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<AppendDetails_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/AppendDetails", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as AppendDetails_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetJobListForSerialTrackedParts
   Description: Returns a list of jobs for serially tracked parts
   OperationID: GetJobListForSerialTrackedParts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/GetJobListForSerialTrackedParts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJobListForSerialTrackedParts_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetJobListForSerialTrackedParts(requestBody:GetJobListForSerialTrackedParts_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<GetJobListForSerialTrackedParts_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/GetJobListForSerialTrackedParts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as GetJobListForSerialTrackedParts_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildAppendDetails
   Description: This method returns the information that can be appened for approval
   OperationID: BuildAppendDetails
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/BuildAppendDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildAppendDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildAppendDetails(requestBody:BuildAppendDetails_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<BuildAppendDetails_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/BuildAppendDetails", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as BuildAppendDetails_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildWhseLinkList
   Description: This methods builds a list of linked warehouses for the jobprod records.
   OperationID: BuildWhseLinkList
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/BuildWhseLinkList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildWhseLinkList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildWhseLinkList(requestBody:BuildWhseLinkList_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<BuildWhseLinkList_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/BuildWhseLinkList", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as BuildWhseLinkList_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CopyValuesOrderJob
   Description: If the job is linked to an order with a configuration, and the AllowReconfig is true
for the JobHead target entity, copy the values from the order to the job if the user
is reconfiguring.
   OperationID: CopyValuesOrderJob
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CopyValuesOrderJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CopyValuesOrderJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CopyValuesOrderJob(requestBody:CopyValuesOrderJob_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CopyValuesOrderJob_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CopyValuesOrderJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CopyValuesOrderJob_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CalcJobMtlEstMtlBurUnitCost
   Description: This method updates the calculation for the Estimated Material Burden Unit Cost,
(JobMtl.EstMtlBurUnitCost) field.
   OperationID: CalcJobMtlEstMtlBurUnitCost
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CalcJobMtlEstMtlBurUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalcJobMtlEstMtlBurUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CalcJobMtlEstMtlBurUnitCost(requestBody:CalcJobMtlEstMtlBurUnitCost_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CalcJobMtlEstMtlBurUnitCost_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CalcJobMtlEstMtlBurUnitCost", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CalcJobMtlEstMtlBurUnitCost_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeEquipID
   Description: This method should be invoked when the Equip ID changes.
Validates the EQUIPID and refreshes linked fields.
   OperationID: ChangeEquipID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeEquipID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeEquipID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeEquipID(requestBody:ChangeEquipID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeEquipID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeEquipID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeEquipID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeIssueTopics
   Description: This method should be invoked when the IssueTopics changes.
Validates and sets the individual IssueTopic fields.
   OperationID: ChangeIssueTopics
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeIssueTopics_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeIssueTopics_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeIssueTopics(requestBody:ChangeIssueTopics_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeIssueTopics_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeIssueTopics", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeIssueTopics_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblDirect
   Description: This method is called when the user has changed the JobAsmbl.Direct field.
This methods is currently not working.  This method needs to check for a remote
warehouse, if errors then set the JobAsmbl.Direct flag to true and then set the warehouse.
   OperationID: ChangeJobAsmblDirect
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblDirect_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblDirect_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblDirect(requestBody:ChangeJobAsmblDirect_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblDirect_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblDirect", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblDirect_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblEstSplitCosts
   Description: This method calculates the Estimated Unit Cost and Material Burden Unit Cost.
This method is called when the user has changed one of the Unit Cost Breakdown
fields: JobAsmbl.EstMtlUnitCost/EstLbrUnitCost/EstBurUnitCost/EstSubUnitCost.
   OperationID: ChangeJobAsmblEstSplitCosts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblEstSplitCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblEstSplitCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblEstSplitCosts(requestBody:ChangeJobAsmblEstSplitCosts_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblEstSplitCosts_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblEstSplitCosts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblEstSplitCosts_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblEstUnitCost
   Description: This method calculates the Estimated Material Burden Unit Cost.
This method is called when the user has changed the JobAsmbl.EstUnitCost field.
   OperationID: ChangeJobAsmblEstUnitCost
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblEstUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblEstUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblEstUnitCost(requestBody:ChangeJobAsmblEstUnitCost_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblEstUnitCost_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblEstUnitCost", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblEstUnitCost_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblMtlBurRate
   Description: This methods updates the JobAsmbl Material Burden Rate.
This method should run when the JobAsmbl.MtlBurRate changes.
   OperationID: ChangeJobAsmblMtlBurRate
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblMtlBurRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblMtlBurRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblMtlBurRate(requestBody:ChangeJobAsmblMtlBurRate_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblMtlBurRate_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblMtlBurRate", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblMtlBurRate_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblOpr
   Description: This methods updates the JobAsmbl Related Operation Description.
This method should run when the JobAsmbl.RelatedOperation field changes.
   OperationID: ChangeJobAsmblOpr
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblOpr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblOpr_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblOpr(requestBody:ChangeJobAsmblOpr_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblOpr_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblOpr", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblOpr_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblOverRunQty
   Description: This methods updates the JobAsmbl Required Quantity.
This method should run when the JobAsmbl.OverRunQty field changes.
   OperationID: ChangeJobAsmblOverRunQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblOverRunQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblOverRunQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblOverRunQty(requestBody:ChangeJobAsmblOverRunQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblOverRunQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblOverRunQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblOverRunQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblParent
   Description: This method validates the new Parent field and populates defaults assoicated witht the Parent.
This method should run when the JobAsmbl.Parent field changes.
   OperationID: ChangeJobAsmblParent
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblParent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblParent_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblParent(requestBody:ChangeJobAsmblParent_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblParent_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblParent", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblParent_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateLinkToContractData
   Description: Validate Parts allowed for Planning Contracts.
   OperationID: ValidateLinkToContractData
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ValidateLinkToContractData_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateLinkToContractData_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateLinkToContractData(requestBody:ValidateLinkToContractData_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ValidateLinkToContractData_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ValidateLinkToContractData", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ValidateLinkToContractData_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblPartNum
   Description: This method validates the JobAsmbl.PartNum and defaults fields associated with the partnum.
This method should run when the JobAsmbl.PartNum field changes.
   OperationID: ChangeJobAsmblPartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblPartNum(requestBody:ChangeJobAsmblPartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblPartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblPartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblPartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblQtyPer
   Description: This methods updates the JobAsmbl Required Quantity.
This method should run when the JobAsmbl.QtyPer field changes.
   OperationID: ChangeJobAsmblQtyPer
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblQtyPer(requestBody:ChangeJobAsmblQtyPer_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblQtyPer_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblQtyPer", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblQtyPer_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblReassignSNAsm
   Description: Checks if there is any other JobMtl or JobAsmbl records with ReassignSNAsm flag before enabling
this flag for a specific JobAsmbl.
   OperationID: ChangeJobAsmblReassignSNAsm
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblReassignSNAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblReassignSNAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblReassignSNAsm(requestBody:ChangeJobAsmblReassignSNAsm_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblReassignSNAsm_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblReassignSNAsm", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblReassignSNAsm_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblRevisionNum
   Description: This methods updates the JobAsmbl Drawing Number and creates drawing records.
This method should run when the JobAsmbl.OverRunQty field changes.
   OperationID: ChangeJobAsmblRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblRevisionNum(requestBody:ChangeJobAsmblRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblValRefDes
   Description: Verify that there are no other JobMtlRefDes records in the assembly having
the same RefDes value if the JobAsmbl.ValRefDes = true. This method should
run before changing the JobAsmbl.ValRefDes.
   OperationID: ChangeJobAsmblValRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblValRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblValRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblValRefDes(requestBody:ChangeJobAsmblValRefDes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblValRefDes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblValRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblValRefDes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblWarehouseCode
   Description: This methods updates the JobAsmbl Available Quantity.
This method should run when the JobAsmbl.WarehouseCode field changes.
   OperationID: ChangeJobAsmblWarehouseCode
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblWarehouseCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblWarehouseCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblWarehouseCode(requestBody:ChangeJobAsmblWarehouseCode_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblWarehouseCode_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblWarehouseCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblWarehouseCode_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblAttributeSetID
   Description: This methods updates the JobAsmbl Available Quantity.
This method should run when the JobAsmbl.AttributeSetID field changes.
   OperationID: ChangeJobAsmblAttributeSetID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblAttributeSetID(requestBody:ChangeJobAsmblAttributeSetID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblAttributeSetID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblAttributeSetID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblAttributeSetID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmReqRefDes
   Description: This methods assigns JobAsmbl.RDEndNum field when JobAsmbl.ReqRefDes changes.
This method should run when the JobAsmbl.ReqRefDes changes.
   OperationID: ChangeJobAsmReqRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmReqRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmReqRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmReqRefDes(requestBody:ChangeJobAsmReqRefDes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmReqRefDes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmReqRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmReqRefDes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmRestriction
   Description: This methods assigns associated fields when JobAsmblRestriction.RestrictionTypeID changes.
   OperationID: ChangeJobAsmRestriction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmRestriction(requestBody:ChangeJobAsmRestriction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmRestriction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmRestriction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmRestriction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmRestrictManual
   Description: Called when the user changes the Manual field at the Job Assembly Restriction.
   OperationID: ChangeJobAsmRestrictManual
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmRestrictManual_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmRestrictManual_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmRestrictManual(requestBody:ChangeJobAsmRestrictManual_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmRestrictManual_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmRestrictManual", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmRestrictManual_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmSubstance
   Description: This methods assigns associated fields when JobAsmblRestrictSubst.SubstanceID changes.
   OperationID: ChangeJobAsmSubstance
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmSubstance(requestBody:ChangeJobAsmSubstance_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmSubstance_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmSubstance", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmSubstance_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobHeadContractID
   Description: This method should run on JobHead.ContractID changing.
   OperationID: CheckJobHeadContractID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobHeadContractID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobHeadContractID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobHeadContractID(requestBody:CheckJobHeadContractID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobHeadContractID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobHeadContractID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobHeadContractID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadJobEngineered
   OperationID: ChangeJobHeadJobEngineered
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadJobEngineered_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadJobEngineered_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadJobEngineered(requestBody:ChangeJobHeadJobEngineered_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadJobEngineered_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadJobEngineered", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadJobEngineered_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadJobReleased
   Description: This method potentially updates the JobHead.JobEngineered field and the ttJobHead.EnableJobFirm
This method should run when the JobHead.JobReleased field changes.
   OperationID: ChangeJobHeadJobReleased
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadJobReleased_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadJobReleased_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadJobReleased(requestBody:ChangeJobHeadJobReleased_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadJobReleased_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadJobReleased", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadJobReleased_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadPartNum
   Description: This method validates the JobHead.PartNum and defaults fields associated with the partnum.
This method should run when the JobHead.PartNum field changes.
   OperationID: ChangeJobHeadPartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadPartNum(requestBody:ChangeJobHeadPartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadPartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadPartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadPartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadPersonID
   Description: This method should run when the JobHead.PersonID field changes.
   OperationID: ChangeJobHeadPersonID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadPersonID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadPersonID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadPersonID(requestBody:ChangeJobHeadPersonID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadPersonID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadPersonID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadPersonID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadPhaseID
   Description: This method updates the JobHead Required Due Date field
This method should run when the JobHead.PhaseID field changes.
   OperationID: ChangeJobHeadPhaseID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadPhaseID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadPhaseID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadPhaseID(requestBody:ChangeJobHeadPhaseID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadPhaseID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadPhaseID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadPhaseID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadProdCode
   Description: This method should run when the JobHead.ProdCode field changes.
   OperationID: ChangeJobHeadProdCode
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadProdCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadProdCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadProdCode(requestBody:ChangeJobHeadProdCode_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadProdCode_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadProdCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadProdCode_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadProdTeamID
   Description: This method should run when the JobHead.ProdTeamID field changes.
   OperationID: ChangeJobHeadProdTeamID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadProdTeamID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadProdTeamID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadProdTeamID(requestBody:ChangeJobHeadProdTeamID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadProdTeamID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadProdTeamID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadProdTeamID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckJobHeadProjectID
   Description: This method should run on changing the JobHead.ProjectID.
   OperationID: CheckJobHeadProjectID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/CheckJobHeadProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobHeadProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckJobHeadProjectID(requestBody:CheckJobHeadProjectID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<CheckJobHeadProjectID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/CheckJobHeadProjectID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as CheckJobHeadProjectID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadProjectID
   Description: This method should run after the JobHead.ProjectID field changes.
   OperationID: ChangeJobHeadProjectID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadProjectID(requestBody:ChangeJobHeadProjectID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadProjectID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadProjectID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadProjectID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobHeadRevisionNum
   Description: This method updates the JobHead Drawing number and creates drawing records.
This method should run when the JobHead.RevisionNum field changes.
   OperationID: ChangeJobHeadRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobHeadRevisionNum(requestBody:ChangeJobHeadRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobHeadRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobHeadRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobHeadRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlBackflush
   Description: This method updates  fields associated with the JobMtl.Backflush field
This method should run when the JobMtl.Backflush field changes.
   OperationID: ChangeJobMtlBackflush
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBackflush_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBackflush_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlBackflush(requestBody:ChangeJobMtlBackflush_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlBackflush_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlBackflush", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlBackflush_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlBillable
   Description: This method updates the JobMtl Unit Price.
This method should run when the JobMtl.Billable field changes.
   OperationID: ChangeJobMtlBillable
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBillable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBillable_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlBillable(requestBody:ChangeJobMtlBillable_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlBillable_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlBillable", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlBillable_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlBurUnitCost
   Description: This method updates the JobMtl.MtlBurRate
This method should run when the JobMtl.EstMtlBurUnitCost field changes.
   OperationID: ChangeJobMtlBurUnitCost
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBurUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBurUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlBurUnitCost(requestBody:ChangeJobMtlBurUnitCost_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlBurUnitCost_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlBurUnitCost", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlBurUnitCost_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlBuyIt
   Description: This method updates numerous fields associated with the JobMtl.BuyIt field
This method should run when the JobMtl.BuyIt field changes.
   OperationID: ChangeJobMtlBuyIt
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBuyIt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBuyIt_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlBuyIt(requestBody:ChangeJobMtlBuyIt_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlBuyIt_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlBuyIt", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlBuyIt_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlCurrencySwitch
   Description: This method changes the display unit prices based on the flipping of the JobMtl.CurrencySwitch field
This method should run when the JobMtl.CurrencySwitch external field changes.
   OperationID: ChangeJobMtlCurrencySwitch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlCurrencySwitch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlCurrencySwitch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlCurrencySwitch(requestBody:ChangeJobMtlCurrencySwitch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlCurrencySwitch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlCurrencySwitch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlCurrencySwitch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlDirect
   Description: This method updates fields associated with the JobMtl direct flag.
This method should run when the JobMtl.Direct field changes.
   OperationID: ChangeJobMtlDirect
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlDirect_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlDirect_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlDirect(requestBody:ChangeJobMtlDirect_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlDirect_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlDirect", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlDirect_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlDisplayUnitPrice
   Description: This method calculates the db unit price fields when the external display unit price changes.
This method should run when the JobMtl.DisplayUnitPrice field changes.
   OperationID: ChangeJobMtlDisplayUnitPrice
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlDisplayUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlDisplayUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlDisplayUnitPrice(requestBody:ChangeJobMtlDisplayUnitPrice_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlDisplayUnitPrice_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlDisplayUnitPrice", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlDisplayUnitPrice_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlEstSalSplitCosts
   Description: This method calculates the Estimated Salvage Unit Credit and Salvage Material
Burden Unit Credit.
This method is called when the user has changed one of the Salvage Unit Credit
Breakdown fields: JobMtl.SalvageEstMtlUnitCredit/SalvageEstLbrUnitCredit/
SalvageEstBurUnitCredit/SalvageEstSubUnitCredit.
   OperationID: ChangeJobMtlEstSalSplitCosts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstSalSplitCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstSalSplitCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlEstSalSplitCosts(requestBody:ChangeJobMtlEstSalSplitCosts_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlEstSalSplitCosts_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlEstSalSplitCosts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlEstSalSplitCosts_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlEstScrap
   Description: This method updates the JobMtl Required Quantity and price breaks
This method should run when the JobMtl.EstScrap field changes.
   OperationID: ChangeJobMtlEstScrap
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstScrap_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstScrap_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlEstScrap(requestBody:ChangeJobMtlEstScrap_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlEstScrap_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlEstScrap", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlEstScrap_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlEstScrapType
   Description: This method updates the JobMtl Required Quantity and price breaks
This method should run when the JobMtl.EstScrapType field changes.
   OperationID: ChangeJobMtlEstScrapType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstScrapType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstScrapType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlEstScrapType(requestBody:ChangeJobMtlEstScrapType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlEstScrapType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlEstScrapType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlEstScrapType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlEstSplitCosts
   Description: This method calculates the Estimated Unit Cost and Material Burden Unit Cost.
This method is called when the user has changed one of the Unit Cost Breakdown
fields: JobMtl.EstMtlUnitCost/EstLbrUnitCost/EstBurUnitCost/EstSubUnitCost.
   OperationID: ChangeJobMtlEstSplitCosts
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstSplitCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstSplitCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlEstSplitCosts(requestBody:ChangeJobMtlEstSplitCosts_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlEstSplitCosts_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlEstSplitCosts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlEstSplitCosts_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlFixedQty
   Description: This method updates the JobMtl Required Quantity and price breaks
and if FixedQty is true then JobMtl.EstScrap = 0
This method should run when the JobMtl.FixedQty field changes.
   OperationID: ChangeJobMtlFixedQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlFixedQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlFixedQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlFixedQty(requestBody:ChangeJobMtlFixedQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlFixedQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlFixedQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlFixedQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlIUM
   Description: procedure for changing JobMtl.IUM field
   OperationID: ChangeJobMtlIUM
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlIUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlIUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlIUM(requestBody:ChangeJobMtlIUM_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlIUM_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlIUM", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlIUM_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlMiscCharge
   Description: This method validates if transaction exists and updates fields based on value of Misc. Charge flag.
This method should run when the JobMtl.MiscCharge field changes.
   OperationID: ChangeJobMtlMiscCharge
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlMiscCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlMiscCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlMiscCharge(requestBody:ChangeJobMtlMiscCharge_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlMiscCharge_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlMiscCharge", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlMiscCharge_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlMtlBurRate
   Description: This method updates the JobMtl.EstMtlBurUnitCost
This method should run when the JobMtl.MtlBurRate field changes.
   OperationID: ChangeJobMtlMtlBurRate
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlMtlBurRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlMtlBurRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlMtlBurRate(requestBody:ChangeJobMtlMtlBurRate_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlMtlBurRate_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlMtlBurRate", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlMtlBurRate_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlPartNum
   Description: This method validates the JobMtl.PartNum and defaults fields associated with the partnum.
This method should run when the JobMtl.PartNum field changes.
   OperationID: ChangeJobMtlPartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlPartNum(requestBody:ChangeJobMtlPartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlPartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlPartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlPartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingMtlRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingMtlRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingMtlRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingMtlRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingMtlRevisionNum(requestBody:OnChangingMtlRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingMtlRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingMtlRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingMtlRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangingJobPartRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingJobPartRevisionNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/OnChangingJobPartRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobPartRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangingJobPartRevisionNum(requestBody:OnChangingJobPartRevisionNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<OnChangingJobPartRevisionNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/OnChangingJobPartRevisionNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as OnChangingJobPartRevisionNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateJobDuomAttributes
   Description: If Advance Unit of Measure licensed review all parts (From Material, subcontract, subassemblies and demand)
For each part that is marked as track Inventory Attributes, validates that the attribute set is assigned and valid.
   OperationID: ValidateJobDuomAttributes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ValidateJobDuomAttributes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateJobDuomAttributes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateJobDuomAttributes(requestBody:ValidateJobDuomAttributes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ValidateJobDuomAttributes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ValidateJobDuomAttributes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ValidateJobDuomAttributes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlPlant
   Description: This method should run when the JobMtl.Plant field changes.
This method determines the default JobMtl.WarehouseCode associated with the new JobMtl.Plant.
   OperationID: ChangeJobMtlPlant
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPlant_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPlant_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlPlant(requestBody:ChangeJobMtlPlant_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlPlant_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlPlant", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlPlant_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlPricePerCode
   Description: This method recalculates the JobMtl Display Extended Price
This method should run when the JobMtl.PricePerCode field changes.
   OperationID: ChangeJobMtlPricePerCode
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPricePerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPricePerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlPricePerCode(requestBody:ChangeJobMtlPricePerCode_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlPricePerCode_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlPricePerCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlPricePerCode_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlPurPoint
   Description: This method runs vendor price break logic and sets RcvInspectionReq when JobMtl.PurPoint changes
This method should run when the JobMtl.PurPoint field changes.
   OperationID: ChangeJobMtlPurPoint
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPurPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPurPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlPurPoint(requestBody:ChangeJobMtlPurPoint_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlPurPoint_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlPurPoint", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlPurPoint_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlQtyPer
   Description: This method calculates the JobMtl Required Quantity when the JobMtl Quantity Per changes.
This method should run when the JobMtl.QtyPer field changes.
   OperationID: ChangeJobMtlQtyPer
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlQtyPer(requestBody:ChangeJobMtlQtyPer_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlQtyPer_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlQtyPer", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlQtyPer_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlSalvageQtyPer
   Description: This method updates the JobMtl Salvage Number of Pieces when the
JobMtl Salvage Quantity Per changes.
This method should run when the JobMtl.QtyPer field changes.
   OperationID: ChangeJobMtlSalvageQtyPer
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlSalvageQtyPer(requestBody:ChangeJobMtlSalvageQtyPer_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlSalvageQtyPer_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlSalvageQtyPer", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlSalvageQtyPer_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlSalvageUM
   Description: This method updates the JobMtl Salvage Number of Pieces when the
JobMtl Salvage UOM changes.
This method should run when the JobMtl.QtyPer field changes.
   OperationID: ChangeJobMtlSalvageUM
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlSalvageUM(requestBody:ChangeJobMtlSalvageUM_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlSalvageUM_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlSalvageUM", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlSalvageUM_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlRcvInspectionReq
   Description: This method checks the vendor and partclass to see if inspection is required
This method should run when the JobMtl.RcvInspectionReq field changes.
   OperationID: ChangeJobMtlRcvInspectionReq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlRcvInspectionReq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlRcvInspectionReq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlRcvInspectionReq(requestBody:ChangeJobMtlRcvInspectionReq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlRcvInspectionReq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlRcvInspectionReq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlRcvInspectionReq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlReassignSNAsm
   Description: Checks if there is any other JobMtl or JobAsmbl records with ReassignSNAsm flag before enabling
this flag for a specific JobMtl.
   OperationID: ChangeJobMtlReassignSNAsm
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlReassignSNAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlReassignSNAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlReassignSNAsm(requestBody:ChangeJobMtlReassignSNAsm_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlReassignSNAsm_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlReassignSNAsm", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlReassignSNAsm_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlRelatedOperation
   Description: This method validates the JobMtl Related Operation field, sets the Estimated Scrap,
and calculates the Required Quantity.
This method should run when the JobMtl.RelatedOperation field changes.
   OperationID: ChangeJobMtlRelatedOperation
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlRelatedOperation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlRelatedOperation_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlRelatedOperation(requestBody:ChangeJobMtlRelatedOperation_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlRelatedOperation_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlRelatedOperation", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlRelatedOperation_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlLinkToContract
   Description: This method should run when the JobMtl.LinkToContract changes.
   OperationID: ChangeJobMtlLinkToContract
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlLinkToContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlLinkToContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlLinkToContract(requestBody:ChangeJobMtlLinkToContract_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlLinkToContract_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlLinkToContract", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlLinkToContract_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobAsmblLinkToContract
   Description: This method should run when the JobAsmbl.LinkToContract changes.
   OperationID: ChangeJobAsmblLinkToContract
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblLinkToContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblLinkToContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobAsmblLinkToContract(requestBody:ChangeJobAsmblLinkToContract_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobAsmblLinkToContract_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobAsmblLinkToContract", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobAsmblLinkToContract_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlReqRefDes
   Description: This methods assigns JobMtl.RDEndNum field when JobMtl.ReqRefDes changes.
This method should run when the JobMtl.ReqRefDes changes.
   OperationID: ChangeJobMtlReqRefDes
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlReqRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlReqRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlReqRefDes(requestBody:ChangeJobMtlReqRefDes_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlReqRefDes_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlReqRefDes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlReqRefDes_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlRestriction
   Description: This methods assigns associated fields when JobMtlRestriction.RestrictionTypeID changes.
   OperationID: ChangeJobMtlRestriction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlRestriction(requestBody:ChangeJobMtlRestriction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlRestriction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlRestriction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlRestriction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlSalvageMtlBurRate
   Description: This methods updates the JobMtl Salvage Est Material Burden Unit Credit.
This method should run when the JobMtl.SalvageMtlBurRate changes.
   OperationID: ChangeJobMtlSalvageMtlBurRate
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageMtlBurRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageMtlBurRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlSalvageMtlBurRate(requestBody:ChangeJobMtlSalvageMtlBurRate_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlSalvageMtlBurRate_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlSalvageMtlBurRate", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlSalvageMtlBurRate_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlSalvagePartNum
   Description: This methods assigns associated fields when JobMtl.SalvagePartNum changes.
This method should run when the JobMtl.SalvagePartNum changes.
   OperationID: ChangeJobMtlSalvagePartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvagePartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvagePartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlSalvagePartNum(requestBody:ChangeJobMtlSalvagePartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlSalvagePartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlSalvagePartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlSalvagePartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlSalvageUnitCredit
   Description: This method calculates the Salvage Estimated Material Burden Unit Credit.
This method is called when the user has changed the JobMtl.SalvageUnitCredit field.
   OperationID: ChangeJobMtlSalvageUnitCredit
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageUnitCredit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageUnitCredit_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlSalvageUnitCredit(requestBody:ChangeJobMtlSalvageUnitCredit_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlSalvageUnitCredit_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlSalvageUnitCredit", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlSalvageUnitCredit_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlSubstance
   Description: This methods assigns associated fields when JobMtlRestrictSubst.SubstanceID changes.
   OperationID: ChangeJobMtlSubstance
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlSubstance(requestBody:ChangeJobMtlSubstance_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlSubstance_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlSubstance", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlSubstance_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ClearPurchasingData
   Description: Clears data in Job>Assemblies>Materials Purchasing section.
   OperationID: ClearPurchasingData
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ClearPurchasingData_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ClearPurchasingData_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ClearPurchasingData(requestBody:ClearPurchasingData_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ClearPurchasingData_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ClearPurchasingData", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ClearPurchasingData_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobMtlVendorNumVendorID
   Description: This method runs vendor price break logic and sets RcvInspectionReq when JobMtl.VendorNumVendorID changes
and validates the jobmtl.vendornumvendorid and assigns the associated fields.
This method should run when the JobMtl.VendorNumVendorID field changes.
   OperationID: ChangeJobMtlVendorNumVendorID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlVendorNumVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlVendorNumVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobMtlVendorNumVendorID(requestBody:ChangeJobMtlVendorNumVendorID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobMtlVendorNumVendorID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobMtlVendorNumVendorID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobMtlVendorNumVendorID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlCapability
   Description: Method to call when changing the Capability ID.  This method will update JobOpDtl
to see if the labor and burden rates need to be reset.  Blank is a valid entry for
Capability ID.
   OperationID: ChangeJobOpDtlCapability
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlCapability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlCapability_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlCapability(requestBody:ChangeJobOpDtlCapability_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlCapability_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlCapability", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlCapability_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlEstSetHoursPerMch
   Description: This method recalculates the Estimated Setup Hours when Estimated Setup Hours Per Machine changes.
This method should run when the JobOpDtl.EstSetHoursPerMch field changes.
   OperationID: ChangeJobOpDtlEstSetHoursPerMch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlEstSetHoursPerMch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlEstSetHoursPerMch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlEstSetHoursPerMch(requestBody:ChangeJobOpDtlEstSetHoursPerMch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlEstSetHoursPerMch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlEstSetHoursPerMch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlEstSetHoursPerMch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlOpsPerPart
   Description: This method calculates Estimated Production Hours when the OpsPerPart field changes.
This method should run when the JobOpDtl.OpsPerPart field changes.
   OperationID: ChangeJobOpDtlOpsPerPart
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlOpsPerPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlOpsPerPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlOpsPerPart(requestBody:ChangeJobOpDtlOpsPerPart_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlOpsPerPart_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlOpsPerPart", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlOpsPerPart_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlOverrideRates
   Description: Method to call when changing the Override Rates Flag.  This method will update
JobOpDtl with the default labor and burden rates from the appropriate resource
or resource group if the JobOpDtl.OverrideRates is set to false.
   OperationID: ChangeJobOpDtlOverrideRates
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlOverrideRates_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlOverrideRates_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlOverrideRates(requestBody:ChangeJobOpDtlOverrideRates_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlOverrideRates_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlOverrideRates", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlOverrideRates_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlProdStandard
   Description: This method recalculates the Estimated Production Hours when ProdStandard changes.
This method should run when the JobOpDtl.ProdStandard field changes.
   OperationID: ChangeJobOpDtlProdStandard
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlProdStandard_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlProdStandard_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlProdStandard(requestBody:ChangeJobOpDtlProdStandard_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlProdStandard_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlProdStandard", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlProdStandard_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlQtyPerCycle
   OperationID: ChangeJobOpDtlQtyPerCycle
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlQtyPerCycle_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlQtyPerCycle_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlQtyPerCycle(requestBody:ChangeJobOpDtlQtyPerCycle_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlQtyPerCycle_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlQtyPerCycle", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlQtyPerCycle_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlResourceGrpID
   Description: Method to call when changing the Resource Group ID.  This method will update JobOpDtl
with the default labor and burden rates from the new resource group.  Blank is a valid
entry for Resource Group ID.
   OperationID: ChangeJobOpDtlResourceGrpID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlResourceGrpID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlResourceGrpID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlResourceGrpID(requestBody:ChangeJobOpDtlResourceGrpID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlResourceGrpID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlResourceGrpID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlResourceGrpID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlResourceID
   Description: Method to call when changing the Resource ID.  This method will update JobOpDtl
with the default labor and burden rates from the new resource.  Blank is a valid
entry for Resource ID.
   OperationID: ChangeJobOpDtlResourceID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlResourceID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlResourceID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlResourceID(requestBody:ChangeJobOpDtlResourceID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlResourceID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlResourceID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlResourceID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlStdBasis
   Description: This method recalculates the Estimated Production Hours when StdBasis changes.
This method should run when the JobOpDtl.StdBasis field changes.
   OperationID: ChangeJobOpDtlStdBasis
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlStdBasis_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlStdBasis_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlStdBasis(requestBody:ChangeJobOpDtlStdBasis_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlStdBasis_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlStdBasis", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlStdBasis_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOpDtlStdFormat
   Description: This method recalculates the Estimated Production Hours when StdFormat changes.
This method should run when the JobOpDtl.StdFormat field changes.
   OperationID: ChangeJobOpDtlStdFormat
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlStdFormat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlStdFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOpDtlStdFormat(requestBody:ChangeJobOpDtlStdFormat_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOpDtlStdFormat_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOpDtlStdFormat", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOpDtlStdFormat_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperAutoReceive
   OperationID: ChangeJobOperAutoReceive
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperAutoReceive_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperAutoReceive_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperAutoReceive(requestBody:ChangeJobOperAutoReceive_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperAutoReceive_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperAutoReceive", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperAutoReceive_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperBillable
   Description: This method calculates the Labor Rate and Unit Price when the Billable flag changes.
This method should run when the JobOper.Billable field changes.
   OperationID: ChangeJobOperBillable
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperBillable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperBillable_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperBillable(requestBody:ChangeJobOperBillable_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperBillable_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperBillable", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperBillable_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperCurrencySwitch
   Description: This method changes the display unit prices based on the flipping of the JobOPer.CurrencySwitch field
This method should run when the JobOper.CurrencySwitch external field changes.
   OperationID: ChangeJobOperCurrencySwitch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperCurrencySwitch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperCurrencySwitch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperCurrencySwitch(requestBody:ChangeJobOperCurrencySwitch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperCurrencySwitch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperCurrencySwitch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperCurrencySwitch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperDisplayUnitPrice
   Description: This method runs logic to calculate the doc price fields and the display extended price.
This method should run when the JobOper.UnitPrice field changes.
   OperationID: ChangeJobOperDisplayUnitPrice
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperDisplayUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperDisplayUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperDisplayUnitPrice(requestBody:ChangeJobOperDisplayUnitPrice_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperDisplayUnitPrice_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperDisplayUnitPrice", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperDisplayUnitPrice_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperDocUnitPrice
   Description: This method calculates Unit Price and Billable Unit Price when Doc Unit Price changes.
This method should run when the JobOper.DocUnitPrice field changes.
   OperationID: ChangeJobOperDocUnitPrice
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperDocUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperDocUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperDocUnitPrice(requestBody:ChangeJobOperDocUnitPrice_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperDocUnitPrice_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperDocUnitPrice", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperDocUnitPrice_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperEstLabHours
   Description: This method updates the Estimated Production Hours, rate fields, and Production Standard along with others.
This method should run when the JobOper.EstLabHours field changes.
   OperationID: ChangeJobOperEstLabHours
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstLabHours_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstLabHours_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperEstLabHours(requestBody:ChangeJobOperEstLabHours_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperEstLabHours_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperEstLabHours", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperEstLabHours_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperEstScrap
   Description: This method calculates Production and Scrap Quantities and estimate producition hours.
This method should run when the JobOper.EstScrap field changes.
   OperationID: ChangeJobOperEstScrap
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstScrap_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstScrap_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperEstScrap(requestBody:ChangeJobOperEstScrap_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperEstScrap_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperEstScrap", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperEstScrap_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperEstScrapType
   Description: This method calculates Production and Scrap Quantities and estimate producition hours.
This method should run when the JobOper.EstScrapType field changes.
   OperationID: ChangeJobOperEstScrapType
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstScrapType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstScrapType_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperEstScrapType(requestBody:ChangeJobOperEstScrapType_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperEstScrapType_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperEstScrapType", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperEstScrapType_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperEstSetHoursPerMch
   Description: This method calculates the estimated labor hours when Job Type = "SRV" and
update the display fields for service amount and labor amount.
This method should run when the JobOper.EstSetHoursPerMch field changes.
   OperationID: ChangeJobOperEstSetHoursPerMch
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstSetHoursPerMch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstSetHoursPerMch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperEstSetHoursPerMch(requestBody:ChangeJobOperEstSetHoursPerMch_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperEstSetHoursPerMch_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperEstSetHoursPerMch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperEstSetHoursPerMch_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperIUM
   Description: procedure for changing JobOper.IUM field
   OperationID: ChangeJobOperIUM
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperIUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperIUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperIUM(requestBody:ChangeJobOperIUM_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperIUM_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperIUM", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperIUM_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperLaborEntryMethod
   OperationID: ChangeJobOperLaborEntryMethod
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperLaborEntryMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperLaborEntryMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperLaborEntryMethod(requestBody:ChangeJobOperLaborEntryMethod_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperLaborEntryMethod_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperLaborEntryMethod", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperLaborEntryMethod_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperMachines
   Description: This method updates the fields associated with the changing of the machines,
EstLabHours should change.
This method should run when the JobOper.Machines field changes.
   OperationID: ChangeJobOperMachines
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperMachines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperMachines_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperMachines(requestBody:ChangeJobOperMachines_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperMachines_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperMachines", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperMachines_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperOpCode
   Description: This method sets Labor Rates when the JobOper.OpCode changes.
This method should run when the JobOper.OpCode field changes.
   OperationID: ChangeJobOperOpCode
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperOpCode(requestBody:ChangeJobOperOpCode_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperOpCode_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperOpCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperOpCode_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperOprSeq
   OperationID: ChangeJobOperOprSeq
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOprSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOprSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperOprSeq(requestBody:ChangeJobOperOprSeq_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperOprSeq_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperOprSeq", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperOprSeq_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperOpsPerPart
   Description: This method calculates Estimated Production Hours when the OpsPerPart field changes.
This method should run when the JobOper.OpsPerPart field changes.
   OperationID: ChangeJobOperOpsPerPart
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOpsPerPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOpsPerPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperOpsPerPart(requestBody:ChangeJobOperOpsPerPart_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperOpsPerPart_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperOpsPerPart", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperOpsPerPart_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperOpStdID
   Description: This method defaults the new setup and production values when the Operation Standard ID changes.
This method should run when the JobOper.OpStdID field changes.
   OperationID: ChangeJobOperOpStdID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOpStdID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOpStdID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperOpStdID(requestBody:ChangeJobOperOpStdID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperOpStdID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperOpStdID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperOpStdID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperPartNum
   Description: This method validates the JobOper.PartNum and defaults fields associated with the partnum.
This method should run when the JobOper.PartNum field changes.
   OperationID: ChangeJobOperPartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperPartNum(requestBody:ChangeJobOperPartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperPartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperPartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperPartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperPricePerCode
   Description: This method recalculates the JobOper Display Extended Price when PricePerCode changes.
This method should run when the JobOper.PricePerCode field changes.
   OperationID: ChangeJobOperPricePerCode
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPricePerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPricePerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperPricePerCode(requestBody:ChangeJobOperPricePerCode_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperPricePerCode_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperPricePerCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperPricePerCode_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperPrimaryProdOpDtl
   Description: This method defaults/resets the production standards when selecting Primary
Production Operation Detail.
This method should run when the JobOper.PrimaryProdOpDtl field changes.
   OperationID: ChangeJobOperPrimaryProdOpDtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPrimaryProdOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPrimaryProdOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperPrimaryProdOpDtl(requestBody:ChangeJobOperPrimaryProdOpDtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperPrimaryProdOpDtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperPrimaryProdOpDtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperPrimaryProdOpDtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperPrimarySetupOpDtl
   Description: This method defaults/resets the setup values when selecting Primary
Setup Operation Detail.
This method should run when the JobOper.PrimarySetupOpDtl field changes.
   OperationID: ChangeJobOperPrimarySetupOpDtl
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPrimarySetupOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPrimarySetupOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperPrimarySetupOpDtl(requestBody:ChangeJobOperPrimarySetupOpDtl_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperPrimarySetupOpDtl_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperPrimarySetupOpDtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperPrimarySetupOpDtl_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperProdStandard
   Description: This method recalculates teh Estimated Production Hours when ProdStandard changes.
This method should run when the JobOper.ProdStandard field changes.
   OperationID: ChangeJobOperProdStandard
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperProdStandard_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperProdStandard_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperProdStandard(requestBody:ChangeJobOperProdStandard_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperProdStandard_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperProdStandard", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperProdStandard_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperQtyPerCycle
   OperationID: ChangeJobOperQtyPerCycle
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperQtyPerCycle_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperQtyPerCycle_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperQtyPerCycle(requestBody:ChangeJobOperQtyPerCycle_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperQtyPerCycle_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperQtyPerCycle", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperQtyPerCycle_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperPurPoint
   Description: This method determines price breaks and check if inspection is required.
This method should run when the JobOper.PurPoint field changes.
   OperationID: ChangeJobOperPurPoint
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPurPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPurPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperPurPoint(requestBody:ChangeJobOperPurPoint_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperPurPoint_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperPurPoint", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperPurPoint_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperQtyPer
   Description: This method calculates the production scrap, determines vendor price breaks, and
updates the display extended price.
This method should run when the JobOper.QtyPer field changes.
   OperationID: ChangeJobOperQtyPer
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperQtyPer(requestBody:ChangeJobOperQtyPer_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperQtyPer_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperQtyPer", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperQtyPer_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperRcvInspection
   Description: This method runs logic to determine if inspection is required.
This method should run when the JobOper.RcvInspection field changes.
   OperationID: ChangeJobOperRcvInspection
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperRcvInspection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperRcvInspection_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperRcvInspection(requestBody:ChangeJobOperRcvInspection_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperRcvInspection_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperRcvInspection", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperRcvInspection_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperSNRequired
   OperationID: ChangeJobOperSNRequired
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperSNRequired_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperSNRequired_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperSNRequired(requestBody:ChangeJobOperSNRequired_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperSNRequired_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperSNRequired", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperSNRequired_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperSNRequiredSubConShip
   OperationID: ChangeJobOperSNRequiredSubConShip
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperSNRequiredSubConShip_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperSNRequiredSubConShip_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperSNRequiredSubConShip(requestBody:ChangeJobOperSNRequiredSubConShip_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperSNRequiredSubConShip_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperSNRequiredSubConShip", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperSNRequiredSubConShip_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperStdBasis
   Description: This method runs logic to calculate the estimated production hours.
This method should run when the JobOper.StdBasis field changes.
   OperationID: ChangeJobOperStdBasis
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperStdBasis_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperStdBasis_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperStdBasis(requestBody:ChangeJobOperStdBasis_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperStdBasis_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperStdBasis", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperStdBasis_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperStdFormat
   Description: This method runs logic to calculate the estimated production hours.
This method should run when the JobOper.StdFormat field changes.
   OperationID: ChangeJobOperStdFormat
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperStdFormat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperStdFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperStdFormat(requestBody:ChangeJobOperStdFormat_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperStdFormat_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperStdFormat", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperStdFormat_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperUnitPrice
   Description: This method runs logic to calculate the doc price fields and the display extended price.
This method should run when the JobOper.UnitPrice field changes.
   OperationID: ChangeJobOperUnitPrice
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperUnitPrice(requestBody:ChangeJobOperUnitPrice_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperUnitPrice_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperUnitPrice", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperUnitPrice_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOperVendorNumVendorID
   Description: This method runs logic to set the purchase points, calculate the price breaks,
and checks to see if inspection is required.
This method should run when the JobOper.VendorNumVendorID field changes.
   OperationID: ChangeJobOperVendorNumVendorID
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOperVendorNumVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperVendorNumVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOperVendorNumVendorID(requestBody:ChangeJobOperVendorNumVendorID_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOperVendorNumVendorID_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOperVendorNumVendorID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOperVendorNumVendorID_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOprRestriction
   Description: This methods assigns associated fields when JobOperRestriction.RestrictionTypeID changes.
   OperationID: ChangeJobOprRestriction
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOprRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOprRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOprRestriction(requestBody:ChangeJobOprRestriction_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOprRestriction_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOprRestriction", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOprRestriction_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobOprSubstance
   Description: This methods assigns associated fields when JobOperRestrictSubst.SubstanceID changes.
   OperationID: ChangeJobOprSubstance
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobOprSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOprSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobOprSubstance(requestBody:ChangeJobOprSubstance_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobOprSubstance_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobOprSubstance", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobOprSubstance_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobPartPartNum
   Description: This method validates the JobPart.PartNum and defaults fields associated with the partnum.
This method should run when the JobPart.PartNum field changes.
   OperationID: ChangeJobPartPartNum
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobPartPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobPartPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobPartPartNum(requestBody:ChangeJobPartPartNum_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobPartPartNum_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobPartPartNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobPartPartNum_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdMakeToJobQty
   Description: This method runs public method CheckJobProdQtyJob to validate quantities.
This method should run when the JobProd.MakeToJobQty field changes.
   OperationID: ChangeJobProdMakeToJobQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdMakeToJobQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdMakeToJobQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdMakeToJobQty(requestBody:ChangeJobProdMakeToJobQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdMakeToJobQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdMakeToJobQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdMakeToJobQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ChangeJobProdMakeToStockQty
   Description: This method runs logic to set the stock and order WIP quantities
This method should run when the JobProd.MakeToStockQty field changes.
   OperationID: ChangeJobProdMakeToStockQty
      @param epicorHeaders A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      @param requestBody Desc: Input parameters  => reference#/components/schemas/ChangeJobProdMakeToStockQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdMakeToStockQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ChangeJobProdMakeToStockQty(requestBody:ChangeJobProdMakeToStockQty_input, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<ChangeJobProdMakeToStockQty_output>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/ChangeJobProdMakeToStockQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => {
         if(res.ok){
             return res.json()
         }
         else{
             return res.json().then(text => {throw new Error(text["ErrorMessage"]) })
         }
      })
      .then((data) => {
         resolve(data as ChangeJobProdMakeToStockQty_output)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// OData Schemas:
//////////////////////////////////////////////////////////////////////////
export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmRefDesRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAsmRefDesRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAsmblAttchRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblInspRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAsmblInspRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictSubstRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAsmblRestrictSubstRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictionRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAsmblRestrictionRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAsmblRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAuditRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobAuditRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobHeadAttchRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadListRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobHeadListRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobHeadRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobMtlAttchRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlInspRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobMtlInspRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRefDesRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobMtlRefDesRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictSubstRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobMtlRestrictSubstRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictionRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobMtlRestrictionRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobMtlRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOpDtlRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOpDtlRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionParamRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperActionParamRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperActionRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperAttchRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperInspRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperInspRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperMachParamRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperMachParamRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictSubstRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperRestrictSubstRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictionRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperRestrictionRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobOperRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobPartRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobPartRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobProdRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobProdRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobResourcesRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobResourcesRow,
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobStageRow{
   "odatametadata":string,
   "value":Erp_Tablesets_JobStageRow,
}

export interface Erp_Tablesets_JobAsmRefDesRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   "MtlSeq":number,
      /**  Identifier of Reference Designator  */  
   "RefDes":string,
      /**  Unique identifies the reference designator with the material sequence.  */  
   "RefDesSeq":number,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   "MtlPartNum":string,
      /**  Free form side location. (Top, Bottom, Both, Level, etc)  */  
   "Side":string,
      /**  X Coordinate of the reference designator  */  
   "XLocation":number,
      /**  Y Coordinate of the reference designator  */  
   "YLocation":number,
      /**  Z Coordinate of the reference designator  */  
   "ZLocation":number,
      /**  Rotation of the reference designator. Max value = 360.000  */  
   "Rotation":number,
      /**  Designator Description  */  
   "Description":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobAsmblAttchRow{
   "Company":string,
   "JobNum":string,
   "AssemblySeq":number,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobAsmblInspRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely identifies the JobAsmblInsp record within the JobNum  */  
   "PlanSeq":number,
      /**  The inspection plan part number (configurator part number).  */  
   "InspPlanPartNum":string,
      /**  The inspection plan revision number (configurator revision number).  */  
   "InspPlanRevNum":string,
      /**  The specification ID.  Must be valid in the SpecHed table.  */  
   "SpecID":string,
      /**  The specification revision number.  Must be valid in the SpecRev table.  */  
   "SpecRevNum":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "SpecHedDescription":string,
   "BitFlag":number,
   "InspPlanDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobAsmblRestrictSubstRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  */  
   "JobNum":string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  */  
   "AssemblySeq":number,
      /**  Restriction Type identification.  */  
   "RestrictionTypeID":string,
      /**  Substance identification.  */  
   "SubstanceID":string,
      /**  Default weight of the substance per primary part of UOM  */  
   "Weight":number,
      /**  By default the primary UOM of the part.  */  
   "WeightUOM":string,
      /**  Defaulted from Part Master Substances. When true then weight is disregarded in compliance roll-up.  */  
   "Manual":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "PartNum":string,
   "BitFlag":number,
   "JobNumPartDescription":string,
   "RestrictionDescription":string,
   "SubstanceDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobAsmblRestrictionRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  */  
   "JobNum":string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  */  
   "AssemblySeq":number,
      /**  Restriction Type identification.  */  
   "RestrictionTypeID":string,
      /**  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  */  
   "PartNum":string,
      /**  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  */  
   "Manual":boolean,
      /**  Enabled when manual flag is unchecked and company configuration flag for allow direct roll-up is enabled. Default to Indirect Roll-Up.  */  
   "RollupType":string,
      /**  Displays one of the compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  */  
   "Compliance":string,
      /**  Set when Manual flag is checked or after compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  */  
   "ComplianceDate":string,
      /**  Set after compliance roll-up  */  
   "LastRollUp":string,
      /**  Displays one of the built compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  */  
   "BuiltCompliance":string,
      /**  Set when Manual flag is checked or after built compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  */  
   "BuiltComplianceDate":string,
      /**  Set after built compliance roll-up  */  
   "BuiltLastRollUp":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  */  
   "Weight":boolean,
   "EnableRollUpType":boolean,
   "BitFlag":number,
   "JobNumPartDescription":string,
   "RestrictionDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobAsmblRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Indicates if the Job is complete.  This is a mirror image of JobHead.JobComplete.  Not directly maintainable.  When Job is complete, then all assembly records are also marked complete.  This is used to make database access to open assembly records more efficient.  */  
   "JobComplete":boolean,
      /**  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  */  
   "JobNum":string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  */  
   "AssemblySeq":number,
      /**  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  */  
   "PartNum":string,
      /**  Description for the Part on the assembly record.  This cannot be blank.  Use Part.Description as default if a valid Part record exists.  */  
   "Description":string,
      /**  The revision number for the assembly.  An optional field.  Defaults from the most current PartRev.RevisionNum.  */  
   "RevisionNum":string,
      /**  The production quantity required for this assembly per one of it's parent part.  */  
   "QtyPer":number,
      /**  The internal unit of measure for this assembly.  Use the Part.IUM as a default.  */  
   "IUM":string,
      /**   This is how many of the assemblies are required to produce the END ITEM.  This is a calculated field.  Calculated as the (( Parents RequiredQty - Parents PullQty) X QtyPer) + OverRunQty.
This field needs to be refreshed whenever a change is made to the production quantity in any of its parents or when its QtyPer, or Overrun fields are changed. The refresh may also occur if the structure of the assemblies is changed.
The production quantity for the assembly which will drive raw material requirements and estimated production times can be determined by ( RequiredQty - PullQty).  */  
   "RequiredQty":number,
      /**  This indicates a quantity that will be pulled from inventory for this assembly instead of being manufactured. This is a fixed quantity and is not affected by  QtyPer type changes. If this a valid Part, then it must update the PartWhse.AllocQty.  */  
   "PullQty":number,
      /**  This is the warehouse that the material is allocated against.  */  
   "WarehouseCode":string,
      /**  The material burden rate for this Job Assembly.  */  
   "MtlBurRate":number,
      /**  The estimated unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  */  
   "EstUnitCost":number,
      /**  The estimated Mtl burden unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  */  
   "EstMtlBurUnitCost":number,
      /**  This value indicates a quantity that is planned to be overrun and put into inventory. This is kept as a separate field so that is does not distort the BOM requirement relationships. This increases the total production quantity for the assembly.  This is a FIXED quantity and is not affected by structure or qty/per type changes.  */  
   "OverRunQty":number,
      /**  Scheduled start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process.  */  
   "StartDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  */  
   "StartHour":number,
      /**  The scheduled due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  */  
   "DueDate":string,
      /**  This field is established by scheduling.  It represents the  "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  */  
   "DueHour":number,
      /**  Sequence number of the Parent Assembly.  */  
   "Parent":number,
      /**   The  sequence number of the prior assembly that is on the same level as this assembly.  This  is known as a PriorPeer assembly.  This is automatically maintained by the maintenance programs.
The logic is to find an assembly where the Parent is the same and the NextPeer is -1.  Then NextPeer of that assembly gets updated with this assemblies sequence number and this assembly gets its PriorPeer field updated with the sequence number from the assembly which was found.  */  
   "PriorPeer":number,
      /**   The sequence number of the Next Assembly on the same level as this assembly.  This is known as a NextPeer assembly.  Automatically maintained by the maintenance programs.
The logic is to find an assembly where the Parent is the same and the PriorPeer is -1.  Then the PriorPeer of that assembly is updated with this assemblies sequence number and then this assemblies NextPeer gets updated with the sequence number from the assembly that was found.  */  
   "NextPeer":number,
      /**  Sequence number of this assemblies very first subassembly.  This is known as the Child assembly.  Automatically maintained by the maintenance programs.  The logic is to find the Parent assembly record and if its child is -1, update it with this assemblies sequence number.  */  
   "Child":number,
      /**  Total cost to date, of this component that was issued from stock.  */  
   "TotalCost":number,
      /**  Total material burden cost to date, of this component that was issued from stock.  */  
   "MtlBurCost":number,
      /**  This quantity is a summary of all Issue Transactions that were issued to meet this assemblies PullQty requirements.  This is not directly maintainable.  */  
   "IssuedQty":number,
      /**  Optional field for Engineering Drawing Number.  Defaulted from BomHead.DrawNum during methods pull functions.  */  
   "DrawNum":string,
      /**  Indicates if the pull quantity has been issued complete.  If "yes" then this record is NOT part of the PartWhse.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  */  
   "IssuedComplete":boolean,
      /**  Editor widget for Job Assembly comments.  */  
   "CommentText":string,
      /**  Indicates if this assembly is to be included in the browse of assemblies in the  "get details" function.  The user can use this option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly, it just keeps it out of the browse.  */  
   "InCopyList":boolean,
      /**  An internally system assigned integer which is used as part of an index to organize the records into a Bill of Material fashion sequence.  */  
   "BomSequence":number,
      /**  An internally system assigned integer which represents the "Level of Indention" of the assembly in reference to the Bill of Material structure.  */  
   "BomLevel":number,
      /**  Scheduled "What If" start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process  */  
   "WIStartDate":string,
      /**  This field is established by scheduling.  It represents the What-If  "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  */  
   "WIStartHour":number,
      /**  The scheduled "What-If" due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  */  
   "WIDueDate":string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  */  
   "WIDueHour":number,
      /**  This Level Actual Labor Cost.  */  
   "TLALaborCost":number,
      /**  This Level Actual Burden Cost.  */  
   "TLABurdenCost":number,
      /**  This Level Actual Material Cost.  */  
   "TLAMaterialCost":number,
      /**  This Level Actual Subcontract Cost.  */  
   "TLASubcontractCost":number,
      /**  This Level Actual Material Burden Cost.  */  
   "TLAMtlBurCost":number,
      /**  This Level Actual Setup Hours.  */  
   "TLASetupHours":number,
      /**  This Level Actual Production Hours.  */  
   "TLAProdHours":number,
      /**  This Level Estimated Labor Cost.  */  
   "TLELaborCost":number,
      /**  This Level Estimated Burden Cost.  */  
   "TLEBurdenCost":number,
      /**  This Level Estimated Material Cost.  */  
   "TLEMaterialCost":number,
      /**  This Level Estimated Subcontract Cost.  */  
   "TLESubcontractCost":number,
      /**  This Level Estimated Material Burden Cost.  */  
   "TLEMtlBurCost":number,
      /**  This Level Estimated Setup Hours.  */  
   "TLESetupHours":number,
      /**  This Level Estimated Production Hours.  */  
   "TLEProdHours":number,
      /**  Lower Level Actual Labor Cost.  */  
   "LLALaborCost":number,
      /**  Lower Level Burden Labor Cost.  */  
   "LLABurdenCost":number,
      /**  Lower Level Actual Material Cost.  */  
   "LLAMaterialCost":number,
      /**  Lower Level Actual Subcontractor Cost.  */  
   "LLASubcontractCost":number,
      /**  Lower Level Actual Material Burden Cost.  */  
   "LLAMtlBurCost":number,
      /**  Lower Level Actual Setup Hours.  */  
   "LLASetupHours":number,
      /**  Lower Level Actual Production Hours.  */  
   "LLAProdHours":number,
      /**  Lower Level Estimated Labor Cost.  */  
   "LLELaborCost":number,
      /**  Lower Level Estimated Burden Cost.  */  
   "LLEBurdenCost":number,
      /**  Lower Level Estimated Material Cost.  */  
   "LLEMaterialCost":number,
      /**  Lower Level Estimated Subcontract Cost.  */  
   "LLESubcontractCost":number,
      /**  Lower Level Estimated Material Burden Cost.  */  
   "LLEMtlBurCost":number,
      /**  Lower Level Estimated Setup Hours.  */  
   "LLESetupHours":number,
      /**  Lower Level Estimated Production Hours.  */  
   "LLEProdHours":number,
      /**   The operation number (JobOper.OprSeq) that is marked to do the Automatic Receipt to inventory.  Note: Zero = no operation is set to perform the auto receive into inventory function.
This field is not directly maintainable.  Instead it is set during operation maintenance by having the user mark a check box indicating "Auto Receive" which then updates this field with the operations sequence number.  */  
   "AutoRecOpr":number,
      /**   The sequence of the operation that is to be considered as the operation which indicates the quantity complete for the Job/Assembly.  In other words this operations completed quantity = Job/Assembly completed.   Note: Zero = no operation is set and that the system should use the last operation to determine quantity complete.
This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Final Operation" which then updates this field with the operations sequence number.  */  
   "FinalOpr":number,
      /**  FUTURE IMPLEMENTATION - Characters used on the parent assembly drawing to show where assembly  is used.  */  
   "FindNum":string,
      /**  Total received to stock.  This pertains receiving an OverRun quantity.  Used to update the PartDtl file for expected production quantity.  PartDtl is OverRun - ReceivedToStock.  */  
   "ReceivedToStock":number,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  Indicates if this assembly material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified..  */  
   "Direct":boolean,
      /**   An assembly record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.
It can be left as zero meaning that this assembly is required at the very beginning of the production job.  The related operation is also used to calculate scheduled start date.  */  
   "RelatedOperation":number,
      /**  This Level Actual Material Labor Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialLabCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   "TLAMaterialLabCost":number,
      /**  This Level Actual Issued Material Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialMtlCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   "TLAMaterialMtlCost":number,
      /**  This Level Actual Material Subcontract Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialSubCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   "TLAMaterialSubCost":number,
      /**  This Level Actual Material Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialBurCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   "TLAMaterialBurCost":number,
      /**  Lower Level Actual Material Labor Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialLabCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   "LLAMaterialLabCost":number,
      /**  Lower Level Actual Material Material Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialMtlCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   "LLAMaterialMtlCost":number,
      /**  Lower Level Actual Material Subcontract Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialSubCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   "LLAMaterialSubCost":number,
      /**  Lower Level Actual Material Burden Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialBurCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   "LLAMaterialBurCost":number,
      /**  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  */  
   "TotalMtlMtlCost":number,
      /**  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   "TotalMtlLabCost":number,
      /**  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   "TotalMtlSubCost":number,
      /**  Total Burden cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   "TotalMtlBurCost":number,
      /**  The service call that this assembly belongs to.  */  
   "CallNum":number,
      /**  The Service Call Line that this assembly relates to.  */  
   "CallLine":number,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   "RestoreFlag":string,
      /**  Analysis Code  */  
   "AnalysisCode":string,
      /**  The date when the configuration was completed for the assembly.  */  
   "LastConfigDate":string,
      /**  The system time when the configuration was completed for the assembly.  */  
   "LastConfigTime":number,
      /**  The User ID of the last user to complete the configuration of the assembly.  */  
   "LastConfigUserID":string,
      /**  This field will be set to the value of the JobAsmbl.RequiredQty at the time the JobHead.Engineered flag is set to true.  */  
   "OrigRequiredQty":number,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  */  
   "WhseAllocFlag":boolean,
      /**  This Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for this level.  Otherwise, TLAMaterialMtlBurCost may be populated but is not included in the calculation of TLAMaterialCost.  */  
   "TLAMaterialMtlBurCost":number,
      /**  Lower Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for the lower level.  Otherwise, LLAMaterialMtlBurCost may be populated but is not included in the calculation of LLAMaterialCost.  */  
   "LLAMaterialMtlBurCost":number,
      /**  This Level Actual Component Labor Cost.  This is the Total Labor costs of all manufactured parts issued as material for this level. Unlike TLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   "TLAMfgCompLabCost":number,
      /**  This Level Actual Component Material Cost.  This is the Total Material costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   "TLAMfgCompMtlCost":number,
      /**  This Level Actual Component Subcontract Cost.  This is the Total Subcontract costs of all manufactured parts issued as material for this level. Unlike TLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   "TLAMfgCompSubCost":number,
      /**  This Level Actual Component Burden Cost.  This is the Total Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   "TLAMfgCompBurCost":number,
      /**  This Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   "TLAMfgCompMtlBurCost":number,
      /**  Lower Level Actual Component Labor Cost. This is the Total Labor costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   "LLAMfgCompLabCost":number,
      /**  Lower Level Actual Component Material Cost. This is the Total Material costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   "LLAMfgCompMtlCost":number,
      /**  Lower Level Actual Component Subcontract Cost. This is the Total Subcontract costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   "LLAMfgCompSubCost":number,
      /**  Lower Level Actual Component Burden Cost. This is the Total Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   "LLAMfgCompBurCost":number,
      /**  Lower Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   "LLAMfgCompMtlBurCost":number,
      /**  Assembly Weight defaulted from Part Master.  */  
   "Weight":number,
      /**  Assembly Weight UOM defaulted from Part Master.  */  
   "WeightUOM":string,
      /**  Original Material Sequence. Used in the configurator.  */  
   "OrigMtlSeq":number,
      /**  Original Rule Tag. Used in the Configurator.  */  
   "OrigRuleTag":string,
      /**  Validate Reference Designators.  */  
   "ValRefDes":boolean,
      /**  Base Part Number. Used in the configurator to identify the configurator part Number.  */  
   "BasePartNum":string,
      /**  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  */  
   "BaseRevisionNum":string,
      /**   The estimated material unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   "EstMtlUnitCost":number,
      /**   The estimated labor unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   "EstLbrUnitCost":number,
      /**   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   "EstBurUnitCost":number,
      /**   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   "EstSubUnitCost":number,
      /**  Indicates if the sub-assemby can be spawned off to a different job.  This can occur during the firming up of a job.  */  
   "PlanAsAsm":boolean,
      /**  Plan as assembly reference.  Used to link related subassemblies together when multiple assemblies are created for the same part due to PartSite lot size values.  */  
   "PAARef":string,
      /**  Used only on Plan As Assembly records.  Indicates the sub assembly will be split of from the the current job and a separate job for the assembly will be created.  */  
   "PAAFirm":boolean,
      /**  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  */  
   "EstScrap":number,
      /**  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  */  
   "EstScrapType":string,
      /**  If TRUE then this field will mean that the smart string has already been processed  */  
   "SmartStringProcessed":boolean,
      /**  Original smart string passed in for configuration  */  
   "SmartString":string,
      /**  Required number of designators  */  
   "ReqRefDes":number,
      /**  Reassign Serial Numbers Assembly  */  
   "ReassignSNAsm":boolean,
      /**  This Level Actual Other Direct Cost.  */  
   "TLAODCCost":number,
      /**  AssemblyMatch  */  
   "AssemblyMatch":string,
      /**  JdfStatus  */  
   "JdfStatus":string,
      /**  PressDevice  */  
   "PressDevice":string,
      /**  DigitalFileName  */  
   "DigitalFileName":string,
      /**  PrepressJobName  */  
   "PrepressJobName":string,
      /**  JdfPrepressAction  */  
   "JdfPrepressAction":string,
      /**  SendToPress  */  
   "SendToPress":boolean,
      /**  RemovedFromPlan  */  
   "RemovedFromPlan":boolean,
      /**  SendToPressInitiator  */  
   "SendToPressInitiator":number,
      /**  OperationType  */  
   "OperationType":number,
      /**  SendToPrePress  */  
   "SendToPrePress":boolean,
      /**  GroupSeq  */  
   "GroupSeq":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  PartPlanInfo  */  
   "PartPlanInfo":string,
      /**  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  */  
   "OrigStructTag":string,
      /**  ContractID  */  
   "ContractID":string,
      /**  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  */  
   "LinkToContract":boolean,
      /**  PCLinkRemoved  */  
   "PCLinkRemoved":boolean,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   "ExternalMESSyncRequired":boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   "ExternalMESLastSync":string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  Planning number of pieces for this attribute set.  */  
   "PlanningNumberOfPieces":number,
      /**  The unique identifier of the related CPQ Configured Quote Product.  */  
   "KBConfigProdID":number,
      /**  Calculated Available Quantity  */  
   "AvailableQty":number,
      /**  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  */  
   "bUseAvailQty":boolean,
      /**  The child assembly sequence field.  The JobAsmbl.Child field value.  The field Child was causing a .net conflict.  */  
   "ChildAssemblySeq":number,
      /**  The internal unit of measure for this assembly.  Same as IUM but readOnly  */  
   "DispIUM":string,
      /**  The order JobAsmbl records should be displayed.  */  
   "DisplayOrder":number,
      /**  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  */  
   "EnableAsmSplitCosts":boolean,
   "EnableMtlSalvage":boolean,
   "EnablePurDir":boolean,
      /**  If it's Stocked assembly and PlanAsAsm is true.  */  
   "FirmProcEnable":boolean,
      /**  Is used to select stocked Job Assemblies which will be processed by Firming Process. Is available only for .FirmProcEnable = true.  */  
   "FirmProcess":boolean,
      /**  External field for EQSyst GetCostsFromInventory  */  
   "GetCostsFromInventory":boolean,
      /**  External field to hold JCSyst.GetCostsFromTemplate value  */  
   "GetCostsFromTemplate":boolean,
      /**  The parent assembly sequence field.  The JobAsmbl.Parent field value.  The field Parent was causing a .net conflict.  */  
   "ParentAssemblySeq":number,
      /**  Parent Description  */  
   "ParentDescription":string,
      /**  Parent PartNum  */  
   "ParentPartNum":string,
      /**  Parent RevisionNum  */  
   "ParentRev":string,
      /**  Internal flag to identify if current Part is an Inventory Part.  */  
   "PartExists":boolean,
   "PartmasterPart":boolean,
      /**  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  */  
   "RDEndNum":number,
      /**  The prefix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  */  
   "RDPrefix":string,
      /**  This number will be used to create reference designators. This field will be defaulted to ?1?  */  
   "RDStartNum":number,
      /**  The suffix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  */  
   "RDSuffix":string,
      /**  Related Operation Description  */  
   "RelatedOperationDesc":string,
      /**  For Internal use ONLY to set a flag calculated from BO to show a warning message to the user when there exists some inconsistences between records on JobAsml table that can cause infinite loop when BOM Resequence.  */  
   "ShowWarningBOMResequence":boolean,
      /**  External field used to determine if Add assembly as "Sub"assembly or "Asm"bly  */  
   "AddAsmAs":string,
      /**  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  */  
   "bAvailQty":number,
   "EnableAttributeSetSearch":boolean,
   "AttributeSetShortDescription":string,
   "AttributeSetDescription":string,
   "AttrClassID":string,
      /**  This Level Total Actual Cost (TLAMaterialCost + TLALaborCost + TLABurdenCost + TLASubcontractCost + TLAMtlBurCost)  */  
   "TLATotalCost":number,
      /**  The Level Estimated Total Cost (TLEMaterialCost + TLELaborCost + TLEBurdenCost + TLESubcontractCost + TLEMtlBurCost)  */  
   "TLETotalCost":number,
   "BitFlag":number,
   "AnalysisCdDescription":string,
   "CallLineLineDesc":string,
   "DynAttrValueSetShortDescription":string,
   "DynAttrValueSetDescription":string,
   "JobNumPartDescription":string,
   "PartNumIUM":string,
   "PartNumPartDescription":string,
   "PartNumTrackDimension":boolean,
   "PartNumPricePerCode":string,
   "PartNumTrackLots":boolean,
   "PartNumTrackSerialNum":boolean,
   "PartNumSellingFactor":number,
   "PartNumSalesUM":string,
   "PartNumTrackInventoryByRevision":boolean,
   "PartNumAttrClassID":string,
   "PartNumTrackInventoryAttributes":boolean,
   "PlantName":string,
   "WarehouseCodeDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobAuditRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job number.  */  
   "JobNum":string,
      /**  System date when this change was made.  */  
   "ChangeDate":string,
      /**  System time (seconds since midnight) of when the changes were made.  */  
   "ChangeTime":number,
      /**  UserID who made the changes.  Not maintainable by the user.  */  
   "ChangedBy":string,
      /**  Used to enter a description of the changes that were made.  */  
   "ChangeDescription":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Formatted display of ChangeTime  */  
   "DspChangeTime":string,
   "BitFlag":number,
   "JobNumPartDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobHeadAttchRow{
   "Company":string,
   "JobNum":string,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobHeadListRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  */  
   "JobClosed":boolean,
      /**  Date the Job was closed.  Defaults as the system but can be overridden.  */  
   "ClosedDate":string,
      /**  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  */  
   "JobComplete":boolean,
      /**  The date that production was completed for this Job.  Maintained via Job Completion Processing.  */  
   "JobCompletionDate":string,
      /**  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  */  
   "JobEngineered":boolean,
      /**  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  */  
   "JobReleased":boolean,
      /**  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  */  
   "JobHeld":boolean,
      /**  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  */  
   "JobNum":string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   "PartNum":string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   "RevisionNum":string,
      /**  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  */  
   "DrawNum":string,
      /**  The description of the part that is to be manufactured.  Use the Part.Description as the default.  */  
   "PartDescription":string,
      /**  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.
See JobPart table for information on end parts of a job.  */  
   "ProdQty":number,
      /**  The unit of measure for the job.  Defaulted from Part.IUM.  */  
   "IUM":string,
      /**  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   "StartDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   "StartHour":number,
      /**  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   "DueDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   "DueHour":number,
      /**  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  */  
   "ReqDueDate":string,
      /**  An optional user defined code.  This will be used for report selections and views of job headers.  */  
   "JobCode":string,
      /**  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  */  
   "QuoteNum":number,
      /**  Contains the quote line number reference. (see QuoteNum )  */  
   "QuoteLine":number,
      /**  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   "ProdCode":string,
      /**  Editor widget for Job header comments.  */  
   "CommentText":string,
      /**  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  */  
   "ExpenseCode":string,
      /**  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  */  
   "InCopyList":boolean,
      /**   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   "WIName":string,
      /**  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   "WIStartDate":string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   "WIStartHour":number,
      /**   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.
This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  */  
   "Candidate":boolean,
      /**  Scheduling Code.  SchedCode references a record in the SchedPri table.  */  
   "SchedCode":string,
      /**  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  */  
   "SchedLocked":boolean,
      /**  Associates the JobHead with a project in the Project table.  This can be blank.  */  
   "ProjectID":string,
      /**  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  */  
   "WIPCleared":boolean,
      /**  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  */  
   "JobFirm":boolean,
      /**  A LIST-DELIM delimited list of people.  */  
   "PersonList":string,
      /**   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.
Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  Defaults from the ProdGrup.PersonID.  */  
   "PersonID":string,
      /**  Production Team for the Job.  Associates the JobHead with a ProdTeam.  */  
   "ProdTeamID":string,
      /**   Production quantity completed.
Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  */  
   "QtyCompleted":number,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  */  
   "DatePurged":string,
      /**  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  */  
   "TravelerReadyToPrint":boolean,
      /**  The last date the job traveler was mass printed.  */  
   "TravelerLastPrinted":string,
      /**  Indicates if the Status can be printed. Print functions are not available if this is = No.  */  
   "StatusReadyToPrint":boolean,
      /**  The last date the job status was mass printed.  */  
   "StatusLastPrinted":string,
      /**  The Service Call number that this Job is linked to.  */  
   "CallNum":number,
      /**  The Service Call Line that this Job is linked to.  */  
   "CallLine":number,
      /**  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  */  
   "JobType":string,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  Analysis Code  */  
   "AnalysisCode":string,
      /**  The help desk case that created this job.  */  
   "HDCaseNum":number,
      /**  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  */  
   "ProductionYield":boolean,
      /**   The ID of the Equipment that this "Maintenance Job" is for.
Foreign key component to Equip table.  */  
   "EquipID":string,
      /**   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.
Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.
If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  */  
   "PlanNum":number,
      /**  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  */  
   "IssueTopicID1":string,
      /**  Indicates the record is used with Machine MES  */  
   "ExternalMES":boolean,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  PersonIDName  */  
   "PersonIDName":string,
   "SOExists":boolean,
      /**  Part Description  */  
   "PartNumPartDescription":string,
      /**  Track Dimension  */  
   "PartNumTrackDimension":boolean,
      /**  Track Lots  */  
   "PartNumTrackLots":boolean,
      /**  Track Serial Num  */  
   "PartNumTrackSerialNum":boolean,
   "EquipOEM":string,
   "EquipModel":string,
   "EquipTypeID":string,
   "EquipLocID":string,
      /**  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  */  
   "PMJob":boolean,
   "EquipDescription":string,
   "JobTypeName":string,
      /**  Original smart string passed in for configuration  */  
   "SmartString":string,
      /**  If TRUE then this field will mean that the smart string has already been processed  */  
   "SmartStringProcessed":boolean,
      /**  ID of related Attribute Class  */  
   "AttrClassID":string,
      /**  Description of values in set  */  
   "AttrDescription":string,
      /**  The Short Description of the Attribute Set which will be visible throughout the system and is to be used in selecting an Attribute Set to go along with the Part  */  
   "ShortDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobHeadRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  */  
   "JobClosed":boolean,
      /**  Date the Job was closed.  Defaults as the system but can be overridden.  */  
   "ClosedDate":string,
      /**  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  */  
   "JobComplete":boolean,
      /**  The date that production was completed for this Job.  Maintained via Job Completion Processing.  */  
   "JobCompletionDate":string,
      /**  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  */  
   "JobEngineered":boolean,
      /**   Optional Job check off number 1.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   "CheckOff1":boolean,
      /**   Optional Job check off number 2.  The label for this field is found in JCSyst. If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   "CheckOff2":boolean,
      /**   Optional Job check off number 3.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   "CheckOff3":boolean,
      /**  Optional Job check off number 4.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   "CheckOff4":boolean,
      /**  Optional Job check off number 5.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   "CheckOff5":boolean,
      /**  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  */  
   "JobReleased":boolean,
      /**  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  */  
   "JobHeld":boolean,
      /**  Scheduling Status Control (R-Required, P-Pending, A-Active, C-Complete).  NOT CURRENTLY IMPLEMENTED.  */  
   "SchedStatus":string,
      /**  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  */  
   "JobNum":string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   "PartNum":string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   "RevisionNum":string,
      /**  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  */  
   "DrawNum":string,
      /**  The description of the part that is to be manufactured.  Use the Part.Description as the default.  */  
   "PartDescription":string,
      /**  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.
See JobPart table for information on end parts of a job.  */  
   "ProdQty":number,
      /**  The unit of measure for the job.  Defaulted from Part.IUM.  */  
   "IUM":string,
      /**  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   "StartDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   "StartHour":number,
      /**  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   "DueDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   "DueHour":number,
      /**  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  */  
   "ReqDueDate":string,
      /**  An optional user defined code.  This will be used for report selections and views of job headers.  */  
   "JobCode":string,
      /**  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  */  
   "QuoteNum":number,
      /**  Contains the quote line number reference. (see QuoteNum )  */  
   "QuoteLine":number,
      /**  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   "ProdCode":string,
      /**  UserChar1  */  
   "UserChar1":string,
      /**  UserChar2  */  
   "UserChar2":string,
      /**  UserChar3  */  
   "UserChar3":string,
      /**  UserChar4  */  
   "UserChar4":string,
      /**  UserDate1  */  
   "UserDate1":string,
      /**  UserDate2  */  
   "UserDate2":string,
      /**  UserDate3  */  
   "UserDate3":string,
      /**  UserDate4  */  
   "UserDate4":string,
      /**  UserDecimal1  */  
   "UserDecimal1":number,
      /**  UserDecimal2  */  
   "UserDecimal2":number,
      /**  UserInteger1  */  
   "UserInteger1":number,
      /**  UserInteger2  */  
   "UserInteger2":number,
      /**  Editor widget for Job header comments.  */  
   "CommentText":string,
      /**  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  */  
   "ExpenseCode":string,
      /**  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  */  
   "InCopyList":boolean,
      /**   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   "WIName":string,
      /**  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   "WIStartDate":string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   "WIStartHour":number,
      /**  Scheduled "What If" finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   "WIDueDate":string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   "WIDueHour":number,
      /**   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.
This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  */  
   "Candidate":boolean,
      /**  Scheduling Code.  SchedCode references a record in the SchedPri table.  */  
   "SchedCode":string,
      /**  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  */  
   "SchedLocked":boolean,
      /**  Associates the JobHead with a project in the Project table.  This can be blank.  */  
   "ProjectID":string,
      /**  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  */  
   "WIPCleared":boolean,
      /**  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  */  
   "JobFirm":boolean,
      /**  A LIST-DELIM delimited list of people.  */  
   "PersonList":string,
      /**   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.
Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  Defaults from the ProdGrup.PersonID.  */  
   "PersonID":string,
      /**  Production Team for the Job.  Associates the JobHead with a ProdTeam.  */  
   "ProdTeamID":string,
      /**   Production quantity completed.
Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  */  
   "QtyCompleted":number,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  */  
   "DatePurged":string,
      /**  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  */  
   "TravelerReadyToPrint":boolean,
      /**  The last date the job traveler was mass printed.  */  
   "TravelerLastPrinted":string,
      /**  Indicates if the Status can be printed. Print functions are not available if this is = No.  */  
   "StatusReadyToPrint":boolean,
      /**  The last date the job status was mass printed.  */  
   "StatusLastPrinted":string,
      /**  The Service Call number that this Job is linked to.  */  
   "CallNum":number,
      /**  The Service Call Line that this Job is linked to.  */  
   "CallLine":number,
      /**  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  */  
   "JobType":string,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   "RestoreFlag":string,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  Analysis Code  */  
   "AnalysisCode":string,
      /**  Indicates that the quantity on this job is locked  */  
   "LockQty":boolean,
      /**  The help desk case that created this job.  */  
   "HDCaseNum":number,
      /**   Values: S(Sequential) or C(Concurrent).
Defaults as S. Must have Advanced Production License to change. Controls how the operations and material requirements are developed. Concurrent jobs are used where the production time is based on the number of machine operations performed and not on the number of parts created. For example, a stamping operation where each cycle of the machine stamps out x number of parts. A further extension of this is that the operation can yield multiple different parts from each cycle of the machine.  Identification of these parts and there associated PPO (parts per operation) is define in the JobPart table.  */  
   "ProcessMode":string,
      /**  The planned date when the job needs to be actioned by the production department to make sure that the job is ready on the planned completion date.  */  
   "PlannedActionDate":string,
      /**  The date that the job needs to be ready for the warehouse to kit to make sure that it is ready for the job start date.  */  
   "PlannedKitDate":string,
      /**  The task ID that is returned from Microsoft Project.  */  
   "MSPTaskID":string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back an alpha numeric string.  */  
   "MSPPredecessor":string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  */  
   "ProductionYield":boolean,
      /**  This field will be set to the value of the JobHead.ProdQty at the time the JobHead.Engineered flag is set to true.  */  
   "OrigProdQty":number,
      /**  This field is used to indicate whether the original quantities should be reset in the job header and its assemblies at JobHead update if JobHead.JobEngineered has been changed from false to true. Generally the orig qtys will be reset, unless this flag is set to true because the user was asked if they wanted to reset the orig qtys and they answered yes.  */  
   "PreserveOrigQtys":boolean,
      /**  If set to yes then exclude this job from the Job Auto-Completion process. Not directly maintainable.  */  
   "NoAutoCompletion":boolean,
      /**  No Auto Closing. If set to yes then exclude this job from the Job Auto-Closing process.  */  
   "NoAutoClosing":boolean,
      /**  The user that created this Job.  */  
   "CreatedBy":string,
      /**  The date that this Job was created.  */  
   "CreateDate":string,
      /**  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  */  
   "WhseAllocFlag":boolean,
      /**  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  */  
   "OwnershipStatus":string,
      /**  Holds the internal object id of PDM parts.  */  
   "PDMObjID":string,
      /**  This field is used to store a code that represents the external system that the Job is being exported to (ex. PDM).  This field is short lived, it is used to instruct the write trigger logic to create IM records for certain types of external systems.  After creating the IM records, the trigger logic should immediately clear the field.  */  
   "ExportRequested":string,
      /**  Flag to indicate how to split the manufacturing cost elements when a manufactured material is issued to the job.  If flag is set to true, the cost of the issued material will be split into individual manufacturing cost elements. If set to false, the cost of the issued material is added to the manufacturing material cost element only.  This is defaulted from the JCSyst.SplitMfgCostElements and is not user maintainable.  */  
   "SplitMfgCostElements":boolean,
      /**  Cross Reference Part Num. Used for alternate serial mask support.  */  
   "XRefPartNum":string,
      /**   Cross Reference Part Type. Used for alternate serial mask support.

I=Internal Cross Reference / C = Customer Part  */  
   "XRefPartType":string,
      /**  Customer Number XRefPartNum is related to if it is a customer part. Used for alternate serial number mask support.  */  
   "XRefCustNum":number,
      /**  Base Part Number. Used in the configurator to identify the configurator part Number.  */  
   "BasePartNum":string,
      /**  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  */  
   "BaseRevisionNum":string,
      /**  Indicates if the job was rough cut scheduled.  */  
   "RoughCutScheduled":boolean,
      /**   The ID of the Equipment that this "Maintenance Job" is for.
Foreign key component to Equip table.  */  
   "EquipID":string,
      /**   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.
Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.
If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  */  
   "PlanNum":number,
      /**  Maintenance Job Priority. Valid values: H - High, M - Medium, L - Low.  M is default or if created from a Maint Request then MaintReq.Priority is used as default.  */  
   "MaintPriority":string,
      /**  Internal field indicating this job was created by a job split.  Assigned true when a job has been split due to start minimum lot size quantity processing.  */  
   "SplitJob":boolean,
      /**  Indicates the type of prefix which is used for create jobs in MRP  */  
   "NumberSource":boolean,
      /**  The Meter Reading value entered at time of Job Closing.  */  
   "CloseMeterReading":number,
      /**  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  */  
   "IssueTopicID1":string,
      /**  Maintenance Issue Topic 2. A sub-topic of IssueTopicID1.  */  
   "IssueTopicID2":string,
      /**  Maintenance Issue Topic 3. A sub-topic of IssueTopicID2.  */  
   "IssueTopicID3":string,
      /**  Maintenance Issue Topic 4. A sub-topic of IssueTopicID3.  */  
   "IssueTopicID4":string,
      /**  Maintenance Issue Topic 5. A sub-topic of IssueTopicID4.  */  
   "IssueTopicID5":string,
      /**  Maintenance Issue Topic 6. A sub-topic of IssueTopicID5.  */  
   "IssueTopicID6":string,
      /**  Maintenance Issue Topic 7. A sub-topic of IssueTopicID6.  */  
   "IssueTopicID7":string,
      /**  Maintenance Issue Topic 8. A sub-topic of IssueTopicID7.  */  
   "IssueTopicID8":string,
      /**  Maintenance Issue Topic 9. A sub-topic of IssueTopicID8.  */  
   "IssueTopicID9":string,
      /**  Maintenance Issue Topic 10. A sub-topic of IssueTopicID9.  */  
   "IssueTopicID10":string,
      /**  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  */  
   "IssueTopics":string,
      /**  Maintenance Resolution Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintRes = Yes  */  
   "ResTopicID1":string,
      /**  Maintenance Resolution Topic 2. A sub-topic of ResTopicID1.  */  
   "ResTopicID2":string,
      /**  Maintenace  Resolution Topic 3. A sub-topic of ResTopicID2.  */  
   "ResTopicID3":string,
      /**  Maintenance Resolution Topic 4. A sub-topic of ResTopicID3.  */  
   "ResTopicID4":string,
      /**  Maintenance Resolution Topic 5. A sub-topic of ResTopicID4.  */  
   "ResTopicID5":string,
      /**  Maintenance Resolution Topic 6. A sub-topic of ResTopicID5.  */  
   "ResTopicID6":string,
      /**  Maintenance Resolution Topic 7. A sub-topic of ResTopicID6.  */  
   "ResTopicID7":string,
      /**  Maintenance Resolution Topic 8. A sub-topic of ResTopicID7.  */  
   "ResTopicID8":string,
      /**  Maintenance Resolution Topic 9. A sub-topic of ResTopicID8.  */  
   "ResTopicID9":string,
      /**  Maintenance Resolution Topic 10. A sub-topic of ResTopicID9.  */  
   "ResTopicID10":string,
      /**  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  */  
   "ResTopics":string,
      /**  It is updated by Calculate Global Scheduling Order process, it indicates if a job has to be scheduled Backwards or Forwards by Global Scheduling Process and it can be modified by Adjust Scheduling Global Order  */  
   "Forward":boolean,
      /**  This is the sequence number used to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  */  
   "SchedSeq":number,
      /**  Indicates if at least one subassembly contains a part that is plan as assembly.  It does not indicate if the assembly is marked as PAA - only that the part is PAA in the BOM.  Used in MRP when determining if a job can be reused.  */  
   "PAAExists":boolean,
      /**  Indicates if the job structure (BOM) was created inside or outside of the mfg lead time for the job part.  Used in MRP when determining if a job can be reused.  */  
   "DtlsWithinLeadTime":boolean,
      /**  GroupSeq  */  
   "GroupSeq":number,
      /**  It indicates that the shop load for that job was not generated (shopload table). The load in shopload can be recreated by Save Resource Load process  */  
   "RoughCut":boolean,
      /**  PlanGUID  */  
   "PlanGUID":string,
      /**  PlanUserID  */  
   "PlanUserID":string,
      /**  LastChangedBy  */  
   "LastChangedBy":string,
      /**  LastChangedOn  */  
   "LastChangedOn":string,
      /**  EPMExportLevel  */  
   "EPMExportLevel":number,
      /**  JobWorkflowState  */  
   "JobWorkflowState":string,
      /**  JobCSR  */  
   "JobCSR":string,
      /**  Indicates the record is used with Machine MES  */  
   "ExternalMES":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  LastExternalMESDate  */  
   "LastExternalMESDate":string,
      /**  LastScheduleDate  */  
   "LastScheduleDate":string,
      /**  LastScheduleProc  */  
   "LastScheduleProc":string,
      /**  Sequence priority used internally by Calculate Global Scheduling Order process to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  */  
   "SchedPriority":number,
      /**  It indicates the days a job is going to be late in relation to its required due date  */  
   "DaysLate":number,
      /**  ContractID  */  
   "ContractID":string,
      /**  Logical field to indicate if this record has been read by project analysis process  */  
   "ProjProcessed":boolean,
      /**  SyncReqBy  */  
   "SyncReqBy":boolean,
      /**  CustName  */  
   "CustName":string,
      /**  CustID  */  
   "CustID":string,
      /**  IsCSRSet  */  
   "IsCSRSet":boolean,
      /**  UnReadyCostProcess  */  
   "UnReadyCostProcess":boolean,
      /**  ProcSuspendedUpdates  */  
   "ProcSuspendedUpdates":string,
      /**  DateTime field to indicate when this record has been read by project analysis process  */  
   "ProjProcessedDate":string,
      /**  PCLinkRemoved  */  
   "PCLinkRemoved":boolean,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   "ExternalMESSyncRequired":boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   "ExternalMESLastSync":string,
      /**  Related to Epicor FSA  */  
   "EpicorFSA":boolean,
      /**  The unique identifier of the related CPQ Configured Quote Product.  */  
   "KBConfigProdID":number,
      /**  Indicates if this revision is to use Advanced Staging.  */  
   "UseAdvancedStaging":boolean,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  PersonIDName  */  
   "PersonIDName":string,
      /**  This flag indicates if the job is ready to be fulfilled.  */  
   "ReadyToFulfill":boolean,
      /**  FSMSendTo  */  
   "FSMSendTo":boolean,
      /**  FSMServiceReportID  */  
   "FSMServiceReportID":string,
   "AdvanceLaborRate":boolean,
      /**  Calculated field is set Not UnReadyCostProcess  */  
   "dspReadyCostProcess":boolean,
      /**  Determine if jobengineered is enabled or disabled.  */  
   "EnableJobEngineered":boolean,
      /**  Should JobFirm be enabled or disabled?  */  
   "EnableJobFirm":boolean,
      /**  Determine if jobreleased is enabled or disabled.  */  
   "EnableJobReleased":boolean,
   "EnableMaterialStatus":boolean,
   "EnableProject":boolean,
      /**  Is the job allowed to be engineered?  */  
   "EngineerAllowed":boolean,
   "EquipLocDesc":string,
      /**  If some fields except ToFirm have been updated  */  
   "ExtUpdated":boolean,
      /**   Final Operation – This is scheduled Due Date for either:
1.	Operation on ASM that has Final Operation checkbox selected
2.	If no Operation on ASM has Final Operation selected than use Last Operation on ASM  */  
   "FinalOpDueDate":string,
      /**  If it's Stocked assembly and PlanAsAsm is true.  */  
   "FirmProcEnable":boolean,
      /**  is used to select stocked Job which will be processed by Firming Process instead of Firm check-box. Is available only for .FirmProcEnable = true (in Job Status Maintenance).  */  
   "FirmProcess":boolean,
      /**  Job has at least one assembly with flag Plan as Assembly.  */  
   "HasPlanAsAsm":boolean,
      /**  Depending on the engineered job flag, is the header information enabled?  */  
   "HeaderSensitive":boolean,
      /**  It will allow displaying default of this value from Plant.IgnoreMtlConstraints  */  
   "IgnoreMtlConstraints":boolean,
   "JobTypeName":string,
      /**  If part is backflush the kit time is ignored.  */  
   "KitTime":number,
      /**  Locked Qty Flag  */  
   "LockedQty":boolean,
   "NewMeter":number,
      /**  The old Job Number when JobFirm is changed from no to yes.  */  
   "OldJobNum":string,
      /**  The order qty  */  
   "OrderQty":number,
      /**  Logical field signifying whether JobHead.PartNum is a valid part master part.  */  
   "PartmasterPart":boolean,
   "PhaseDescription":string,
      /**  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  */  
   "PMJob":boolean,
      /**  Process Mode Description  */  
   "ProcessModeDescription":string,
      /**  Receive Time field for Job Part entered on Job  */  
   "ReceiveTime":number,
      /**  Original smart string passed in for configuration  */  
   "SmartString":string,
      /**  If TRUE then this field will mean that the smart string has already been processed  */  
   "SmartStringProcessed":boolean,
   "SOExists":boolean,
   "StockQty":number,
      /**  To be Firmed  */  
   "ToFirm":boolean,
      /**  Description for XRefPartType  */  
   "XRefPartTypeDesc":string,
      /**  The audit change description for the jobaudit record.  */  
   "ChangeDescription":string,
   "ClearDataset":boolean,
      /**  True if more than one co-part exists  */  
   "IsCoPart":boolean,
      /**  The identifier of related Process Manufacturing.  */  
   "PartRevProcessMfgID":string,
      /**  Type of Process Manufacturing.  */  
   "PartRevProcessMfgType":string,
      /**  Determines if the Service Job has to be synchronized with Epicor FSI application.  */  
   "SendToFSA":boolean,
   "BitFlag":number,
   "AnalysisCdDescription":string,
   "CallLineLineDesc":string,
   "DynAttrValueSetDescription":string,
   "DynAttrValueSetShortDescription":string,
   "EquipMeterUOM":string,
   "EquipSerialNum":string,
   "EquipLocID":string,
   "EquipPlant":string,
   "EquipDescription":string,
   "EquipBrand":string,
   "EquipModel":string,
   "EquipCurrentMeter":number,
   "EquipTypeID":string,
   "EquipOEM":string,
   "ExpenseCodeDescription":string,
   "HDCaseDescription":string,
   "IssueTopicID1Description":string,
   "IssueTopicID10Description":string,
   "IssueTopicID2Description":string,
   "IssueTopicID3Description":string,
   "IssueTopicID4Description":string,
   "IssueTopicID5Description":string,
   "IssueTopicID6Description":string,
   "IssueTopicID7Description":string,
   "IssueTopicID8Description":string,
   "IssueTopicID9Description":string,
   "PartNumSalesUM":string,
   "PartNumIUM":string,
   "PartNumTrackLots":boolean,
   "PartNumPartDescription":string,
   "PartNumTrackSerialNum":boolean,
   "PartNumTrackDimension":boolean,
   "PartNumSellingFactor":number,
   "PartNumPricePerCode":string,
   "PartNumTrackInventoryByRevision":boolean,
   "PartNumLocationIDNumReq":boolean,
   "PartNumTrackInventoryAttributes":boolean,
   "PartNumAttrClassID":string,
   "PlantName":string,
   "PlantMaintPlant":string,
   "ProdCodeDescription":string,
   "ProdTeamIDDescription":string,
   "ProdTeamIDName":string,
   "ProjectIDDescription":string,
   "QuoteLineLineDesc":string,
   "QuoteNumCurrencyCode":string,
   "ResTopicID1Description":string,
   "ResTopicID10Description":string,
   "ResTopicID2Description":string,
   "ResTopicID3Description":string,
   "ResTopicID4Description":string,
   "ResTopicID5Description":string,
   "ResTopicID6Description":string,
   "ResTopicID7Description":string,
   "ResTopicID8Description":string,
   "ResTopicID9Description":string,
   "SchedCodeDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobMtlAttchRow{
   "Company":string,
   "JobNum":string,
   "AssemblySeq":number,
   "MtlSeq":number,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobMtlInspRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   "MtlSeq":number,
      /**  A sequence number that uniquely identifies the JobMtlInsp record within the JobNum  */  
   "PlanSeq":number,
      /**  The inspection plan part number (configurator part number).  */  
   "InspPlanPartNum":string,
      /**  The inspection plan revision number (configurator revision number).  */  
   "InspPlanRevNum":string,
      /**  The specification ID.  Must be valid in the SpecHed table.  */  
   "SpecID":string,
      /**  The specification revision number.  Must be valid in the SpecRev table.  */  
   "SpecRevNum":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "SpecHedDescription":string,
   "BitFlag":number,
   "InspPlanDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobMtlRefDesRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   "MtlSeq":number,
      /**  Identifier of Reference Designator  */  
   "RefDes":string,
      /**  Unique identifies the reference designator with the material sequence.  */  
   "RefDesSeq":number,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   "MtlPartNum":string,
      /**  Free form side location. (Top, Bottom, Both, Level, etc)  */  
   "Side":string,
      /**  X Coordinate of the reference designator  */  
   "XLocation":number,
      /**  Y Coordinate of the reference designator  */  
   "YLocation":number,
      /**  Z Coordinate of the reference designator  */  
   "ZLocation":number,
      /**  Rotation of the reference designator. Max value = 360.000  */  
   "Rotation":number,
      /**  Designator Description  */  
   "Description":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobMtlRestrictSubstRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   "MtlSeq":number,
      /**  Restriction Type identification.  */  
   "RestrictionTypeID":string,
      /**  Substance identification.  */  
   "SubstanceID":string,
      /**  Material Weight defaulted from Part Master.  */  
   "Weight":number,
      /**  Material Weight UOM defaulted from Part Master.  */  
   "WeightUOM":string,
      /**  When true then weight is disregarded in compliance roll-up.  */  
   "Manual":boolean,
      /**  The date when exempt status for this substance expires.  */  
   "ExemptDate":string,
      /**  Optional. Exemption certificate.  */  
   "ExemptCertificate":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Read-only. True when exempt date >= today.  */  
   "Exempt":boolean,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   "MtlPartNum":string,
   "BitFlag":number,
   "AssemblySeqDescription":string,
   "JobNumPartDescription":string,
   "RestrictionDescription":string,
   "SubstanceDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobMtlRestrictionRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   "MtlSeq":number,
      /**  Restriction Type identification.  */  
   "RestrictionTypeID":string,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   "MtlPartNum":string,
      /**  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  */  
   "Manual":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  */  
   "Weight":boolean,
   "BitFlag":number,
   "AssemblySeqDescription":string,
   "JobNumPartDescription":string,
   "PartNumTrackLots":boolean,
   "PartNumTrackDimension":boolean,
   "PartNumPricePerCode":string,
   "PartNumTrackSerialNum":boolean,
   "PartNumSalesUM":string,
   "PartNumPartDescription":string,
   "PartNumIUM":string,
   "PartNumSellingFactor":number,
   "RestrictionDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobMtlRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  */  
   "JobComplete":boolean,
      /**  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  */  
   "IssuedComplete":boolean,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   "MtlSeq":number,
      /**  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  */  
   "PartNum":string,
      /**  A description of the material.  */  
   "Description":string,
      /**  Quantity per parent.  Field Service was EstQty in FSCallMt.  */  
   "QtyPer":number,
      /**  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  */  
   "RequiredQty":number,
      /**  Internal unit of measure.  The unit used to measure the material.  */  
   "IUM":string,
      /**   Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.
When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  */  
   "LeadTime":number,
      /**   A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.
It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  */  
   "RelatedOperation":number,
      /**  The material burden rate for this Job Material.  */  
   "MtlBurRate":number,
      /**  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  */  
   "EstMtlBurUnitCost":number,
      /**  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  */  
   "EstUnitCost":number,
      /**  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  */  
   "IssuedQty":number,
      /**  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  */  
   "TotalCost":number,
      /**  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  */  
   "MtlBurCost":number,
      /**  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  */  
   "ReqDate":string,
      /**  The warehouse that the material is allocated against.  */  
   "WarehouseCode":string,
      /**  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  */  
   "SalvagePartNum":string,
      /**  Description of Salvageable material.  Use Part.Description for a default.  */  
   "SalvageDescription":string,
      /**  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  */  
   "SalvageQtyPer":number,
      /**  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  */  
   "SalvageUM":string,
      /**  The salvage material burden rate for this Job Material.  */  
   "SalvageMtlBurRate":number,
      /**  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  */  
   "SalvageUnitCredit":number,
      /**  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  */  
   "SalvageEstMtlBurUnitCredit":number,
      /**  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  */  
   "SalvageQtyToDate":number,
      /**  Total salvage credit to date.  A summary of salvage receipt transactions.  */  
   "SalvageCredit":number,
      /**  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  */  
   "SalvageMtlBurCredit":number,
      /**   Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.
View as editor widget.  */  
   "MfgComment":string,
      /**  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  */  
   "VendorNum":number,
      /**  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  */  
   "PurPoint":string,
      /**  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  */  
   "BuyIt":boolean,
      /**  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  */  
   "Ordered":boolean,
      /**   Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.
View as editor widget.  */  
   "PurComment":string,
      /**   Indicates if this material will be backflushed.
Note: this field is defaulted from Part.BackFlush
Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  */  
   "BackFlush":boolean,
      /**  Estimated Scrap.  */  
   "EstScrap":number,
      /**  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  */  
   "EstScrapType":string,
      /**  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  */  
   "FixedQty":boolean,
      /**  Characters used on the drawing to show where material is used.  */  
   "FindNum":string,
      /**  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  */  
   "RevisionNum":string,
      /**  Controls if an alert is to be sent when this JobMtl is completed.  */  
   "SndAlrtCmpl":boolean,
      /**  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  */  
   "RcvInspectionReq":boolean,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  */  
   "Direct":boolean,
      /**  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  */  
   "MaterialMtlCost":number,
      /**  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   "MaterialLabCost":number,
      /**  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   "MaterialSubCost":number,
      /**  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   "MaterialBurCost":number,
      /**  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   "SalvageMtlCredit":number,
      /**  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   "SalvageLbrCredit":number,
      /**  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   "SalvageBurCredit":number,
      /**  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   "SalvageSubCredit":number,
      /**   Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler.
'I' to ignore in eScheduler
'M' to treat at Material in eScheduler
'A' to treat as AddResType in eScheduler  */  
   "APSAddResType":string,
      /**  The service call that this Material belongs to.  */  
   "CallNum":number,
      /**  The Service Call Line that this material relates to.  */  
   "CallLine":number,
      /**  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   "ProdCode":string,
      /**  FS - Unit Price for the Material in base currency.  */  
   "UnitPrice":number,
      /**  FS - Billable Unit Price for the Material in base currency.  */  
   "BillableUnitPrice":number,
      /**  FS - Billable Price per unit for the material in customers currency.  */  
   "DocBillableUnitPrice":number,
      /**  Problem reason code from the reason master table. type Service call.  */  
   "ResReasonCode":string,
      /**  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  */  
   "PricePerCode":string,
      /**  Is this a billable material item.  */  
   "Billable":boolean,
      /**  Holds the quantity of the item that has been shipped through misc.  shipments  */  
   "ShippedQty":number,
      /**  FS - Unit Price for the Material in Customer currency.  */  
   "DocUnitPrice":number,
      /**  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  */  
   "QtyStagedToDate":number,
      /**  This material was added after initial setup of the job  */  
   "AddedMtl":boolean,
      /**  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  */  
   "MiscCharge":boolean,
      /**  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  */  
   "MiscCode":string,
      /**  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  */  
   "SCMiscCode":string,
      /**  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  */  
   "RFQNeeded":boolean,
      /**  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  */  
   "RFQVendQuotes":number,
      /**  RFQ number that the item is linked to.  */  
   "RFQNum":number,
      /**  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  */  
   "RFQLine":number,
      /**   RFQ Status.
W= Waiting, A = Accepted, R = Requested, C = Received  */  
   "RFQStat":string,
      /**  Analysis Code  */  
   "AnalysisCode":string,
      /**  Global RFQ flag.  Used in Consolidated Purchasing.  */  
   "GlbRFQ":boolean,
      /**  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  */  
   "WhseAllocFlag":boolean,
      /**  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  */  
   "WIReqDate":string,
      /**  Reporting currency value of this field  */  
   "Rpt1BillableUnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt2BillableUnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt3BillableUnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt1UnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt2UnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt3UnitPrice":number,
      /**   Required Quantity in the Parts Base UOM.  Set by the system by doing a UOM conversion of the JobMtl.RequiredQty which is in the UOM of the requirement to the JobMtl.BaseUOM which is the UOM of the Part and it's unit costs.
This quantity multiplied by the JobMtl.EstMtlUnitCost is used to update the total estimated costs found in JobAsmbl.TLEMaterialCost  */  
   "BaseRequiredQty":number,
      /**   Unit of Measure of the JobMtl.BaseRequiredQty.
If valid part, then it is the Parts Primary Inventory UOM otherwise it is the same as JobMtl.IUM  */  
   "BaseUOM":string,
      /**  Material Weight defaulted from Part Master.  */  
   "Weight":number,
      /**  Material Weight UOM defaulted from Part Master.  */  
   "WeightUOM":string,
      /**  Required number of designators  */  
   "ReqRefDes":number,
      /**  Base Part Number. Used in the configurator to identify the configurator part Number.  */  
   "BasePartNum":string,
      /**  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  */  
   "BaseRevisionNum":string,
      /**  Indicates if the job material is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  */  
   "SelectForPicking":boolean,
      /**  The job pick "Staging" warehouse for the job material.  Defaults from the system default warehouse (PlantConfCtrl.DefJobPickWhse).  */  
   "StagingWarehouseCode":string,
      /**  The job pick "Staging" bin for the job material.  Defaults from the system default bin (PlantConfCtrl.DefJobPickBin).  */  
   "StagingBinNum":string,
      /**   A non blank character indicates that the release could not be picked by the Auto Pick process.
The possible values are;
"L" - Order Line can't be shipped complete.
"O" - Order can't be shipped complete.
"I" - Insufficient quantity reserved
"Z" - Zero quantity reserved.  */  
   "PickError":string,
      /**   Estimated Material Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   "EstMtlUnitCost":number,
      /**   Estimated Labor Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   "EstLbrUnitCost":number,
      /**   Estimated Burden Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   "EstBurUnitCost":number,
      /**   Estimated Subcontract Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   "EstSubUnitCost":number,
      /**   Estimated Salvage Material Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   "SalvageEstMtlUnitCredit":number,
      /**   Estimated Salvage Labor Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   "SalvageEstLbrUnitCredit":number,
      /**   Estimated Salvage Burden Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   "SalvageEstBurUnitCredit":number,
      /**   Estimated Salvage Subcontract Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   "SalvageEstSubUnitCredit":number,
      /**  The material quantity that has been loaned out to another job.  */  
   "LoanedQty":number,
      /**  The material quantity that has been borrowed from another job.  */  
   "BorrowedQty":number,
      /**  flag used to designate if the serial numbers from the job material/subassembly can be reassigned as the serial number of the parent assembly (top assembly or n deep subassembly) being reworked using a job.  */  
   "ReassignSNAsm":boolean,
      /**  GeneralPlanInfo  */  
   "GeneralPlanInfo":string,
      /**  EstStdDescription  */  
   "EstStdDescription":string,
      /**  PricingUOM  */  
   "PricingUOM":string,
      /**  RemovedFromPlan  */  
   "RemovedFromPlan":boolean,
      /**  IsPOCostingMaintained  */  
   "IsPOCostingMaintained":boolean,
      /**  EstStdType  */  
   "EstStdType":number,
      /**  POCostingFactor  */  
   "POCostingFactor":number,
      /**  PlannedQtyPerUnit  */  
   "PlannedQtyPerUnit":number,
      /**  POCostingDirection  */  
   "POCostingDirection":number,
      /**  POCostingUnitVal  */  
   "POCostingUnitVal":number,
      /**  GroupSeq  */  
   "GroupSeq":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  */  
   "OrigStructTag":string,
      /**  By storing the original Group Sequence of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  */  
   "OrigGroupSeq":number,
      /**  ShowStatusIcon  */  
   "ShowStatusIcon":string,
      /**  ContractID  */  
   "ContractID":string,
      /**  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  */  
   "LinkToContract":boolean,
      /**  Stores the lot number of the material in the Staging Warehouse/Bin.  */  
   "StagingLotNum":string,
      /**  PCLinkRemoved  */  
   "PCLinkRemoved":boolean,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   "ExternalMESSyncRequired":boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   "ExternalMESLastSync":string,
      /**  Controls if this material record is viewable in Location Management or the web.  */  
   "LocationView":boolean,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  Planning number of pieces for this attribute set.  */  
   "PlanningNumberOfPieces":number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "SalvageAttributeSetID":number,
      /**  Salvage planning number of pieces for this attribute set.  */  
   "SalvagePlanningNumberOfPieces":number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "SalvagePlanningAttributeSetID":number,
      /**  The identification of related StageNo.  */  
   "RelatedStage":string,
      /**  Revision number which is used to uniquely identify the revision of the part.  */  
   "SalvageRevisionNum":string,
      /**  Indicates if the job material should be added or removed from the fulfillment queue.  */  
   "PartAllocQueueAction":string,
      /**  This flag indicates if the job material is ready to be fulfilled.  */  
   "ReadyToFulfill":boolean,
      /**  Currency Code of the related record  */  
   "CurrencyCode":string,
      /**  The currency switch flag  */  
   "CurrencySwitch":boolean,
      /**  A symbol that identifies the currency. Used on Forms and displays  */  
   "CurrSymbol":string,
      /**  The display of extended price.  */  
   "DisplayExtPrice":number,
      /**  The display unit price.  */  
   "DisplayUnitPrice":number,
      /**  The document display extended price  */  
   "DocDisplayExtPrice":number,
      /**  The document display extended price  */  
   "DocDisplayUnitPrice":number,
      /**  BuyIt field for display in the UI.  */  
   "dspBuyIt":boolean,
      /**  Display IUM (readonly)  */  
   "DspIUM":string,
      /**  Should the backflush field be enabled?  */  
   "EnableBackflush":boolean,
      /**  Field used to determine if there is security on JobMtl.BuyIt. If there is a row rule will disable the dspBuyIt.  */  
   "EnableBuyIt":boolean,
      /**  flag to determine whether the Configure Option should be enabled.  */  
   "EnableConfigure":boolean,
      /**  flag to determine whether the Make Direct field should be enabled.  */  
   "EnableDirect":boolean,
      /**  This external field is used as a flag to determine when to enable/disable the FixedQty field according to the rules of Serial numbers design.  */  
   "EnableFixedQty":boolean,
   "EnableMtlSalvage":boolean,
   "EnablePurDir":boolean,
      /**  Field to determine if the the RcvInspectionReq field should be enabled or disabled.  */  
   "EnableRcvInspReq":boolean,
      /**  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  */  
   "EnableSndAlrtCmpl":boolean,
      /**  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  */  
   "EnableSplitCosts":boolean,
      /**  RequiredQty * EstUnitCost - RequiredQty * SalvageQtyPer * SalvageUnitCredit  */  
   "EstCost":number,
      /**  The name of the calling program  */  
   "IPCaller":string,
      /**  IsBaseCurrency  */  
   "IsBaseCurrency":boolean,
   "IsMtlConfigurationOn":boolean,
   "IsMtlConfigureOn":boolean,
   "IsMtlExtConfig":boolean,
      /**  IsMtlRevisionApproved  */  
   "IsMtlRevisionApproved":boolean,
      /**  Internal flag to identify if current Part is an Inventory Part.  */  
   "PartExists":boolean,
      /**  Calculated field gets list of available Sites  */  
   "PlantList":string,
      /**  Price Per Code Description  */  
   "PricePerCodeDescription":string,
      /**  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  */  
   "RDEndNum":number,
      /**  The prefix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  */  
   "RDPrefix":string,
      /**  This number will be used to create reference designators. This field will be defaulted to ?1?  */  
   "RDStartNum":number,
      /**  The suffix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  */  
   "RDSuffix":string,
      /**  The description of the related operation  */  
   "RelatedOperationDesc":string,
      /**  Logical used to determine if record is created from PO Entry.  */  
   "RetainValues":boolean,
   "Rpt1DisplayExtPrice":number,
   "Rpt1DisplayUnitPrice":number,
   "Rpt2DisplayExtPrice":number,
   "Rpt2DisplayUnitPrice":number,
   "Rpt3DisplayExtPrice":number,
   "Rpt3DisplayUnitPrice":number,
      /**  BaseUOM for SalvagePartNum  */  
   "SalvageBaseUOM":string,
      /**  Satatus of InspectionRequired image on JobMaterial form.  */  
   "ShowInspRqdImg":boolean,
      /**  Added for UI Framework?  This flags the material as being a "SubContract" or an "Internal" material.  */  
   "SubContract":boolean,
      /**  Can the backflush be unchecked?  */  
   "AllowBackflushUncheck":boolean,
   "EnableAttributeSetSearch":boolean,
   "EnableSalvageAttributeSetSearch":boolean,
      /**  Number of pieces for inventory attribute tracked parts  */  
   "PlanningNumberOfPiecesDisp":number,
      /**  Number of pieces for inventory attribute tracked parts.  */  
   "SalvagePlanningNumberOfPiecesDisp":number,
      /**  Indicates if unit price calculation should occur.  When false the unit price will be calculated.  When false the unit price will remain its current value.  */  
   "SkipUnitPriceCalc":boolean,
      /**  Error Status Display  */  
   "ErrorStatusDisplay":string,
      /**  True if this job material is in the fulfillment queue.  */  
   "InPartAllocQueue":boolean,
      /**  Show Fulfillment Queue Actions  */  
   "ShowFulfillmentQueueActions":boolean,
      /**  Indicates this row is selected for action.  */  
   "SelectedForAction":boolean,
      /**  The allocated quantity for this job material.  */  
   "AllocatedQty":number,
      /**  The reserved quantity for this job material.  */  
   "ReservedQty":number,
      /**  The available quantity for this job material.  */  
   "AvailableQty":number,
   "BitFlag":number,
   "AnalysisCdDescription":string,
   "AssemblySeqPartNum":string,
   "AssemblySeqDescription":string,
   "CallLineLineDesc":string,
   "DynAttrValueSetDescription":string,
   "DynAttrValueSetShortDescription":string,
   "JobNumPartDescription":string,
   "JobNumPartNum":string,
   "MiscCodeDescription":string,
   "PartNumTrackInventoryAttributes":boolean,
   "PartNumTrackInventoryByRevision":boolean,
   "PartNumAttrClassID":string,
   "PartNumTrackLots":boolean,
   "PartNumIUM":string,
   "PartNumPricePerCode":string,
   "PartNumTrackDimension":boolean,
   "PartNumTrackSerialNum":boolean,
   "PartNumPartDescription":string,
   "PartNumSellingFactor":number,
   "PartNumSalesUM":string,
   "PlantName":string,
   "ProdCodeDescription":string,
   "PurMiscCodeDescription":string,
   "PurMiscCodeLCAmount":number,
   "PurMiscCodeLCDisburseMethod":string,
   "PurMiscCodeLCCurrencyCode":string,
   "ReasonDescription":string,
   "RFQLineLineDesc":string,
   "SalvageAttributeSetIDDescription":string,
   "SalvageAttributeSetIDShortDescription":string,
   "SalvagePartNumPartDescription":string,
   "SalvagePartNumPricePerCode":string,
   "SalvagePartNumTrackInventoryByRevision":boolean,
   "SalvagePartNumTrackSerialNum":boolean,
   "SalvagePartNumTrackDimension":boolean,
   "SalvagePartNumTrackInventoryAttributes":boolean,
   "SalvagePartNumAttrClassID":string,
   "SalvagePartNumSellingFactor":number,
   "SalvagePartNumTrackLots":boolean,
   "SalvagePartNumSalesUM":string,
   "SalvagePartNumIUM":string,
   "SCMiscCodeDescription":string,
   "StageNoDescription":string,
   "VendorNumTermsCode":string,
   "VendorNumVendorID":string,
   "VendorNumZIP":string,
   "VendorNumAddress2":string,
   "VendorNumDefaultFOB":string,
   "VendorNumCountry":string,
   "VendorNumState":string,
   "VendorNumAddress3":string,
   "VendorNumCurrencyCode":string,
   "VendorNumAddress1":string,
   "VendorNumCity":string,
   "VendorNumName":string,
   "VendorPPState":string,
   "VendorPPAddress2":string,
   "VendorPPCountry":string,
   "VendorPPPrimPCon":number,
   "VendorPPZip":string,
   "VendorPPCity":string,
   "VendorPPAddress1":string,
   "VendorPPAddress3":string,
   "VendorPPName":string,
   "WarehouseCodeDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOpDtlRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  Associates the record back to the JobHead.  */  
   "JobNum":string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  Assigned by the system.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the JobOper record within the JobAsmbl.   System assigned.  */  
   "OprSeq":number,
      /**  Uniquely identifies an OpDtl.  System assigned.  */  
   "OpDtlSeq":number,
      /**  Identifies which part of the production, setup or production, the resource is required for.   Valid values are "S", indicating the resource is RequiredFor the Setup phase of this operation, "P" for Production phase, or "B" meaning Both setup and production phase.  */  
   "SetupOrProd":string,
      /**  The user can select the capability the operation is to perform.  The system will select the resource.  */  
   "CapabilityID":string,
      /**  The user can select a Resource Group for the operation to be performed on.  The system will select the actual resource.  */  
   "ResourceGrpID":string,
      /**  Descriptive code assigned by the user to uniquely identify the Resource for this operation to be performed on.  If a resource was not explicitly assigned this field is blank.  */  
   "ResourceID":string,
      /**  Concurrent Capacity is a constraint that prevents a Resource from being overloaded because it has, at a given time, this much capacity.  For example, a Resource has 4 racks, and they can be reused, but once they've been selected for an operation, they're tied up until the operation is complete.  */  
   "ConcurrentCapacity":number,
      /**  The Daily Prod rate contains the rate required to make 1. This is multiplied with the mfg qty of the job to get the total production qty. This total is then compared to the resource's daily production quantity  and with any usage stored in the Shopload record.   Once the production limit for a resource has been reached, the Resource has been consumed for that day.  */  
   "DailyProdRate":number,
      /**  This is the number of resources the operation can run on.  If multiple resources can perform the required Capability, then up to this many will be employed.  This determines the number of setups the system will allow for the operation.  However, the number of setups cannot exceed the number of operations.  The idea being that once a part is on a machine you will complete the operation on that resource.  */  
   "NumResources":number,
      /**  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  */  
   "EstSetHours":number,
      /**   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.
FORMULAS:
If StdFormat = "HR" then EstProdHours = ProdStandard. 
If StdFormat = "PH" then (JobOper.RunQty / Std).
If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.
If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.
If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.
If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.
If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  */  
   "EstProdHours":number,
      /**   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.
NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  */  
   "ProdStandard":number,
      /**   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;
"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,
"PM" - Pieces/Minute, "OH" - Operations/Hour,
"OM"  - Operations/minute, HR - Fixed Hours.  */  
   "StdFormat":string,
      /**   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.
This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  */  
   "StdBasis":string,
      /**  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  */  
   "OpsPerPart":number,
      /**  Labor rate used for estimated production labor costs. Default from the OpMasDtl.ProdLabRate.  */  
   "ProdLabRate":number,
      /**  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  */  
   "SetupLabRate":number,
      /**  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  */  
   "ProdBurRate":number,
      /**  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  */  
   "SetupBurRate":number,
      /**  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  */  
   "ProdComplete":boolean,
      /**  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  */  
   "SetupComplete":boolean,
      /**  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  */  
   "ActProdHours":number,
      /**  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   "ActProdRwkHours":number,
      /**  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  */  
   "ActSetupHours":number,
      /**  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   "ActSetupRwkHours":number,
      /**  Setup function percent complete.  Maintained via labor entry.  */  
   "SetupPctComplete":number,
      /**  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  */  
   "ActBurCost":number,
      /**   Total of ALL labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.
The Total Cost, updated via the receipt process.  */  
   "ActLabCost":number,
      /**  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  */  
   "ReworkBurCost":number,
      /**  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup and Production. Updated via the LaborDtl\Write.p trigger.  */  
   "ReworkLabCost":number,
      /**  Resource Lock.  If the user explicitly selected a Resource for the JobOpDtl, when they accept the scheduling changes, the WISchedResource will be stored as the explicit Resource.  Else the WISchedResource will become the SchedResource and the WISchedResourceGrp will become the ResourceGroup.  */  
   "ResourceLock":boolean,
      /**  System maintained.  Date the JobOpDtl record was added to the database.  */  
   "SysCreateDate":string,
      /**  Time in seconds since midnight that the system created the record.  */  
   "SysCreateTime":number,
      /**  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  */  
   "OpDtlDesc":string,
      /**   The estimated set up hours per machine.
Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  */  
   "EstSetHoursPerMch":number,
      /**  If yes then the user has overridden the rates that were on the  record when it was inititally created.  The initial rates came from the master files.  */  
   "OverrideRates":boolean,
      /**  Duplicated from JobOper.SetupCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  */  
   "ProdCrewSize":number,
      /**  Duplicated from JobOper.SetupCrewSize. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  */  
   "SetUpCrewSize":number,
      /**  RemovedFromPlan  */  
   "RemovedFromPlan":boolean,
      /**  IsPrimaryProd  */  
   "IsPrimaryProd":boolean,
      /**  IsPrimarySetup  */  
   "IsPrimarySetup":boolean,
      /**  AutoSystemAdded  */  
   "AutoSystemAdded":boolean,
      /**  MobileAllocatedResource  */  
   "MobileAllocatedResource":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  */  
   "QtyPerCycle":number,
      /**  Capability Description  */  
   "CapabilityDesc":string,
      /**  The Operation Standard ID stored in JobOper.  */  
   "OperOpStdID":string,
      /**  Indicates if primary production operation.  */  
   "PrimaryProd":boolean,
      /**  Indicates if primary setup operation.  */  
   "PrimarySetup":boolean,
      /**  Resource Group Description  */  
   "ResourceGrpDesc":string,
      /**  Scheduled Resource Description  */  
   "SchedResourceDesc":string,
      /**  Scheduled Resource Group Description  */  
   "SchedResourceGrpDesc":string,
      /**  flag for subcontract  */  
   "SubContract":boolean,
      /**  What-if Scheduled Resource Description  */  
   "WISchedResourceDesc":string,
      /**  What-if Scheduled Resource Group Description  */  
   "WISchedResourceGrpDesc":string,
      /**  Resource Description  */  
   "ResourceDesc":string,
   "BitFlag":number,
   "AssemblySeqDescription":string,
   "CapabilityIDDescription":string,
   "JobNumPartDescription":string,
   "ResourceGrpIDDescription":string,
   "ResourceIDDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperActionParamRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  A sequence number which uniquely identifies the assembly record within the method.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the operation record within the method.  */  
   "OprSeq":number,
      /**  A sequence number which uniquely identifies action record within the operation set.  */  
   "ActionSeq":number,
      /**  A sequence number which uniquely identifies parameter within the Operation/Action set.  */  
   "ActionParamSeq":number,
      /**  Data type of Action Parameter.  */  
   "ActionParamFieldDataType":string,
      /**  Value of Action Parameter.  */  
   "ActionParamValueCharacter":string,
      /**  Value of Action Parameter.  */  
   "ActionParamValueDate":string,
      /**  Value of Action Parameter.  */  
   "ActionParamValueDecimal":number,
      /**  Value of Action Parameter.  */  
   "ActionParamValueInteger":number,
      /**  Value of Action Parameter.  */  
   "ActionParamValueLogical":boolean,
      /**  SysRevID  */  
   "SysRevID":number,
      /**  SysRowID  */  
   "SysRowID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperActionRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  A sequence number which uniquely identifies the assembly record within the method.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the operation record within the method.  */  
   "OprSeq":number,
      /**  A sequence number which uniquely identifies action record within the operation set.  */  
   "ActionSeq":number,
      /**  Description of Action.  */  
   "ActionDesc":string,
      /**  Indicated if this action must be completed before Operation can be completed.  */  
   "Required":boolean,
      /**  Indicates if this Action was completed.  */  
   "Completed":boolean,
      /**  The number of the employee that performed the work.  */  
   "CompletedBy":string,
      /**  Date the Action was completed.  */  
   "CompletedOn":string,
      /**  SysRevID  */  
   "SysRevID":number,
      /**  SysRowID  */  
   "SysRowID":string,
   "BitFlag":number,
   "EmpBasicName":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperAttchRow{
   "Company":string,
   "JobNum":string,
   "AssemblySeq":number,
   "OprSeq":number,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperInspRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly sequence number that this material is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the operation record within the Job.  */  
   "OprSeq":number,
      /**  A sequence number that uniquely identifies the JobOperInsp record within the JobNum  */  
   "PlanSeq":number,
      /**  The inspection plan part number (configurator part number).  */  
   "InspPlanPartNum":string,
      /**  The inspection plan revision number (configurator revision number).  */  
   "InspPlanRevNum":string,
      /**  The specification ID.  Must be valid in the SpecHed table.  */  
   "SpecID":string,
      /**  The specification revision number.  Must be valid in the SpecRev table.  */  
   "SpecRevNum":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "SpecHedDescription":string,
   "BitFlag":number,
   "InspPlanDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperMachParamRow{
      /**  Company  */  
   "Company":string,
      /**  JobNum  */  
   "JobNum":string,
      /**  AssemblySeq  */  
   "AssemblySeq":number,
      /**  OprSeq  */  
   "OprSeq":number,
      /**  MachParamSeq  */  
   "MachParamSeq":number,
      /**  RequestCode  */  
   "RequestCode":string,
      /**  MachineNum  */  
   "MachineNum":string,
      /**  ToolNum  */  
   "ToolNum":string,
      /**  PartNum  */  
   "PartNum":string,
      /**  ParamNum  */  
   "ParamNum":number,
      /**  ParamUpperLimit  */  
   "ParamUpperLimit":number,
      /**  ParamNominalValue  */  
   "ParamNominalValue":number,
      /**  ParamLowerLimit  */  
   "ParamLowerLimit":number,
      /**  ParamDelayValue  */  
   "ParamDelayValue":number,
      /**  SpecEnable  */  
   "SpecEnable":boolean,
      /**  SpecControlAlarm  */  
   "SpecControlAlarm":boolean,
      /**  SpecRunAlarm  */  
   "SpecRunAlarm":boolean,
      /**  ProcSpecAlarm  */  
   "ProcSpecAlarm":boolean,
      /**  ProcControlAlarm  */  
   "ProcControlAlarm":boolean,
      /**  PartQualSpecEnable  */  
   "PartQualSpecEnable":boolean,
      /**  PartQualControlEnable  */  
   "PartQualControlEnable":boolean,
      /**  CreatedBy  */  
   "CreatedBy":string,
      /**  CreatedOn  */  
   "CreatedOn":string,
      /**  ChangedBy  */  
   "ChangedBy":string,
      /**  ChangedOn  */  
   "ChangedOn":string,
      /**  SysRevID  */  
   "SysRevID":number,
      /**  SysRowID  */  
   "SysRowID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperRestrictSubstRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number  */  
   "JobNum":string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   "OprSeq":number,
      /**  Restriction Type identification.  */  
   "RestrictionTypeID":string,
      /**  Substance identification.  */  
   "SubstanceID":string,
      /**  Default weight of the substance per primary part of UOM  */  
   "Weight":number,
      /**  By default the primary UOM of the part.  */  
   "WeightUOM":string,
      /**  When true then weight is disregarded in compliance roll-up.  */  
   "Manual":boolean,
      /**  The date when exempt status for this substance expires.  */  
   "ExemptDate":string,
      /**  Optional. Exemption certificate.  */  
   "ExemptCertificate":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Read-only. True when exempt date >= today.  */  
   "Exempt":boolean,
      /**  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  */  
   "OpCode":string,
   "BitFlag":number,
   "AssemblySeqDescription":string,
   "JobNumPartDescription":string,
   "RestrictionDescription":string,
   "SubstanceDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperRestrictionRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number  */  
   "JobNum":string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   "OprSeq":number,
      /**  Restriction Type identification.  */  
   "RestrictionTypeID":string,
      /**  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  */  
   "OpCode":string,
      /**  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  */  
   "Manual":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  */  
   "Weight":boolean,
   "BitFlag":number,
   "AssemblySeqDescription":string,
   "JobNumPartDescription":string,
   "RestrictionDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobOperRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobOper records are also marked.  This is used to make database access to open operation records more efficient.  */  
   "JobComplete":boolean,
      /**   Indicates if this operation is completed. This is normally set to complete via labor entry transactions.   Not maintainable by Job Entry. It can't be reset to "No" if the JobHead.Complete = Yes.
Labor entry setting logic is: If SetUpComplete = Yes and  EstProdHours = 0 or ProdComplete = Yes and EstSetHours = 0 or both ProdComplete = Yes and SetupComplete = Yes  then OpComplete = Yes.
This field is also set by PO receipt entry "issue complete" for subcontract operations.  */  
   "OpComplete":boolean,
      /**  Job Number  */  
   "JobNum":string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   "OprSeq":number,
      /**  Operation Master Code - Links the JobOper  record with a OpMaster record.  Default is given from WrkCenter.OpCode.  Must be valid in the OpMaster file.  */  
   "OpCode":string,
      /**   The Operation standard ID.  This links the JobOper to the OpStd master file.  This can be blank or if entered must be valid if entered.  When this field is changed the ProdStandard, StdFormat and StdBasis should be refreshed with the new defaults.
Valid for "inside operations" only.  */  
   "OpStdID":string,
      /**  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  */  
   "EstSetHours":number,
      /**   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.
FORMULAS:
If StdFormat = "HR" then EstProdHours = ProdStandard. 
If StdFormat = "PH" then (JobOper.RunQty / Std).
If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.
If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.
If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.
If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.
If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  */  
   "EstProdHours":number,
      /**   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.
NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  */  
   "ProdStandard":number,
      /**   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;
"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,
"PM" - Pieces/Minute, "OH" - Operations/Hour,
"OM"  - Operations/minute, HR - Fixed Hours.  */  
   "StdFormat":string,
      /**   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.
This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  */  
   "StdBasis":string,
      /**  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  */  
   "OpsPerPart":number,
      /**  Production Quantity per one of the Parent Item.  */  
   "QtyPer":number,
      /**  Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  */  
   "QueStartDate":string,
      /**  Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   "QueStartHour":number,
      /**  Scheduled production start date. Not directly maintainable, updated via the scheduling process.  */  
   "StartDate":string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  */  
   "StartHour":number,
      /**  Scheduled production due date. Not directly maintainable, updated via the scheduling process.  */  
   "DueDate":string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  */  
   "DueHour":number,
      /**  Scheduled move due date. Not directly maintainable, updated via the scheduling process.  */  
   "MoveDueDate":string,
      /**  Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   "MoveDueHour":number,
      /**  Labor rate used for estimated production labor costs. Default from the OpMaster.ProdLabRate.  */  
   "ProdLabRate":number,
      /**  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  */  
   "SetupLabRate":number,
      /**  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  */  
   "ProdBurRate":number,
      /**  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  */  
   "SetupBurRate":number,
      /**  This indicates if this is an "added operation". An added operation is one that was not planned on.  */  
   "AddedOper":boolean,
      /**  Defaulted from the WrkCenter.SchMachines field. This is the number of machines that this operation will run on at the same time. Logically thought of as a "Squeeze factor" to scheduling. That is the more machines, the shorter the schedule. This affects how much of the total daily workcenter capacity that the operation will consume. For example; Center has 4 machines, 8 Hours per day and operation 2 machines. This operation would consume 16 hours of capacity per day. So if it had 32 hours of estimated production it would schedule as taking 2 days. NOTE THIS ONLY APPLIES TO PRODUCTION HOURS, TOTAL SETUP HOURS ARE ADDED TO THE SQUEEZED PRODUCTION HOURS TO GET THE NUMBER OF HOURS TO BE SCHEDULED. It is however used to calculate the total setup hours on the operation.  */  
   "Machines":number,
      /**  Defaulted from the WrkCenter.SetUpCrewSize field. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  */  
   "SetUpCrewSize":number,
      /**  Defaults from the WrkCenter.ProdCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  */  
   "ProdCrewSize":number,
      /**  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  */  
   "ProdComplete":boolean,
      /**  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  */  
   "SetupComplete":boolean,
      /**  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  */  
   "ActProdHours":number,
      /**  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   "ActProdRwkHours":number,
      /**  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  */  
   "ActSetupHours":number,
      /**  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   "ActSetupRwkHours":number,
      /**   For Non Subcontract operations: A summary of labor transaction detail. (LaborDtl.LaborQty). Labor entry/collection maintains this field.  Only the LaborQty for transactions that are Production labor ( LaborType = P ) and Not rework (LaborDtl.Rework = No) are included in this summary.
This quantity is used to reduce shop load when the system is configured to reduce load based on quantity completed. (JCSyst.RemoveLoad = Q)
For Subcontract Operations this field is updated by the Purchased Receipt process. The detail records are in the PartTran file.  */  
   "QtyCompleted":number,
      /**  Setup function percent complete.  Maintained via labor entry.  */  
   "SetupPctComplete":number,
      /**  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  */  
   "EstScrap":number,
      /**  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  */  
   "EstScrapType":string,
      /**  This flags the operation as being a "SubContract" or an "Internal" operation.  This also controls what fields are allowed to be updated for this record. For example,  an internal operation will not have a PartNum.  */  
   "SubContract":boolean,
      /**  Inventory UOM  */  
   "IUM":string,
      /**  Estimated Unit Cost for the SubContract operation.  Defaults from the Part table if valid PartNum.  */  
   "EstUnitCost":number,
      /**  Hours required is calculated as days * 8.  */  
   "DaysOut":number,
      /**  The PartNum to be shipped to the subcontract. Default the JobHead.PartNum or JobAsmbl.PartNum depending on the JobMtl.AssemblySeq.  */  
   "PartNum":string,
      /**  Description used only for subcontract operations  */  
   "Description":string,
      /**  The SubContractors VendorNum that ties back to the Vendor master file.  This is only valid for "SubContract"  operations. This field is not directly maintainable, instead its assigned by having the user either enter the "VendorID" and then finding the VendorNum in the Vendor file or by  selection list processing.  This is a mandatory entry for subcontract operations.  */  
   "VendorNum":number,
      /**  The Vendors purchase point ID. This field is only for the "Subcontract" operations. Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default Purchase point defined in the Vendor file.  */  
   "PurPoint":string,
      /**  Editor widget for Job operation comments.  */  
   "CommentText":string,
      /**   Indicates the scheduling relationship between this and the preceding  operation. Possible values are "SS" - Start to Start, "FS" Finish to Start or "FF" Finish to Finish.
A "SS" can start when the preceding operation starts.
A "FS" starts when the preceding operation is finished.
A "FF" can finish when the preceding operation finishes.
These relationships do not span between levels of assemblies. The first operation on an assembly is always treated as being "FS" relationship.
A "FF" finishes when the preceding operation is finished.  */  
   "SchedRelation":string,
      /**   The total operation quantity. This is a calculated field.  Calculated as (Assembly Required Qty X QtyPer) + Scrap. The assembly qty is either the JobHead.ProdQty if  JobOPer.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobOPer.AssemblySeq > 0.
This value is refreshed when maintenance is performed on the operation record or an assemblies production qty is changed  */  
   "RunQty":number,
      /**   This field is blank or contains the UserID. When not blank it indicates that the operations schedule has been changed and is considered as being in a "What If" mode.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   "WIName":string,
      /**  This is the What-If number of machines that this operation will run on at the same time.  Setup by and for scheduling from the Machines field.  */  
   "WIMachines":number,
      /**  What-if Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  */  
   "WIQueStartDate":string,
      /**  What-if Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   "WIQueStartHour":number,
      /**  What if Scheduled production start date. Not directly maintainable, updated via the scheduling process.  */  
   "WIStartDate":string,
      /**  This field is established by scheduling. It represents the What If "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  */  
   "WIStartHour":number,
      /**  What If Scheduled production due date. Not directly maintainable, updated via the scheduling process.  */  
   "WIDueDate":string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  */  
   "WIDueHour":number,
      /**  What-If Scheduled move due date. Not directly maintainable, updated via the scheduling process.  */  
   "WIMoveDueDate":string,
      /**  What-if Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   "WIMoveDueHour":number,
      /**  The Number of Hours per machine per day that this operations "What If" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining ShopLoad records.  */  
   "WIHoursPerMachine":number,
      /**  Date at which the operations current outstanding "What-If" load starts at.  Updated by the JobOper write trigger. (See LoadDate)  */  
   "WILoadDate":string,
      /**  "Hour offset from the beginning of the work day" for the operations outstanding "What-If"  load. Related to WILoadDate.  */  
   "WILoadHour":number,
      /**  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  */  
   "ActBurCost":number,
      /**   FOR NON-SUBCONTRACT OPERATIONS: Total of "ALL" labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.
FOR SUBCONTRACT OPERATIONS: The Total Cost, updated via the receipt process.  */  
   "ActLabCost":number,
      /**  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  */  
   "ReworkBurCost":number,
      /**  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup & Production. Updated via the LaborDtl\Write.p trigger.  */  
   "ReworkLabCost":number,
      /**   A total additional charge that is incurred when purchasing this service. Ex(Lot,Setup,Handling,etc...).
Defaulted from VendPart.MiscAmt. This is NOT part of the a Unit Cost. It is NOT consider in the logic of using Minimum Cost.  */  
   "MiscAmt":number,
      /**  The Number of Hours per machine per day that this operations "actual" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining the ShopLoad records.  */  
   "HoursPerMachine":number,
      /**   Date at which the operations current outstanding load starts at.
Ex: Op schedule is 2/1/97 - 2/10/97, initially LoadDate = 2/1/97. As load is relieved through labor processing the LoadDate moves forward accordingly. When 1/2 completed the LoadDate would be 2/5/97. This field is primarily used by the Scheduling Board to calculate the graphical image of outstanding load.  Updated by the JobOper write trigger.  */  
   "LoadDate":string,
      /**  "Hour offset from the beginning of the work day" for the operations outstanding load. Related to LoadDate.  */  
   "LoadHour":number,
      /**  Internally used field to prevent redundant read of JobOper during execution of "Reloader" program. (See WrkCenter.ReloadNum)  */  
   "ReloadNum":number,
      /**  Controls if an alert is to be sent when this JobOper is completed.  */  
   "SndAlrtCmpl":boolean,
      /**  Indicates if  Inspection is required when items are received to this JobOper (subcontract only). Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  */  
   "RcvInspectionReq":boolean,
      /**  Identical to JobHead.JobEngineered.  ShopLoad capacity is only allocated to Jobs where JobEngineered = YES.  */  
   "JobEngineered":boolean,
      /**   The estimated set up hours per machine.
Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  */  
   "EstSetHoursPerMch":number,
      /**   Part Revision number.
Pertains to subcontracting operations only.   An optional field.   Related JobAsmbl.RevisionNum is used as the default.  */  
   "RevisionNum":string,
      /**  Currently not used. Prep for future development.  */  
   "AutoReceiptDate":string,
      /**  The labor date of the last labor transaction that was posted to this operation.  Used by the JobOper write trigger Auto Receieve logic.  */  
   "LastLaborDate":string,
      /**  The service call that this operation belongs to.  */  
   "CallNum":number,
      /**  The Service Call Line that this operation relates to.  */  
   "CallLine":number,
      /**  Labor rate used for  time on an operation.  Time per hour per technician. in base currency.  */  
   "LaborRate":number,
      /**  Billable Labor rate used for  time on a service.  Time per hour per technician. in base currency. This field considers the percentage coverage of a warranty or contract.  */  
   "BillableLaborRate":number,
      /**  Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. Does not consider warranty or contract  */  
   "DocLaborRate":number,
      /**  Billable Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. considers warranty or contract  */  
   "DocBillableLaborRate":number,
      /**  FS - Is this a billable operation.  */  
   "Billable":boolean,
      /**  FS - Unit Price for the subcontract in base currency.  */  
   "UnitPrice":number,
      /**  FS - Billable Unit Price for the subcontract in base currency.  */  
   "BillableUnitPrice":number,
      /**  FS - Billable Price per unit for the subcontract in customers currency.  */  
   "DocBillableUnitPrice":number,
      /**  FS - Unit Price for the for the Subcontract in Customer currency.  */  
   "DocUnitPrice":number,
      /**  Indicates the Method for Labor Entry.  Can be "T" - Time and Quantity, "Q" - Quantity Only (Time is estimated), "B" - Backflush or "X" - Time - Backflush Qty.  */  
   "LaborEntryMethod":string,
      /**  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  */  
   "PricePerCode":string,
      /**  The quantity requested for first article inspection.  */  
   "FAQty":number,
      /**  The "to date" quantity that has been moved to the input Warehouse/Bin of the subsequent operations ResourceGroup/Resource input Warehouse/Bin.  This is NOT A balance.  It is a "to date" value.  It is not reduced as it is consumed.  Used in calculation of "Outstanding" WIP in the Request Material/WIP program (ame30-dg.w).  Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the WIP material in/out of the staging area (Issues, Returns).  */  
   "QtyStagedToDate":number,
      /**  A flag to indicate that this job operation requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  This only applies to subcontract operations.  */  
   "RFQNeeded":boolean,
      /**  The number of vendor quotes that are required for this job subcontract operation.  Can be zero if RFQ(s) are not required.  */  
   "RFQVendQuotes":number,
      /**  RFQ number that the item is linked to.  */  
   "RFQNum":number,
      /**  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  */  
   "RFQLine":number,
      /**   RFQ Status.
W= Waiting, A = Accepted, R = Requested, C = Received  */  
   "RFQStat":string,
      /**  Used to group operation to save on setups.  */  
   "SetupGroup":string,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   "RestoreFlag":string,
      /**  Analysis Code  */  
   "AnalysisCode":string,
      /**   Identifies the primary JobOpDtl to be used for setup.  The setup time for the operation is determined on the JobOpDtl.
If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = S or B.  */  
   "PrimarySetupOpDtl":number,
      /**   Identifies the primary JobOpDtl to be used for production.  The production run time for the operation is determined on the JobOpDtl.
If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = P or B.  */  
   "PrimaryProdOpDtl":number,
      /**  Operation Description.  */  
   "OpDesc":string,
      /**  Kit Date. Not directly maintanable. Updated via the scheduling process.  */  
   "KitDate":string,
      /**  Global RFQ flag.  Used in Consolidated Purchasing.  */  
   "GlbRFQ":boolean,
      /**  Booked Unit Cost  */  
   "BookedUnitCost":number,
      /**   Initially defaulted to false. This flag is set to true at the time JobOper.ProdComplete is set to true if JobHead.ProductionYield = true and OpMaster. PrdYldRecalcExpected = true and the actual completed qty for the operation vs. the expected completion qty is out of variance based on the under percentage set in OpMaster. This flag is used by the production yield recalculation logic to determine if recalculation is required for a job.
This field is maintained by the system only.  */  
   "RecalcExpProdYld":boolean,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  When true this would signify that this operation was rough cut scheduled - meaning the operation would have start and end dates but no supporting resourcetimeused or shopload records.  */  
   "RoughCutSched":boolean,
      /**  Scheduling Comments  */  
   "SchedComment":string,
      /**  Reporting currency value of this field  */  
   "Rpt1BillableLaborRate":number,
      /**  Reporting currency value of this field  */  
   "Rpt2BillableLaborRate":number,
      /**  Reporting currency value of this field  */  
   "Rpt3BillableLaborRate":number,
      /**  Reporting currency value of this field  */  
   "Rpt1BillableUnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt2BillableUnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt3BillableUnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt1LaborRate":number,
      /**  Reporting currency value of this field  */  
   "Rpt2LaborRate":number,
      /**  Reporting currency value of this field  */  
   "Rpt3LaborRate":number,
      /**  Reporting currency value of this field  */  
   "Rpt1UnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt2UnitPrice":number,
      /**  Reporting currency value of this field  */  
   "Rpt3UnitPrice":number,
      /**  Indicates whether serial numbers are required form this operation. When true the system will prompt in labor entry processes for the serial numbers that have been completed on this operation.  */  
   "SNRequiredOpr":boolean,
      /**  Indicates whether serial numbers are required on subcontract ship for a subcontract operation.  */  
   "SNRequiredSubConShip":boolean,
      /**  Operation Weight defaulted from Part Master.  */  
   "Weight":number,
      /**  Operation Weight UOM defaulted from Part Master.  */  
   "WeightUOM":string,
      /**   Determines the scheduling offset for the secondary start-to-start operation, offset which will be either

calculated (or entered) on the primary operation. The offset time can be calculated by pieces, percentage 

of the operation duration or entered manually by the user on the primary operation. The secondary operation 

will scheduled to start after the offset period.  */  
   "SendAheadType":string,
      /**   Scheduling offset for the secondary start-to-start operation. The offset time can be calculated by pieces,

percentage of the operation duration or entered manually by the user on the primary operation. The 

secondary operation will scheduled to start after the offset period.  */  
   "SendAheadOffset":number,
      /**  Delimited list of PrjRoleCd codes that are allowed for this operation.  */  
   "PrjRoleList":string,
      /**  Scheduled tear down start date. The start date would be the production end date.  */  
   "TearDwnEndDate":string,
      /**  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  */  
   "TearDwnEndHour":number,
      /**  Scheduled tear down start date. The start date would be the production end date.  */  
   "WITearDwnEndDate":string,
      /**  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  */  
   "WITearDwnEndHour":number,
   "UseAllRoles":boolean,
      /**  The PartNum for the asset. This should be disabled for a service call job, in which case the asset information would be transferred from the service call line when an operation is created for the job.  */  
   "AssetPartNum":string,
      /**  Serial number of the asset.  */  
   "SerialNumber":string,
      /**  ActualStartDate  */  
   "ActualStartDate":string,
      /**  ActualStartHour  */  
   "ActualStartHour":number,
      /**  ActualEndDate  */  
   "ActualEndDate":string,
      /**  ActualEndHour  */  
   "ActualEndHour":number,
      /**  FSJobStatus  */  
   "FSJobStatus":number,
      /**  Instructions  */  
   "Instructions":string,
      /**  ProdUOM  */  
   "ProdUOM":string,
      /**  GeneralPlanInfo  */  
   "GeneralPlanInfo":string,
      /**  EstStdDescription  */  
   "EstStdDescription":string,
      /**  JDFOpCompleted  */  
   "JDFOpCompleted":boolean,
      /**  RemovedfromPlan  */  
   "RemovedfromPlan":boolean,
      /**  EstStdType  */  
   "EstStdType":number,
      /**  Indicates the record is used with Machine MES  */  
   "ExternalMES":boolean,
      /**  PctReg  */  
   "PctReg":number,
      /**  SetupMaterial  */  
   "SetupMaterial":number,
      /**  MaterialColorRating  */  
   "MaterialColorRating":number,
      /**  MiscInfo1  */  
   "MiscInfo1":string,
      /**  MiscInfo2  */  
   "MiscInfo2":string,
      /**  SetupURL  */  
   "SetupURL":string,
      /**  ExpPctUp  */  
   "ExpPctUp":number,
      /**  ExpCycTm  */  
   "ExpCycTm":number,
      /**  ExpGood  */  
   "ExpGood":number,
      /**  NonProdLimit  */  
   "NonProdLimit":number,
      /**  AutoSpcEnable  */  
   "AutoSpcEnable":boolean,
      /**  AutoSpcPeriod  */  
   "AutoSpcPeriod":number,
      /**  PartQualEnable  */  
   "PartQualEnable":boolean,
      /**  AutoSpcSubgroup  */  
   "AutoSpcSubgroup":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  MobileOperation  */  
   "MobileOperation":boolean,
      /**  ReWork  */  
   "ReWork":boolean,
      /**  RequestMove  */  
   "RequestMove":boolean,
      /**  ContractID  */  
   "ContractID":string,
      /**  PrinterID  */  
   "PrinterID":string,
      /**  LastPrintedDate  */  
   "LastPrintedDate":string,
      /**  LastPCIDPrinted  */  
   "LastPCIDPrinted":string,
      /**  CurrentPkgCode  */  
   "CurrentPkgCode":string,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   "ExternalMESSyncRequired":boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   "ExternalMESLastSync":string,
      /**  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  */  
   "QtyPerCycle":number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  Planning number of pieces for this attribute set.  */  
   "PlanningNumberOfPieces":number,
      /**  The identification of related StageNo.  */  
   "StageNumber":string,
      /**  TemplateID  */  
   "TemplateID":string,
      /**  The sum of LaborDtl ScrapQty for this operation.  */  
   "ActScrapQty":number,
      /**  Auto receive flag  */  
   "AutoReceive":boolean,
      /**  Currency Code of the related record  */  
   "CurrencyCode":string,
      /**  The currency switch flag.  */  
   "CurrencySwitch":boolean,
      /**  A symbol that identifies the currency. Used on Forms and displays  */  
   "CurrSymbol":string,
   "DisplayExtPrice":number,
      /**  The display service amount.  */  
   "DisplayServAmt":number,
      /**  The display service labor rate  */  
   "DisplayServLaborRate":number,
      /**  Calculated display unit price  */  
   "DisplayUnitPrice":number,
      /**  The document display extended price  */  
   "DocDisplayExtPrice":number,
      /**  The converted display service amount.  */  
   "DocDisplayServAmt":number,
      /**  The converted display service labor rate.  */  
   "DocDisplayServLaborRate":number,
      /**  The document display unit price  */  
   "DocDisplayUnitPrice":number,
      /**  Display IUM field (readonly)  */  
   "DspIUM":string,
      /**  Field to determine to enable or disable autoreceive.  */  
   "EnableAutoReceive":boolean,
      /**  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  */  
   "EnableSndAlrtCmpl":boolean,
      /**  This external field is used as a flag to determine when to enable/disable the SNRequiredSubConShip field on UI screen.  */  
   "EnableSNReqSubConShip":boolean,
   "EnableSNRequiredOpr":boolean,
      /**  For non subconctract operations JobOper.EstSetHours * JobOper.SetupBurRate + JobOper.EstProdHours * JobOper.ProdBurRate  */  
   "EstBurdenCost":number,
      /**  The calculated estimated labor hours  */  
   "EstLabHours":number,
      /**  For non subcontract operations : JobOper.EstSetHours * JobOper.SetupCrewSize * JobOper.SetupLabRate +JobOper.EstProdHours * JobOper.ProdCrewSize * JobOper.ProdLabRate  */  
   "EstLaborCost":number,
      /**  For SubContract operations: JobOper.EstUnitCost * JobOper.RunQty  */  
   "EstSubCost":number,
      /**  Final operation  */  
   "FinalOpr":boolean,
      /**  IsBaseCurrency  */  
   "IsBaseCurrency":boolean,
      /**  This is the description of the Method for Labor Entry.  Can be "Time and Quantity" for 'T', "Quantity Only" for 'Q', "Backflush" for 'B' or "Time and Backflush Qty" for 'X'  */  
   "LaborEntryMethodDesc":string,
      /**  The total Load Hours calculated by summing the SetUpLoadHrs + ProdLoadHrs.  */  
   "LoadHrs":number,
   "OpStdDescription":string,
      /**  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  */  
   "PrimaryProdOpDtlDesc":string,
      /**  Primary Resource Group Description  */  
   "PrimaryResourceGrpDesc":string,
      /**  The Resource Group ID of the primary production operation detail.  */  
   "PrimaryResourceGrpID":string,
      /**  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  */  
   "PrimarySetupOpDtlDesc":string,
      /**  The calculated production quantity  */  
   "ProductionQty":number,
      /**  Indicates if the scheduling resources should be refreshed when the op code changes.  */  
   "RefreshResources":boolean,
   "Rpt1DisplayExtPrice":number,
   "Rpt1DisplayServAmt":number,
   "Rpt1DisplayServLaborRate":number,
   "Rpt1DisplayUnitPrice":number,
   "Rpt2DisplayExtPrice":number,
   "Rpt2DisplayServAmt":number,
   "Rpt2DisplayServLaborRate":number,
   "Rpt2DisplayUnitPrice":number,
   "Rpt3DisplayExtPrice":number,
   "Rpt3DisplayServAmt":number,
   "Rpt3DisplayServLaborRate":number,
   "Rpt3DisplayUnitPrice":number,
      /**  The calculated scrap quantity  */  
   "ScrapQty":number,
      /**  Contains the value of which icon to display in tree for joboper  */  
   "ShowStatusIcon":string,
      /**  StdBasis Description  */  
   "StdBasisDescription":string,
      /**  StdFormat Description  */  
   "StdFormatDescription":string,
      /**  For SubContract Operations equals to the ActLaborCost  */  
   "ActSubCost":number,
   "EnableAttributeSetSearch":boolean,
   "BitFlag":number,
   "AnalysisCdDescription":string,
   "AssemblySeqDescription":string,
   "CallLineLineDesc":string,
   "DynAttrValueSetShortDescription":string,
   "DynAttrValueSetDescription":string,
   "JobNumPartDescription":string,
   "OpCodeOpDesc":string,
   "PartNumAttrClassID":string,
   "PartNumSellingFactor":number,
   "PartNumPricePerCode":string,
   "PartNumTrackDimension":boolean,
   "PartNumIUM":string,
   "PartNumSalesUM":string,
   "PartNumPartDescription":string,
   "PartNumTrackSerialNum":boolean,
   "PartNumTrackLots":boolean,
   "PartNumTrackInventoryAttributes":boolean,
   "PartNumTrackInventoryByRevision":boolean,
   "RFQLineLineDesc":string,
   "SetupGroupDescription":string,
   "StageNoDescription":string,
   "VendorNumTermsCode":string,
   "VendorNumDefaultFOB":string,
   "VendorNumName":string,
   "VendorNumCountry":string,
   "VendorNumAddress2":string,
   "VendorNumCurrencyCode":string,
   "VendorNumZIP":string,
   "VendorNumState":string,
   "VendorNumAddress1":string,
   "VendorNumAddress3":string,
   "VendorNumCity":string,
   "VendorNumVendorID":string,
   "VendorPPZip":string,
   "VendorPPCity":string,
   "VendorPPAddress2":string,
   "VendorPPPrimPCon":number,
   "VendorPPAddress1":string,
   "VendorPPCountry":string,
   "VendorPPState":string,
   "VendorPPName":string,
   "VendorPPAddress3":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobPartRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number. Used in tying record back to its parent JobHead record.  */  
   "JobNum":string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   "PartNum":string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   "RevisionNum":string,
      /**   Part Per Operation. Active only for Concurrent process
Jobs. Otherwise set to 1.  */  
   "PartsPerOp":number,
      /**   The number of individual parts that are being produced
part. Sum of all related JobProd.ProdQty.
Not Directly maintable.  */  
   "PartQty":number,
      /**  Part Qty that is being produced for Stock.  */  
   "StockQty":number,
      /**   Total Quantity of the end part shipped from this job.
Updated via the ShipDtl write triggers.  */  
   "ShippedQty":number,
      /**   Total quantity received to stock for the end part of the Job.
Updated via the Manufacturing receipts process.  */  
   "ReceivedQty":number,
      /**   Represents the "outstanding" WIP of production quantity.
A summary of JobProd.WIPQty, updated via JobProd write trigger.  */  
   "WIPQty":number,
      /**   Part Production quantity completed.
Updated via JobOper write trigger or LaborPart trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  */  
   "QtyCompleted":number,
      /**  Quantity of the job completed quantity that is "Reserved" for the linked demands (sales orders/other jobs). Summary of PartAlloc.ReservedQty where PartAlloc.SupplyJobNum = JobHead.JobNum.  Reservations for Orders are made via the Order Allocations program. They are excluded from available quantity calculations for the job. Available Quantity = JobHead.QtyCompleted - (Shipped + Received to stk + ReservedAllocQty + PickingQty + PickedQty).  Maintained via PartAlloc write trigger.  */  
   "ReservedQty":number,
      /**  Total Allocated Quantity for this job part  */  
   "AllocatedQty900":number,
      /**  Quantity of the job completed quantity that is considered as in the "Picking" process for the linked sales orders. Summary of PartAlloc.PickingQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickingQty is set in the Order Allocation program. Maintained via PartAlloc write trigger.  */  
   "PickingQty":number,
      /**  Quantity of the job completed quantity that is considered as in the shipping "Staging" process for the linked sales orders. Summary of PartAlloc.PickedQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickedQty is updated when the material move moves the item to the staging area.  Maintained via PartAlloc write trigger.  */  
   "PickedQty":number,
      /**   Defines an integer value which is used to calculate a
ratio for prorating the labor costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  */  
   "LbrCostBase":number,
      /**   Defines an integer value which is used to calculate a
ratio for prorating the material costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  */  
   "MtlCostBase":number,
      /**  Indicates if Job is closed.  Mirror image of JobHead.JobClosed. Duplicated for performance reasons  */  
   "JobClosed":boolean,
      /**  Indicates if production is complete for the job.   Mirror image of JobHead.JobClosed. Duplicated for performance reasons  */  
   "JobComplete":boolean,
      /**  Site Identifier.  Mirror image of JobHead.Site. Duplicated for performance reasons  */  
   "Plant":string,
      /**  Describes the Part.  */  
   "PartDescription":string,
      /**  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  */  
   "IUM":string,
      /**   Shipping Documents Required.
Indicates if shipping documents are required when shipping this part from the Job. Pertains to Job Shipments only and only if the PartNum does not exist in the PartTable. If it does exist then the Part.ShipDocReq. If checked, then at the time of shipping the system will require that the JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  */  
   "ShipDocReq":boolean,
      /**   Required Shipping Documents Available.
A flag manually set by the user to indicate that the required documents for the Job Part  are available. In order to set to Yes, at least one attachment having a DocType with Shipment = yes must exist for the Job Part.  If the Part.ShipDocReq = yes  then JobPart.ShipDocsA vail must = yes before the system will allow shipment of the Part from the job.Requires DocManagement license.  */  
   "ShipDocAvail":boolean,
      /**  List of materials that us this part as cost base  */  
   "MtlList":string,
      /**  Indicates that MRP should not create job suggestions for the specified co-part  */  
   "PreventSugg":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
   "OrderQty":number,
      /**  The value of the JobHead.ProcessMode  */  
   "ProcessMode":string,
      /**  Indicates if ShipDocReq is enabled. Only if JobPart.PartNum does not exist in Part Table and if Document Management is installed.  */  
   "EnableShipDocReq":boolean,
      /**  Logical field signifying whether JobPart.PartNum is a valid part master part.  */  
   "PartmasterPart":boolean,
   "EnableSugg":boolean,
   "BitFlag":number,
   "DynAttrValueSetDescription":string,
   "DynAttrValueSetShortDescription":string,
   "PartTrackDimension":boolean,
   "PartPricePerCode":string,
   "PartTrackInventoryByRevision":boolean,
   "PartAttrClassID":string,
   "PartPartDescription":string,
   "PartTrackLots":boolean,
   "PartIUM":string,
   "PartSellingFactor":number,
   "PartSalesUM":string,
   "PartTrackInventoryAttributes":boolean,
   "PartTrackSerialNum":boolean,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobProdRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number. Used in tying record back to its parent JobHead record.  */  
   "JobNum":string,
      /**  Related sales order number. For build to stock demands the OrderNum, OrderLine and OrderRel fields are all zero  */  
   "OrderNum":number,
      /**  Related Sales order line number.  */  
   "OrderLine":number,
      /**  Related sales order release number.  */  
   "OrderRelNum":number,
      /**   The planned production quantity for a  Job to fill the demand.
Note: updates the JobHead.ProdQty via JobProd write trigger.  */  
   "ProdQty":number,
      /**   Inventory warehouse that job is producing for.
Only relevant for build to stock demands (ordernum = 0). In this case a valid Part must be referenced.  */  
   "WarehouseCode":string,
      /**  Production Demands can be from other jobs.  That is, one job can be building parts that are required by another job. The demand is defined by a JobMtl record on some other job.  "TargetJobNum" is the job that this job is making parts for.  */  
   "TargetJobNum":string,
      /**  Assembly Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  */  
   "TargetAssemblySeq":number,
      /**  Material Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  */  
   "TargetMtlSeq":number,
      /**   Quantity Shipped against this allocation.
Updated via the ShipDtl write triggers.  */  
   "ShippedQty":number,
      /**   Total quantity received to stock for this production allocation.
Updated via the Manufacturing Receipts process  */  
   "ReceivedQty":number,
      /**   Represents the "outstanding" WIP production quantity.
WIPQty = JobProd.Quantity - (ShippedQty +ReceivedQty) if negative then it is set to zero. If related Order Release is closed then reservation is zero.
Updated via the JobProd, OrderRel triggers.  */  
   "WIPQty":number,
      /**  The Service Call number that this Job is linked to.  */  
   "CallNum":number,
      /**  The Service Call Line that this Job is linked to.  */  
   "CallLine":number,
      /**  This is the unique key for this table.  It will have a prefix like Job to indicate firm or unfirm orders.  The record can be linked to an Order Header by using the TFOrdNum TFOrdSeq keys.  */  
   "TFLineNum":string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   "PartNum":string,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  The demand contract this demand schedule is for.  */  
   "DemandContractNum":number,
      /**  The sequence from the DemandHead record this DemandSchedule is related to.  */  
   "DemandHeadSeq":number,
      /**  The sequence from the DemandDetail record this DemandSchedule is related to.  */  
   "DemandDtlSeq":number,
      /**  This field along with Company, DemandContractNum, DemandHeadSeq, and DemandDetailSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandSchedulel record for the DemandDetail and the adding 1 to it.  */  
   "DemandScheduleSeq":number,
      /**  PlanUserID  */  
   "PlanUserID":string,
      /**  PlanID  */  
   "PlanID":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Job will be shipped through a Misc Shipment directly from WIP when job is closed.  */  
   "WIPToMiscShipment":boolean,
      /**  RMA Num linked from RMA Disposition.  */  
   "RMANum":number,
      /**  RMA Line linked from RMA Disposition.  */  
   "RMALine":number,
      /**  RMA Receipt linked from RMA Disposition.  */  
   "RMAReceipt":number,
      /**  RMA Disposition linked from RMA Disposition.  */  
   "RMADisp":number,
      /**  DMRNum  */  
   "DMRNum":number,
      /**  DMRActionNum  */  
   "DMRActionNum":number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  Planning number of pieces for this attribute set.  */  
   "PlanningNumberOfPieces":number,
      /**  Revision number which is used to uniquely identify the revision of the part.  */  
   "RevisionNum":string,
      /**  The customer ID  */  
   "CustID":string,
      /**  The customer name.  */  
   "CustName":string,
      /**  The demand linke source  */  
   "DemandLinkSource":string,
      /**  The demand link status  */  
   "DemandLinkStatus":string,
      /**  IUM  */  
   "IUM":string,
      /**  The jobhead part description  */  
   "JHPartDesc":string,
      /**  The jobhead part number  */  
   "JHPartNum":string,
      /**  The make to job quantity  */  
   "MakeToJobQty":number,
      /**  The make to stock quantity  */  
   "MakeToStockQty":number,
      /**  The Make to type (i.e. Stock, Job, Order)  */  
   "MakeToType":string,
      /**  Calculated quantity that could come from allocatedqty or accumulation from parttran.  */  
   "MaxAllowedQty":number,
      /**  The jobmtl part description.  */  
   "MtlPartDesc":string,
      /**  The jobmtl part number.  */  
   "MtlPartNum":string,
      /**  The order WIP quantity  */  
   "OrdWIPQty":number,
      /**  Calculated field OurStockQty, will update OrderRel.OurStockQty  */  
   "OurStockQty":number,
      /**  Pull from Stock warehouse code (orderrel.warehousecode  */  
   "PullFromStockWarehouseCode":string,
      /**  The pull from stock warehouse description  */  
   "PullFromStockWarehouseDesc":string,
      /**  The Demand Link Due Date - Ship By  */  
   "ShipBy":string,
      /**  The split quantity for the demand.  */  
   "SplitQty":number,
      /**  The stock WIP quantity  */  
   "StkWIPQty":number,
   "TFOrdLine":number,
   "TFOrdNum":string,
      /**  Temp field so UI has a column to bind to for calculation of Total Split Quantity.  */  
   "TotalSplitQuantity":number,
   "TrackSerialNumbers":boolean,
      /**  This is a field used in Split Job to determine if record has been validated.  */  
   "Valid":boolean,
      /**  The jobasmbl part description.  */  
   "AsmPartDesc":string,
      /**  The jobasmbl part number.  */  
   "AsmPartNum":string,
   "EnableAttributeSetSearch":boolean,
      /**  Number of pieces for inventory attribute tracked parts.  */  
   "DispNumberOfPieces":number,
      /**  Indicates a customer referenced on the record is inactive.  */  
   "CustInactive":boolean,
      /**  Indicates if a ShipTo referenced on the record is inactive.  */  
   "ShipToNumInactive":boolean,
   "BitFlag":number,
   "CallLineLineDesc":string,
   "DynAttrValueSetShortDescription":string,
   "DynAttrValueSetDescription":string,
   "JobNumPartDescription":string,
   "OrderLineLineDesc":string,
   "OrderNumCurrencyCode":string,
   "OrderNumCardMemberName":string,
   "PartAttrClassID":string,
   "PartTrackInventoryByRevision":boolean,
   "PartSalesUM":string,
   "PartTrackSerialNum":boolean,
   "PartSellingFactor":number,
   "PartTrackLots":boolean,
   "PartIUM":string,
   "PartTrackDimension":boolean,
   "PartPricePerCode":string,
   "PartPartDescription":string,
   "PartTrackInventoryAttributes":boolean,
   "WarehouseCodeDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobResourcesRow{
   "Company":string,
   "JobNum":string,
   "AssemblySeq":number,
   "OprSeq":number,
   "OpDtlSeq":number,
   "WhatIf":boolean,
   "AllocNum":number,
   "ResourceGrpID":string,
   "ResourceID":string,
   "ResourceDesc":string,
      /**  Calendar Name  */  
   "CalendarName":string,
   "SysRowID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_JobStageRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Job Number.  */  
   "JobNum":string,
      /**  Assembly Sequence # that this Stage is associated with.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies stage record within the stage set.  */  
   "StageSeq":number,
      /**  The identification of related StageNo.  */  
   "StageNumber":string,
      /**  SysRevID  */  
   "SysRevID":number,
      /**  SysRowID  */  
   "SysRowID":string,
   "BitFlag":number,
   "StageNumberDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}




//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Custom Schemas:
//////////////////////////////////////////////////////////////////////////
   /** Required : 
      @param ipJobAsmblRowID
      @param ipOPCode
      @param ipNewOprSeq
      @param ipReturn
   */  
export interface AddOperation_input{
   ipJobAsmblRowID:string,
   ipOPCode:string,
   ipNewOprSeq:number,
   ipReturn:boolean,
}

export interface AddOperation_output{
parameters : {
      /**  output parameters  */  
   opShowmsg:boolean,
}
}

   /** Required : 
      @param ipJobNum
      @param ipAsmSeq
      @param ipMtlSeq
      @param ipPrefix
      @param ipStartNum
      @param ipEndNum
      @param ipSuffix
      @param ds
   */  
export interface AddRefDesRange_input{
      /**  The Job Number  */  
   ipJobNum:string,
      /**  The Job Assembly  */  
   ipAsmSeq:number,
      /**  The Job Material Seq  */  
   ipMtlSeq:number,
      /**  The Prefix to be used to create Reference Designators  */  
   ipPrefix:string,
      /**  The Starting Number to create Reference Designators  */  
   ipStartNum:number,
      /**  The Ending Number to create Reference Designators  */  
   ipEndNum:number,
      /**  The Suffix to be used to create Reference Designators  */  
   ipSuffix:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface AddRefDesRange_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param targetJob
      @param targetAsm
      @param sourceFile
      @param keyOne
      @param keyTwo
      @param keyThree
      @param getCostsFromInv
      @param getCostsFromTemp
   */  
export interface AppendDetails_input{
   ds:Erp_Tablesets_JbAppendTableset[],
   targetJob:string,
   targetAsm:number,
   sourceFile:string,
   keyOne:string,
   keyTwo:string,
   keyThree:string,
   getCostsFromInv:boolean,
   getCostsFromTemp:boolean,
}

export interface AppendDetails_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   errorList:string,
}
}

   /** Required : 
      @param sourceFile
      @param keyOne
      @param keyTwo
      @param keyThree
      @param targetJob
      @param targetAsm
      @param vDueDate
   */  
export interface BuildAppendDetails_input{
      /**  Source of the append details, Quote, Job or Method  */  
   sourceFile:string,
      /**  First key field of source  */  
   keyOne:string,
      /**  Second key field of source  */  
   keyTwo:string,
      /**  Third key field of source  */  
   keyThree:string,
      /**  Target Job Num  */  
   targetJob:string,
      /**  Target Assembly  */  
   targetAsm:number,
      /**  Due Date to calculate V_AsOfDate and grac correct revision on Append Details.  */  
   vDueDate:string,
}

export interface BuildAppendDetails_output{
   returnObj:Erp_Tablesets_JbAppendTableset[],
}

   /** Required : 
      @param ipJobProdRowid
      @param ds
   */  
export interface BuildWhseLinkList_input{
      /**  The rowid of the JobProd record to build the warehouses for  */  
   ipJobProdRowid:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface BuildWhseLinkList_output{
parameters : {
      /**  output parameters  */  
   opWhseList:string,
}
}

   /** Required : 
      @param ds
   */  
export interface CalcJobMtlEstMtlBurUnitCost_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CalcJobMtlEstMtlBurUnitCost_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param equipID
      @param ds
   */  
export interface ChangeEquipID_input{
      /**  Proposed equipment id  */  
   equipID:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeEquipID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param topics
      @param ds
   */  
export interface ChangeIssueTopics_input{
      /**  Proposed topics string id  */  
   topics:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeIssueTopics_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmReqRefDes_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmReqRefDes_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param checkManual
      @param ds
   */  
export interface ChangeJobAsmRestrictManual_input{
      /**  Indicates if the Restriction is Manual Compliant  */  
   checkManual:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmRestrictManual_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmRestriction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmRestriction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmSubstance_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmSubstance_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblAttributeSetID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblAttributeSetID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblDirect_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblDirect_output{
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblEstSplitCosts_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblEstSplitCosts_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblEstUnitCost_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblEstUnitCost_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblLinkToContract_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblLinkToContract_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblMtlBurRate_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblMtlBurRate_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param iProposedRelatedOperation
      @param ds
   */  
export interface ChangeJobAsmblOpr_input{
      /**  The new proposed JobAsmbl.RelatedOperation value  */  
   iProposedRelatedOperation:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblOpr_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblOverRunQty_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblOverRunQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblParent_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblParent_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblPartNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblPartNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblQtyPer_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblQtyPer_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param proposedReassignSNAsm
      @param ds
   */  
export interface ChangeJobAsmblReassignSNAsm_input{
      /**  The new proposed JobAsmbl.ReassignSNAsm value  */  
   proposedReassignSNAsm:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblReassignSNAsm_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblRevisionNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblRevisionNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedValResDes
      @param ds
   */  
export interface ChangeJobAsmblValRefDes_input{
      /**  The new proposed JobAsmbl.ValRefDes value  */  
   ipProposedValResDes:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblValRefDes_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobAsmblWarehouseCode_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobAsmblWarehouseCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param attributeSetID
      @param ds
   */  
export interface ChangeJobHeadAttributeSetID_input{
   attributeSetID:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadAttributeSetID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadJobEngineered_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadJobEngineered_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadJobReleased_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadJobReleased_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadPartNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadPartNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadPersonID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadPersonID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadPhaseID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadPhaseID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadProdCode_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadProdCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadProdTeamID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadProdTeamID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadProjectID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadProjectID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobHeadRevisionNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobHeadRevisionNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param attributeSetID
      @param ds
   */  
export interface ChangeJobMtlAttributeSetID_input{
   attributeSetID:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlAttributeSetID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlBackflush_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlBackflush_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlBillable_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlBillable_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlBurUnitCost_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlBurUnitCost_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlBuyIt_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlBuyIt_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlCurrencySwitch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlCurrencySwitch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlDirect_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlDirect_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlDisplayUnitPrice_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlDisplayUnitPrice_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlEstSalSplitCosts_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlEstSalSplitCosts_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlEstScrapType_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlEstScrapType_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlEstScrap_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlEstScrap_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlEstSplitCosts_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlEstSplitCosts_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlFixedQty_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlFixedQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedIUM
      @param ds
   */  
export interface ChangeJobMtlIUM_input{
      /**  The proposed IUM.  */  
   ipProposedIUM:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlIUM_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlLinkToContract_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlLinkToContract_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlMiscCharge_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlMiscCharge_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlMtlBurRate_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlMtlBurRate_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param ipValidatePart
      @param ipPartNum
      @param SysRowID
      @param xrefPartNum
      @param xrefPartType
   */  
export interface ChangeJobMtlPartNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
      /**  Flag to indicate if the part validations are required (used only after multiple match resolved)  */  
   ipValidatePart:boolean,
      /**  The input-output part number to validate and it gets returned  */  
   ipPartNum:string,
      /**  SysRowID (used only after multiple match resolved)  */  
   SysRowID:string,
      /**  XRef Part Number (used only after multiple match resolved)  */  
   xrefPartNum:string,
      /**  XRef Part Type (used only after multiple match resolved)  */  
   xrefPartType:string,
}

export interface ChangeJobMtlPartNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
   ipPartNum:string,
   vMsgText:string,
   vSubAvail:boolean,
   vMsgType:string,
   multipleMatch:boolean,
   opPartChgCompleted:boolean,
   opMtlIssuedAction:string,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlPlant_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlPlant_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlPricePerCode_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlPricePerCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlPurPoint_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlPurPoint_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlQtyPer_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlQtyPer_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlRcvInspectionReq_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlRcvInspectionReq_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param proposedReassignSNAsm
      @param ds
   */  
export interface ChangeJobMtlReassignSNAsm_input{
      /**  The new proposed JobMtl.ReassignSNAsm value  */  
   proposedReassignSNAsm:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlReassignSNAsm_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param iProposedRelatedOperation
      @param ds
   */  
export interface ChangeJobMtlRelatedOperation_input{
      /**  The new proposed JobMtl.RelatedOperation value  */  
   iProposedRelatedOperation:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlRelatedOperation_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlReqRefDes_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlReqRefDes_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlRestriction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlRestriction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlSalvageMtlBurRate_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlSalvageMtlBurRate_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedSalvagePartNum
      @param ds
   */  
export interface ChangeJobMtlSalvagePartNum_input{
      /**  The new proposed JobMtl.SalvagePartNum value  */  
   ipProposedSalvagePartNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlSalvagePartNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlSalvageQtyPer_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlSalvageQtyPer_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlSalvageUM_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlSalvageUM_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlSalvageUnitCredit_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlSalvageUnitCredit_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobMtlSubstance_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlSubstance_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedVendorNumVendorID
      @param ds
   */  
export interface ChangeJobMtlVendorNumVendorID_input{
      /**  The proposed supplier id.  */  
   ipProposedVendorNumVendorID:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobMtlVendorNumVendorID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ProposedCapID
      @param ds
   */  
export interface ChangeJobOpDtlCapability_input{
      /**  The proposed Capability ID  */  
   ProposedCapID:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlCapability_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlEstSetHoursPerMch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlEstSetHoursPerMch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlOpsPerPart_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlOpsPerPart_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlOverrideRates_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlOverrideRates_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlProdStandard_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlProdStandard_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlQtyPerCycle_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlQtyPerCycle_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ProposedResGrpID
      @param ds
   */  
export interface ChangeJobOpDtlResourceGrpID_input{
      /**  The proposed Resource Group ID  */  
   ProposedResGrpID:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlResourceGrpID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ProposedResourceID
      @param ds
   */  
export interface ChangeJobOpDtlResourceID_input{
      /**  The proposed Resource ID  */  
   ProposedResourceID:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlResourceID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlStdBasis_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlStdBasis_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOpDtlStdFormat_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOpDtlStdFormat_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedAutoReceive
      @param ds
   */  
export interface ChangeJobOperAutoReceive_input{
      /**  The new proposed JobOper.AutoReceive value  */  
   ipProposedAutoReceive:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperAutoReceive_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperBillable_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperBillable_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperCurrencySwitch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperCurrencySwitch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperDisplayUnitPrice_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperDisplayUnitPrice_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperDocUnitPrice_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperDocUnitPrice_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperEstLabHours_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperEstLabHours_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperEstScrapType_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperEstScrapType_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperEstScrap_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperEstScrap_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperEstSetHoursPerMch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperEstSetHoursPerMch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedIUM
      @param ds
   */  
export interface ChangeJobOperIUM_input{
      /**  The proposed IUM.  */  
   ipProposedIUM:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperIUM_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param iLaborEntryMethod
      @param ds
   */  
export interface ChangeJobOperLaborEntryMethod_input{
   iLaborEntryMethod:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperLaborEntryMethod_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperMachines_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperMachines_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ProposedOpCode
      @param ds
   */  
export interface ChangeJobOperOpCode_input{
      /**  The proposed Operation Code  */  
   ProposedOpCode:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperOpCode_output{
parameters : {
      /**  output parameters  */  
   RefreshMessage:string,
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperOpStdID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperOpStdID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperOprSeq_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperOprSeq_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperOpsPerPart_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperOpsPerPart_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperPartNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperPartNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperPricePerCode_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperPricePerCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperPrimaryProdOpDtl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperPrimaryProdOpDtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperPrimarySetupOpDtl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperPrimarySetupOpDtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperProdStandard_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperProdStandard_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperPurPoint_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperPurPoint_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperQtyPerCycle_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperQtyPerCycle_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperQtyPer_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperQtyPer_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperRcvInspection_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperRcvInspection_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedSNRequiredSubConShip
      @param ds
   */  
export interface ChangeJobOperSNRequiredSubConShip_input{
      /**  The new proposed JobOper.SNRequiredOprSubConShip value  */  
   ipProposedSNRequiredSubConShip:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperSNRequiredSubConShip_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedSNRequired
      @param ds
   */  
export interface ChangeJobOperSNRequired_input{
      /**  The new proposed JobOper.SNRequiredOpr value  */  
   ipProposedSNRequired:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperSNRequired_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperStdBasis_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperStdBasis_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperStdFormat_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperStdFormat_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperUnitPrice_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperUnitPrice_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOperVendorNumVendorID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOperVendorNumVendorID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOprRestriction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOprRestriction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobOprSubstance_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobOprSubstance_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param attributeSetID
      @param ds
   */  
export interface ChangeJobPartAttributeSetID_input{
   attributeSetID:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobPartAttributeSetID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobPartPartNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobPartPartNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdMakeToJobQty_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdMakeToJobQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdMakeToStockQty_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdMakeToStockQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdMakeToType_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdMakeToType_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdOrderLine_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdOrderLine_output{
parameters : {
      /**  output parameters  */  
   opMessage:string,
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdOrderNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdOrderNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdOrderRelNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdOrderRelNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdOurStockQty_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdOurStockQty_output{
parameters : {
      /**  output parameters  */  
   oMessage:string,
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdProdQty_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdProdQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdTargetAssemblySeq_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdTargetAssemblySeq_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdTargetJobNum_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdTargetJobNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface ChangeJobProdTargetMtlSeq_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeJobProdTargetMtlSeq_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param topics
      @param ds
   */  
export interface ChangeResTopics_input{
      /**  Proposed topics string id  */  
   topics:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ChangeResTopics_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobNum
      @param ipJobOperRowid
      @param ipJobProdRowid
   */  
export interface CheckApprovedSupplier_input{
      /**  The job number to check for approved suppliers.  */  
   ipJobNum:string,
      /**  The rowid of subcontract operation to check.  */  
   ipJobOperRowid:string,
      /**  The rowid of the demand link to check.  */  
   ipJobProdRowid:string,
}

export interface CheckApprovedSupplier_output{
parameters : {
      /**  output parameters  */  
   opWarningMsg:string,
}
}

   /** Required : 
      @param ipNewParent
      @param ds
   */  
export interface CheckChangeJobAsmblParent_input{
      /**  New Parent value to check against  */  
   ipNewParent:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckChangeJobAsmblParent_output{
}

   /** Required : 
      @param ipMiscCharge
      @param ds
   */  
export interface CheckChangeJobMtlMiscCharge_input{
      /**  New Misc Charge  */  
   ipMiscCharge:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckChangeJobMtlMiscCharge_output{
}

   /** Required : 
      @param ipJobNum
      @param ipPartNum
      @param ipAssemblySeq
   */  
export interface CheckChangeJobOperPartNum_input{
      /**  The Job Number  */  
   ipJobNum:string,
      /**  The New PartNum to validate against.  */  
   ipPartNum:string,
      /**  The inputted Assembly Sequence to validate  */  
   ipAssemblySeq:number,
}

export interface CheckChangeJobOperPartNum_output{
}

   /** Required : 
      @param ipNewOrderRelNum
      @param ds
   */  
export interface CheckChangeJobProdOrderRelNum_input{
      /**  New OrderRelNum value to check against  */  
   ipNewOrderRelNum:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckChangeJobProdOrderRelNum_output{
}

   /** Required : 
      @param ipNewTargetAssemblySeq
      @param ds
   */  
export interface CheckChangeJobProdTargetAssemblySeq_input{
      /**  New Target Assembly Number  */  
   ipNewTargetAssemblySeq:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckChangeJobProdTargetAssemblySeq_output{
}

   /** Required : 
      @param ipNewTargetJobNum
      @param ds
   */  
export interface CheckChangeJobProdTargetJobNum_input{
      /**  The New TargetJobNum to validate against.  */  
   ipNewTargetJobNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckChangeJobProdTargetJobNum_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipNewTargetMtlSeq
      @param ds
   */  
export interface CheckChangeJobProdTargetMtlSeq_input{
      /**  The New TargetMtlSeq to validate against.  */  
   ipNewTargetMtlSeq:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckChangeJobProdTargetMtlSeq_output{
}

   /** Required : 
      @param relatedToTable
      @param relatedToSysRowID
      @param sourcePart
      @param sourceRevision
      @param findRevision
      @param foreignTable
      @param foreignSysRowID
   */  
export interface CheckConfigurationAndGetConfigInfo_input{
      /**  Related To File  */  
   relatedToTable:string,
      /**  The job on which the configuration should be saved.  */  
   relatedToSysRowID:string,
      /**  Part Num to get details from (populated when sourceFile = "Method")  */  
   sourcePart:string,
      /**  Revision number to get details from (populated when sourceFile = "Method")  */  
   sourceRevision:string,
      /**  Foreign row  */  
   findRevision:boolean,
      /**  Foreign row  */  
   foreignTable:string,
      /**  Foreign row SysRowID  */  
   foreignSysRowID:string,
}

export interface CheckConfigurationAndGetConfigInfo_output{
parameters : {
      /**  output parameters  */  
   foreignTable:string,
   foreignSysRowID:string,
   configurationExists:boolean,
   canGetDetails:boolean,
   needsConfiguration:boolean,
   configureRevision:string,
   reasonMessage:string,
   warningMsg:boolean,
   isNIC:boolean,
   structTag:string,
   ruleTag:string,
   configType:string,
   configURL:string,
   configID:string,
   kbConfigProdID:number,
}
}

   /** Required : 
      @param relatedToTable
      @param relatedToSysRowID
      @param sourcePart
      @param sourceRevision
      @param findRevision
      @param foreignTable
      @param foreignSysRowID
   */  
export interface CheckConfigurationAndGetConfigType_input{
      /**  Related To File  */  
   relatedToTable:string,
      /**  The job on which the configuration should be saved.  */  
   relatedToSysRowID:string,
      /**  Part Num to get details from (populated when sourceFile = "Method")  */  
   sourcePart:string,
      /**  Revision number to get details from (populated when sourceFile = "Method")  */  
   sourceRevision:string,
      /**  Foreign row  */  
   findRevision:boolean,
      /**  Foreign row  */  
   foreignTable:string,
      /**  Foreign row SysRowID  */  
   foreignSysRowID:string,
}

export interface CheckConfigurationAndGetConfigType_output{
parameters : {
      /**  output parameters  */  
   foreignTable:string,
   foreignSysRowID:string,
   configurationExists:boolean,
   canGetDetails:boolean,
   needsConfiguration:boolean,
   configureRevision:string,
   reasonMessage:string,
   warningMsg:boolean,
   isNIC:boolean,
   structTag:string,
   ruleTag:string,
   configType:string,
   configURL:string,
   configID:string,
}
}

   /** Required : 
      @param relatedToTable
      @param relatedToSysRowID
      @param sourcePart
      @param sourceRevision
      @param findRevision
      @param foreignTable
      @param foreignSysRowID
   */  
export interface CheckConfiguration_input{
      /**  Related To File  */  
   relatedToTable:string,
      /**  The job on which the configuration should be saved.  */  
   relatedToSysRowID:string,
      /**  Part Num to get details from (populated when sourceFile = "Method")  */  
   sourcePart:string,
      /**  Revision number to get details from (populated when sourceFile = "Method")  */  
   sourceRevision:string,
   findRevision:boolean,
      /**  Foreign row  */  
   foreignTable:string,
      /**  Foreign row SysRowID  */  
   foreignSysRowID:string,
}

export interface CheckConfiguration_output{
parameters : {
      /**  output parameters  */  
   foreignTable:string,
   foreignSysRowID:string,
   configurationExists:boolean,
   canGetDetails:boolean,
   needsConfiguration:boolean,
   configureRevision:string,
   reasonMessage:string,
   warningMsg:boolean,
   isNIC:boolean,
   structTag:string,
   ruleTag:string,
}
}

export interface CheckEngineered_output{
parameters : {
      /**  output parameters  */  
   v_Engineered:boolean,
}
}

   /** Required : 
      @param cCompany
      @param cJobNum
      @param lJobEng
      @param lJobRel
      @param lInCopy
      @param lSchedL
      @param lChkOff1
      @param lChkOff2
      @param lChkOff3
      @param lChkOff4
      @param lChkOff5
   */  
export interface CheckForChanges_input{
      /**  Should the user to be prompted for change description?  */  
   cCompany:string,
      /**  Should the user to be prompted for change description?  */  
   cJobNum:string,
      /**  Should the user to be prompted for change description?  */  
   lJobEng:boolean,
      /**  Should the user to be prompted for change description?  */  
   lJobRel:boolean,
      /**  Should the user to be prompted for change description?  */  
   lInCopy:boolean,
      /**  Should the user to be prompted for change description?  */  
   lSchedL:boolean,
      /**  Should the user to be prompted for change description?  */  
   lChkOff1:boolean,
      /**  Should the user to be prompted for change description?  */  
   lChkOff2:boolean,
      /**  Should the user to be prompted for change description?  */  
   lChkOff3:boolean,
      /**  Should the user to be prompted for change description?  */  
   lChkOff4:boolean,
      /**  Should the user to be prompted for change description?  */  
   lChkOff5:boolean,
}

export interface CheckForChanges_output{
parameters : {
      /**  output parameters  */  
   opChangeDescription:boolean,
}
}

   /** Required : 
      @param ipJobNum
      @param ipPartNum
      @param ipAssemblySeq
   */  
export interface CheckIfMaterialIsIssued_input{
      /**  The inputted Job Number to validate  */  
   ipJobNum:string,
      /**  The inputted PartNum to validate  */  
   ipPartNum:string,
      /**  The inputted Assembly Sequence to validate  */  
   ipAssemblySeq:number,
}

export interface CheckIfMaterialIsIssued_output{
parameters : {
      /**  output parameters  */  
   mtlIssueAction:string,
}
}

   /** Required : 
      @param capability
      @param resourceID
      @param resourceGroupID
   */  
export interface CheckInactiveSchedRequirement_input{
      /**  Capability to be validated  */  
   capability:string,
      /**  Resource to be validated  */  
   resourceID:string,
      /**  Resource Group to be validated  */  
   resourceGroupID:string,
}

export interface CheckInactiveSchedRequirement_output{
parameters : {
      /**  output parameters  */  
   inactiveMessage:string,
}
}

   /** Required : 
      @param ipJobNum
      @param ipContractID
   */  
export interface CheckJobHeadContractID_input{
   ipJobNum:string,
   ipContractID:string,
}

export interface CheckJobHeadContractID_output{
parameters : {
      /**  output parameters  */  
   ipContractID:string,
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface CheckJobHeadProjectID_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   projectID:string,
}

export interface CheckJobHeadProjectID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface CheckJobMtlBuyIt_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckJobMtlBuyIt_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedMtlPartNum
      @param ds
   */  
export interface CheckJobMtlPartNumFixQty_input{
      /**  The new proposed ttJobMtl.PartNum value  */  
   ipProposedMtlPartNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckJobMtlPartNumFixQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobNum
      @param ipAssemblySeq
      @param ipOprSeq
   */  
export interface CheckJobOperOprSeq_input{
      /**  The inputted Job Number to validate  */  
   ipJobNum:string,
      /**  The inputted Assembly Sequence to validate  */  
   ipAssemblySeq:number,
      /**  The inputted Operation Sequence to validate  */  
   ipOprSeq:number,
}

export interface CheckJobOperOprSeq_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param ds
      @param ipPrimaryProdOpDtl
   */  
export interface CheckJobOperPrimaryProdOpDtl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
      /**  The new PrimaryProdOpDtl value to change to  */  
   ipPrimaryProdOpDtl:number,
}

export interface CheckJobOperPrimaryProdOpDtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param ipPrimarySetupOpDtl
   */  
export interface CheckJobOperPrimarySetupOpDtl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
      /**  The new PrimarySetupOpDtl value to change to  */  
   ipPrimarySetupOpDtl:number,
}

export interface CheckJobOperPrimarySetupOpDtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedPartNum
      @param ds
   */  
export interface CheckJobPartPartNumIsSerTra_input{
      /**  The new proposed JobPart.PartNum value  */  
   ipProposedPartNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckJobPartPartNumIsSerTra_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipChangeToType
      @param ds
   */  
export interface CheckJobProdMakeToType_input{
      /**  The new maketotype value to change to  */  
   ipChangeToType:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckJobProdMakeToType_output{
}

   /** Required : 
      @param dProposedProdQty
      @param ds
   */  
export interface CheckJobProdProdQty_input{
      /**  The new proposed JobProd.ProdQty value  */  
   dProposedProdQty:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckJobProdProdQty_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface CheckJobProdQtyJob_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckJobProdQtyJob_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param targetJob
      @param targetAsm
      @param targetMtl
      @param isEnabled
   */  
export interface CheckLink_input{
      /**  Target Job Number  */  
   targetJob:string,
      /**  Target Job AssemblySeq  */  
   targetAsm:number,
      /**  Target Job Mtl  */  
   targetMtl:number,
      /**  Make Direct Is Enabled  */  
   isEnabled:boolean,
}

export interface CheckLink_output{
parameters : {
      /**  output parameters  */  
   isEnabled:boolean,
}
}

   /** Required : 
      @param ds
      @param partNum
      @param SysRowID
      @param skipXRefUpdate
      @param xrefPartNum
      @param xrefPartType
   */  
export interface CheckPrePartInfo_input{
   ds:Erp_Tablesets_JobEntryTableset[],
      /**  The input-output part number to validate and it gets returned  */  
   partNum:string,
      /**  SysRowID (used only after multiple match resolved)  */  
   SysRowID:string,
      /**  Skip part xref jobhead field update logic (true for asm and mtl)  */  
   skipXRefUpdate:boolean,
      /**  XRef Part Number (used only after multiple match resolved)  */  
   xrefPartNum:string,
      /**  XRef Part Type (used only after multiple match resolved)  */  
   xrefPartType:string,
}

export interface CheckPrePartInfo_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
   partNum:string,
   vMsgText:string,
   vSubAvail:boolean,
   vMsgType:string,
   multipleMatch:boolean,
}
}

   /** Required : 
      @param ipJobProdRowid
      @param ds
   */  
export interface CheckPreProjectID_input{
      /**  The character rowid value of the JobProd to validate  */  
   ipJobProdRowid:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface CheckPreProjectID_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param cjobnum
   */  
export interface CheckResourcePlants_input{
      /**  Job number  */  
   cjobnum:string,
}

export interface CheckResourcePlants_output{
parameters : {
      /**  output parameters  */  
   runOutWarning:string,
}
}

   /** Required : 
      @param cCompany
      @param cJobNum
      @param reqDueDate
      @param prodQty
      @param dueDate
      @param startDate
      @param jobEngineered
   */  
export interface CheckToReschedule_input{
      /**  The returned message  */  
   cCompany:string,
      /**  The returned message  */  
   cJobNum:string,
      /**  The returned message  */  
   reqDueDate:string,
      /**  The returned message  */  
   prodQty:number,
      /**  The returned message  */  
   dueDate:string,
      /**  The returned message  */  
   startDate:string,
      /**  The returned message  */  
   jobEngineered:boolean,
}

export interface CheckToReschedule_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param cCompany
      @param cJobNum
   */  
export interface CheckToScheduleAnUnengineered_input{
   cCompany:string,
   cJobNum:string,
}

export interface CheckToScheduleAnUnengineered_output{
}

   /** Required : 
      @param ipJobNum
      @param ipPartNum
      @param ipAttributeSetID
      @param ipQuantity
   */  
export interface CheckTotProdQty_input{
      /**  The job number to validate  */  
   ipJobNum:string,
      /**  The part number to validate  */  
   ipPartNum:string,
      /**  The attribute set to validate  */  
   ipAttributeSetID:number,
      /**  The quantity of the new Demand being added.  */  
   ipQuantity:number,
}

export interface CheckTotProdQty_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param ipJobNum
      @param ipPartNum
      @param ipAttributeSetID
   */  
export interface CheckUnfirmJob_input{
      /**  The job number  */  
   ipJobNum:string,
      /**  The part number  */  
   ipPartNum:string,
      /**  The attribute set  */  
   ipAttributeSetID:number,
}

export interface CheckUnfirmJob_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param ipJobProdRowid
   */  
export interface ChooseUnlink_input{
      /**  The character rowid value of the JobProd to unlink  */  
   ipJobProdRowid:string,
}

export interface ChooseUnlink_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ds
   */  
export interface ClearPurchasingData_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ClearPurchasingData_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobNum
      @param ipAsmSeq
   */  
export interface CollapseAsm_input{
   ipJobNum:string,
   ipAsmSeq:number,
}

export interface CollapseAsm_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param jobHeadSysRowID
   */  
export interface ConfigurationRefreshQty_input{
      /**  Job Head SysRowID  */  
   jobHeadSysRowID:string,
}

export interface ConfigurationRefreshQty_output{
}

   /** Required : 
      @param ipJobNum
   */  
export interface CopyValuesOrderJob_input{
      /**  The job number to create the jobprod for  */  
   ipJobNum:string,
}

export interface CopyValuesOrderJob_output{
}

   /** Required : 
      @param ipNewJobNum
      @param ipPartSugRowid
      @param ipGetDetails
      @param ipScheduleAll
      @param ipReleaseAll
      @param ipTravelerReadyToPrint
      @param ipBackground
   */  
export interface CreateJobPWB_input{
      /**  The next/new job number to use.  */  
   ipNewJobNum:string,
      /**  The rowid of the partsug record to create job for.  */  
   ipPartSugRowid:string,
      /**  The flag to get details.  */  
   ipGetDetails:boolean,
      /**  The flag to schedule all.  */  
   ipScheduleAll:boolean,
      /**  The flag to release all.  */  
   ipReleaseAll:boolean,
      /**  Indicates if the Traveler can be printed  */  
   ipTravelerReadyToPrint:boolean,
      /**  The flag to send the Job's creation to the background process.  */  
   ipBackground:boolean,
}

export interface CreateJobPWB_output{
parameters : {
      /**  output parameters  */  
   opCreatedJobNum:string,
   opErrMsg:string,
}
}

   /** Required : 
      @param ipJobHeadRowid
   */  
export interface DeleteAll_input{
      /**  The JobHead rowid of to delete all of the assemblies for  */  
   ipJobHeadRowid:string,
}

export interface DeleteAll_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param jobNum
   */  
export interface DeleteByID_input{
   jobNum:string,
}

export interface DeleteByID_output{
}

   /** Required : 
      @param ipJobNum
      @param ipAsmSeq
      @param ipMtlSeq
      @param ipPrefix
      @param ipStartNum
      @param ipEndNum
      @param ipSuffix
      @param ds
   */  
export interface DeleteRefDesRange_input{
      /**  The Job Number  */  
   ipJobNum:string,
      /**  The Job Assembly  */  
   ipAsmSeq:number,
      /**  The Job Material Seq  */  
   ipMtlSeq:number,
      /**  The Prefix to be used to delete Reference Designators  */  
   ipPrefix:string,
      /**  The Starting Number to delete Reference Designators  */  
   ipStartNum:number,
      /**  The Ending Number to delete Reference Designators  */  
   ipEndNum:number,
      /**  The Suffix to be used to delete Reference Designators  */  
   ipSuffix:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface DeleteRefDesRange_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

export interface Erp_Tablesets_AssemblyCostRow{
   AssemblySeq:number,
   Description:string,
   EstMtlBurUnitCost:number,
   EstUnitCost:number,
   LLABurdenCost:number,
   LLALaborCost:number,
   LLAMaterialCost:number,
   LLAMtlBurCost:number,
   LLAProdHours:number,
   LLASetupHours:number,
   LLASubcontractCost:number,
   LLEBurdenCost:number,
   LLELaborCost:number,
   LLEMaterialCost:number,
   LLEMtlBurCost:number,
   LLEProdHours:number,
   LLESetupHours:number,
   LLESubcontractCost:number,
   MtlBurCost:number,
   PartNum:string,
   TLABurdenCost:number,
   TLALaborCost:number,
   TLAMaterialCost:number,
   TLAMtlBurCost:number,
   TLAProdHours:number,
   TLASetupHours:number,
   TLASubcontractCost:number,
   TLEBurdenCost:number,
   TLELaborCost:number,
   TLEMaterialCost:number,
   TLEMtlBurCost:number,
   TLEProdHours:number,
   TLESetupHours:number,
   TLESubcontractCost:number,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JMtlStatFiltersRow{
   CutoffDate:string,
   ExceptionsOnly:boolean,
   JobNum:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JMtlStatFiltersTableset{
   JMtlStatFilters:Erp_Tablesets_JMtlStatFiltersRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_JMtlStatRow{
      /**  Assembly Sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the material record within a specific Job/Assembly.  */  
   MtlSeq:number,
      /**  The part number.  */  
   PartNum:string,
      /**  Description  */  
   Description:string,
      /**  Requested date for material.  */  
   ReqDate:string,
      /**  Required quantity per end item.  */  
   RequiredQty:number,
      /**  RequiredQty - IssuedQty.  */  
   OutstandingQty:number,
      /**  Part total onhand qty.  */  
   OnHandQty:number,
      /**  Part total WIP quantity.  */  
   WIPQty:number,
      /**  Part total available quantity.  */  
   AvailableQty:number,
      /**  Source for the associated JobMtl, either Vendor or Stock.  */  
   Source:string,
      /**  Purchase Order Number for the FIRST associated PO, if one is available.  */  
   PONum:number,
      /**  Due Date from the FIRST associated PO Rel.  */  
   DueDate:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  UOM for WIPQty  */  
   WIPUOM:string,
      /**  UOM for AvailableQty  */  
   AvailableUOM:string,
      /**  UOM for OnHandQty  */  
   OnHandUOM:string,
      /**  UOM for OutstandingQty  */  
   OutstandingUOM:string,
      /**  UOM for RequiredQty  */  
   RequiredUOM:string,
   AllocatedUOM:string,
   AttrClassID:string,
      /**  The Full Description of the Attribute Set  */  
   AttributeSetDescription:string,
      /**  AttributeSetID  */  
   AttributeSetID:number,
      /**  The Short Description of the Attribute Set  */  
   AttributeSetShortDescription:string,
   EnableAttributeSetSearch:boolean,
      /**  Optional field that contains the part revision. Default from the PartRev.RevisionNum field.  */  
   RevisionNum:string,
   TrackInventoryByRevision:boolean,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JMtlStatTableset{
   JMtlStat:Erp_Tablesets_JMtlStatRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_JbAppendTableset{
   JbMtlApp:Erp_Tablesets_JbMtlAppRow[],
   JbOprApp:Erp_Tablesets_JbOprAppRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_JbMtlAppRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  */  
   JobComplete:boolean,
      /**  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  */  
   IssuedComplete:boolean,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  */  
   PartNum:string,
      /**  A description of the material.  */  
   Description:string,
      /**  Quantity per parent.  Field Service was EstQty in FSCallMt.  */  
   QtyPer:number,
      /**  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  */  
   RequiredQty:number,
      /**  Internal unit of measure.  The unit used to measure the material.  */  
   IUM:string,
      /**   Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.
When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  */  
   LeadTime:number,
      /**   A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.
It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  */  
   RelatedOperation:number,
      /**  The material burden rate for this Job Material.  */  
   MtlBurRate:number,
      /**  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  */  
   EstMtlBurUnitCost:number,
      /**  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  */  
   EstUnitCost:number,
      /**  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  */  
   IssuedQty:number,
      /**  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  */  
   TotalCost:number,
      /**  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  */  
   MtlBurCost:number,
      /**  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  */  
   ReqDate:string,
      /**  The warehouse that the material is allocated against.  */  
   WarehouseCode:string,
      /**  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  */  
   SalvagePartNum:string,
      /**  Description of Salvageable material.  Use Part.Description for a default.  */  
   SalvageDescription:string,
      /**  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  */  
   SalvageQtyPer:number,
      /**  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  */  
   SalvageUM:string,
      /**  The salvage material burden rate for this Job Material.  */  
   SalvageMtlBurRate:number,
      /**  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  */  
   SalvageUnitCredit:number,
      /**  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  */  
   SalvageEstMtlBurUnitCredit:number,
      /**  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  */  
   SalvageQtyToDate:number,
      /**  Total salvage credit to date.  A summary of salvage receipt transactions.  */  
   SalvageCredit:number,
      /**  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  */  
   SalvageMtlBurCredit:number,
      /**   Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.
View as editor widget.  */  
   MfgComment:string,
      /**  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  */  
   VendorNum:number,
      /**  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  */  
   PurPoint:string,
      /**  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  */  
   BuyIt:boolean,
      /**  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  */  
   Ordered:boolean,
      /**   Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.
View as editor widget.  */  
   PurComment:string,
      /**   Indicates if this material will be backflushed.
Note: this field is defaulted from Part.BackFlush
Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  */  
   BackFlush:boolean,
      /**  Estimated Scrap.  */  
   EstScrap:number,
      /**  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  */  
   EstScrapType:string,
      /**  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  */  
   FixedQty:boolean,
      /**  Characters used on the drawing to show where material is used.  */  
   FindNum:string,
      /**  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**  Controls if an alert is to be sent when this JobMtl is completed.  */  
   SndAlrtCmpl:boolean,
      /**  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  */  
   RcvInspectionReq:boolean,
      /**  Site Identifier.  */  
   Plant:string,
      /**  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  */  
   Direct:boolean,
      /**  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  */  
   MaterialMtlCost:number,
      /**  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   MaterialLabCost:number,
      /**  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   MaterialSubCost:number,
      /**  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   MaterialBurCost:number,
      /**  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageMtlCredit:number,
      /**  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageLbrCredit:number,
      /**  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageBurCredit:number,
      /**  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageSubCredit:number,
      /**   Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler.
'I' to ignore in eScheduler
'M' to treat at Material in eScheduler
'A' to treat as AddResType in eScheduler  */  
   APSAddResType:string,
      /**  The service call that this Material belongs to.  */  
   CallNum:number,
      /**  The Service Call Line that this material relates to.  */  
   CallLine:number,
      /**  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   ProdCode:string,
      /**  FS - Unit Price for the Material in base currency.  */  
   UnitPrice:number,
      /**  FS - Billable Unit Price for the Material in base currency.  */  
   BillableUnitPrice:number,
      /**  FS - Billable Price per unit for the material in customers currency.  */  
   DocBillableUnitPrice:number,
      /**  Problem reason code from the reason master table. type Service call.  */  
   ResReasonCode:string,
      /**  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  */  
   PricePerCode:string,
      /**  Is this a billable material item.  */  
   Billable:boolean,
      /**  Holds the quantity of the item that has been shipped through misc.  shipments  */  
   ShippedQty:number,
      /**  FS - Unit Price for the Material in Customer currency.  */  
   DocUnitPrice:number,
      /**  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  */  
   QtyStagedToDate:number,
      /**  This material was added after initial setup of the job  */  
   AddedMtl:boolean,
      /**  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  */  
   MiscCharge:boolean,
      /**  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  */  
   MiscCode:string,
      /**  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  */  
   SCMiscCode:string,
      /**  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  */  
   RFQNeeded:boolean,
      /**  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  */  
   RFQVendQuotes:number,
      /**  RFQ number that the item is linked to.  */  
   RFQNum:number,
      /**  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  */  
   RFQLine:number,
      /**   RFQ Status.
W= Waiting, A = Accepted, R = Requested, C = Received  */  
   RFQStat:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**  GroupSeq  */  
   GroupSeq:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   TrackSerialNum:boolean,
      /**  Flag to indicate whether to append this material record  */  
   Append:boolean,
   MtlPartNum:string,
   OrigMtlSeq:number,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
   PullAsAsm:boolean,
      /**  The alternate method for the MtlPart  */  
   MtlAltMethod:string,
      /**  The alternate method for the material.  */  
   AltMethod:string,
      /**  The revision number for the MtlPartNum.  */  
   MtlRevisionNum:string,
      /**  Group Sequence used during Job Entry Append Details.  This field is used to associate materials to operations.  */  
   LinkGroupSeq:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JbOprAppRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobOper records are also marked.  This is used to make database access to open operation records more efficient.  */  
   JobComplete:boolean,
      /**   Indicates if this operation is completed. This is normally set to complete via labor entry transactions.   Not maintainable by Job Entry. It can't be reset to "No" if the JobHead.Complete = Yes.
Labor entry setting logic is: If SetUpComplete = Yes and  EstProdHours = 0 or ProdComplete = Yes and EstSetHours = 0 or both ProdComplete = Yes and SetupComplete = Yes  then OpComplete = Yes.
This field is also set by PO receipt entry "issue complete" for subcontract operations.  */  
   OpComplete:boolean,
      /**  Job Number  */  
   JobNum:string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   OprSeq:number,
      /**  Operation Master Code - Links the JobOper  record with a OpMaster record.  Default is given from WrkCenter.OpCode.  Must be valid in the OpMaster file.  */  
   OpCode:string,
      /**   The Operation standard ID.  This links the JobOper to the OpStd master file.  This can be blank or if entered must be valid if entered.  When this field is changed the ProdStandard, StdFormat and StdBasis should be refreshed with the new defaults.
Valid for "inside operations" only.  */  
   OpStdID:string,
      /**  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  */  
   EstSetHours:number,
      /**   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.
FORMULAS:
If StdFormat = "HR" then EstProdHours = ProdStandard. 
If StdFormat = "PH" then (JobOper.RunQty / Std).
If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.
If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.
If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.
If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.
If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  */  
   EstProdHours:number,
      /**   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.
NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  */  
   ProdStandard:number,
      /**   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;
"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,
"PM" - Pieces/Minute, "OH" - Operations/Hour,
"OM"  - Operations/minute, HR - Fixed Hours.  */  
   StdFormat:string,
      /**   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.
This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  */  
   StdBasis:string,
      /**  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  */  
   OpsPerPart:number,
      /**  Production Quantity per one of the Parent Item.  */  
   QtyPer:number,
      /**  Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  */  
   QueStartDate:string,
      /**  Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   QueStartHour:number,
      /**  Scheduled production start date. Not directly maintainable, updated via the scheduling process.  */  
   StartDate:string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  */  
   StartHour:number,
      /**  Scheduled production due date. Not directly maintainable, updated via the scheduling process.  */  
   DueDate:string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  */  
   DueHour:number,
      /**  Scheduled move due date. Not directly maintainable, updated via the scheduling process.  */  
   MoveDueDate:string,
      /**  Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   MoveDueHour:number,
      /**  Labor rate used for estimated production labor costs. Default from the OpMaster.ProdLabRate.  */  
   ProdLabRate:number,
      /**  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  */  
   SetupLabRate:number,
      /**  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  */  
   ProdBurRate:number,
      /**  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  */  
   SetupBurRate:number,
      /**  This indicates if this is an "added operation". An added operation is one that was not planned on.  */  
   AddedOper:boolean,
      /**  Defaulted from the WrkCenter.SchMachines field. This is the number of machines that this operation will run on at the same time. Logically thought of as a "Squeeze factor" to scheduling. That is the more machines, the shorter the schedule. This affects how much of the total daily workcenter capacity that the operation will consume. For example; Center has 4 machines, 8 Hours per day and operation 2 machines. This operation would consume 16 hours of capacity per day. So if it had 32 hours of estimated production it would schedule as taking 2 days. NOTE THIS ONLY APPLIES TO PRODUCTION HOURS, TOTAL SETUP HOURS ARE ADDED TO THE SQUEEZED PRODUCTION HOURS TO GET THE NUMBER OF HOURS TO BE SCHEDULED. It is however used to calculate the total setup hours on the operation.  */  
   Machines:number,
      /**  Defaulted from the WrkCenter.SetUpCrewSize field. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  */  
   SetUpCrewSize:number,
      /**  Defaults from the WrkCenter.ProdCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  */  
   ProdCrewSize:number,
      /**  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  */  
   ProdComplete:boolean,
      /**  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  */  
   SetupComplete:boolean,
      /**  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  */  
   ActProdHours:number,
      /**  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   ActProdRwkHours:number,
      /**  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  */  
   ActSetupHours:number,
      /**  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   ActSetupRwkHours:number,
      /**   For Non Subcontract operations: A summary of labor transaction detail. (LaborDtl.LaborQty). Labor entry/collection maintains this field.  Only the LaborQty for transactions that are Production labor ( LaborType = P ) and Not rework (LaborDtl.Rework = No) are included in this summary.
This quantity is used to reduce shop load when the system is configured to reduce load based on quantity completed. (JCSyst.RemoveLoad = Q)
For Subcontract Operations this field is updated by the Purchased Receipt process. The detail records are in the PartTran file.  */  
   QtyCompleted:number,
      /**  Setup function percent complete.  Maintained via labor entry.  */  
   SetupPctComplete:number,
      /**  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  */  
   EstScrap:number,
      /**  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  */  
   EstScrapType:string,
      /**  This flags the operation as being a "SubContract" or an "Internal" operation.  This also controls what fields are allowed to be updated for this record. For example,  an internal operation will not have a PartNum.  */  
   SubContract:boolean,
      /**  Inventory UOM  */  
   IUM:string,
      /**  Estimated Unit Cost for the SubContract operation.  Defaults from the Part table if valid PartNum.  */  
   EstUnitCost:number,
      /**  Hours required is calculated as days * 8.  */  
   DaysOut:number,
      /**  The PartNum to be shipped to the subcontract. Default the JobHead.PartNum or JobAsmbl.PartNum depending on the JobMtl.AssemblySeq.  */  
   PartNum:string,
      /**  Description used only for subcontract operations  */  
   Description:string,
      /**  The SubContractors VendorNum that ties back to the Vendor master file.  This is only valid for "SubContract"  operations. This field is not directly maintainable, instead its assigned by having the user either enter the "VendorID" and then finding the VendorNum in the Vendor file or by  selection list processing.  This is a mandatory entry for subcontract operations.  */  
   VendorNum:number,
      /**  The Vendors purchase point ID. This field is only for the "Subcontract" operations. Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default Purchase point defined in the Vendor file.  */  
   PurPoint:string,
      /**  Editor widget for Job operation comments.  */  
   CommentText:string,
      /**   Indicates the scheduling relationship between this and the preceding  operation. Possible values are "SS" - Start to Start, "FS" Finish to Start or "FF" Finish to Finish.
A "SS" can start when the preceding operation starts.
A "FS" starts when the preceding operation is finished.
A "FF" can finish when the preceding operation finishes.
These relationships do not span between levels of assemblies. The first operation on an assembly is always treated as being "FS" relationship.
A "FF" finishes when the preceding operation is finished.  */  
   SchedRelation:string,
      /**   The total operation quantity. This is a calculated field.  Calculated as (Assembly Required Qty X QtyPer) + Scrap. The assembly qty is either the JobHead.ProdQty if  JobOPer.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobOPer.AssemblySeq > 0.
This value is refreshed when maintenance is performed on the operation record or an assemblies production qty is changed  */  
   RunQty:number,
      /**   This field is blank or contains the UserID. When not blank it indicates that the operations schedule has been changed and is considered as being in a "What If" mode.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   WIName:string,
      /**  This is the What-If number of machines that this operation will run on at the same time.  Setup by and for scheduling from the Machines field.  */  
   WIMachines:number,
      /**  What-if Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  */  
   WIQueStartDate:string,
      /**  What-if Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   WIQueStartHour:number,
      /**  What if Scheduled production start date. Not directly maintainable, updated via the scheduling process.  */  
   WIStartDate:string,
      /**  This field is established by scheduling. It represents the What If "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  */  
   WIStartHour:number,
      /**  What If Scheduled production due date. Not directly maintainable, updated via the scheduling process.  */  
   WIDueDate:string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  */  
   WIDueHour:number,
      /**  What-If Scheduled move due date. Not directly maintainable, updated via the scheduling process.  */  
   WIMoveDueDate:string,
      /**  What-if Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   WIMoveDueHour:number,
      /**  The Number of Hours per machine per day that this operations "What If" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining ShopLoad records.  */  
   WIHoursPerMachine:number,
      /**  Date at which the operations current outstanding "What-If" load starts at.  Updated by the JobOper write trigger. (See LoadDate)  */  
   WILoadDate:string,
      /**  "Hour offset from the beginning of the work day" for the operations outstanding "What-If"  load. Related to WILoadDate.  */  
   WILoadHour:number,
      /**  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  */  
   ActBurCost:number,
      /**   FOR NON-SUBCONTRACT OPERATIONS: Total of "ALL" labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.
FOR SUBCONTRACT OPERATIONS: The Total Cost, updated via the receipt process.  */  
   ActLabCost:number,
      /**  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  */  
   ReworkBurCost:number,
      /**  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup & Production. Updated via the LaborDtl\Write.p trigger.  */  
   ReworkLabCost:number,
      /**   A total additional charge that is incurred when purchasing this service. Ex(Lot,Setup,Handling,etc...).
Defaulted from VendPart.MiscAmt. This is NOT part of the a Unit Cost. It is NOT consider in the logic of using Minimum Cost.  */  
   MiscAmt:number,
      /**  The Number of Hours per machine per day that this operations "actual" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining the ShopLoad records.  */  
   HoursPerMachine:number,
      /**   Date at which the operations current outstanding load starts at.
Ex: Op schedule is 2/1/97 - 2/10/97, initially LoadDate = 2/1/97. As load is relieved through labor processing the LoadDate moves forward accordingly. When 1/2 completed the LoadDate would be 2/5/97. This field is primarily used by the Scheduling Board to calculate the graphical image of outstanding load.  Updated by the JobOper write trigger.  */  
   LoadDate:string,
      /**  "Hour offset from the beginning of the work day" for the operations outstanding load. Related to LoadDate.  */  
   LoadHour:number,
      /**  Internally used field to prevent redundant read of JobOper during execution of "Reloader" program. (See WrkCenter.ReloadNum)  */  
   ReloadNum:number,
      /**  Controls if an alert is to be sent when this JobOper is completed.  */  
   SndAlrtCmpl:boolean,
      /**  Indicates if  Inspection is required when items are received to this JobOper (subcontract only). Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  */  
   RcvInspectionReq:boolean,
      /**  Identical to JobHead.JobEngineered.  ShopLoad capacity is only allocated to Jobs where JobEngineered = YES.  */  
   JobEngineered:boolean,
      /**   The estimated set up hours per machine.
Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  */  
   EstSetHoursPerMch:number,
      /**   Part Revision number.
Pertains to subcontracting operations only.   An optional field.   Related JobAsmbl.RevisionNum is used as the default.  */  
   RevisionNum:string,
      /**  Currently not used. Prep for future development.  */  
   AutoReceiptDate:string,
      /**  The labor date of the last labor transaction that was posted to this operation.  Used by the JobOper write trigger Auto Receieve logic.  */  
   LastLaborDate:string,
      /**  The service call that this operation belongs to.  */  
   CallNum:number,
      /**  The Service Call Line that this operation relates to.  */  
   CallLine:number,
      /**  Labor rate used for  time on an operation.  Time per hour per technician. in base currency.  */  
   LaborRate:number,
      /**  Billable Labor rate used for  time on a service.  Time per hour per technician. in base currency. This field considers the percentage coverage of a warranty or contract.  */  
   BillableLaborRate:number,
      /**  Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. Does not consider warranty or contract  */  
   DocLaborRate:number,
      /**  Billable Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. considers warranty or contract  */  
   DocBillableLaborRate:number,
      /**  FS - Is this a billable operation.  */  
   Billable:boolean,
      /**  FS - Unit Price for the subcontract in base currency.  */  
   UnitPrice:number,
      /**  FS - Billable Unit Price for the subcontract in base currency.  */  
   BillableUnitPrice:number,
      /**  FS - Billable Price per unit for the subcontract in customers currency.  */  
   DocBillableUnitPrice:number,
      /**  FS - Unit Price for the for the Subcontract in Customer currency.  */  
   DocUnitPrice:number,
      /**  Indicates the Method for Labor Entry.  Can be "T" - Time and Quantity, "Q" - Quantity Only (Time is estimated), "B" - Backflush or "X" - Time - Backflush Qty.  */  
   LaborEntryMethod:string,
      /**  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  */  
   PricePerCode:string,
      /**  The quantity requested for first article inspection.  */  
   FAQty:number,
      /**  The "to date" quantity that has been moved to the input Warehouse/Bin of the subsequent operations ResourceGroup/Resource input Warehouse/Bin.  This is NOT A balance.  It is a "to date" value.  It is not reduced as it is consumed.  Used in calculation of "Outstanding" WIP in the Request Material/WIP program (ame30-dg.w).  Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the WIP material in/out of the staging area (Issues, Returns).  */  
   QtyStagedToDate:number,
      /**  A flag to indicate that this job operation requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  This only applies to subcontract operations.  */  
   RFQNeeded:boolean,
      /**  The number of vendor quotes that are required for this job subcontract operation.  Can be zero if RFQ(s) are not required.  */  
   RFQVendQuotes:number,
      /**  RFQ number that the item is linked to.  */  
   RFQNum:number,
      /**  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  */  
   RFQLine:number,
      /**   RFQ Status.
W= Waiting, A = Accepted, R = Requested, C = Received  */  
   RFQStat:string,
      /**  Used to group operation to save on setups.  */  
   SetupGroup:string,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   RestoreFlag:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**   Identifies the primary JobOpDtl to be used for setup.  The setup time for the operation is determined on the JobOpDtl.
If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = S or B.  */  
   PrimarySetupOpDtl:number,
      /**   Identifies the primary JobOpDtl to be used for production.  The production run time for the operation is determined on the JobOpDtl.
If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = P or B.  */  
   PrimaryProdOpDtl:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  */  
   QtyPerCycle:number,
   WIWCCode:string,
   APSPrepOp:number,
   APSNextOp:number,
   APSAltOp:number,
   APSSpecificResource:string,
   APSCycleTime:number,
   APSConstantTime:number,
   APSSetupGroup:number,
   APSMakeFactor:number,
   APSContainerSize:number,
   APSSchedulerName:string,
   APSMaxLength:number,
   APSTransferTime:number,
   APSEffectiveness:number,
   APSOperationClass:string,
   APSAuxResource:string,
   APSAddResource:string,
      /**  Indicates whether to append this operation  */  
   Append:boolean,
      /**  The new operation sequence (for related operations)  */  
   AppendedOprSeq:number,
      /**  Indicates if final operation  */  
   FinalOperation:boolean,
   AutoReceive:boolean,
   ResourceGrpID:string,
   ParentPartNum:string,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
      /**  Job Oper Alternate Method.  */  
   AltMethod:string,
      /**  Target Assembly Sequence used during Job Entry Append Details.  */  
   TargetAsmSeq:number,
      /**  Target Assembly Sequence used during Job Entry Append Details.  */  
   TargetOprSeq:number,
      /**  Group Sequence used during Job Entry Append Details.  This field is used to associate materials to operations.  */  
   GroupSeq:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAsmRefDesRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  Identifier of Reference Designator  */  
   RefDes:string,
      /**  Unique identifies the reference designator with the material sequence.  */  
   RefDesSeq:number,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   MtlPartNum:string,
      /**  Free form side location. (Top, Bottom, Both, Level, etc)  */  
   Side:string,
      /**  X Coordinate of the reference designator  */  
   XLocation:number,
      /**  Y Coordinate of the reference designator  */  
   YLocation:number,
      /**  Z Coordinate of the reference designator  */  
   ZLocation:number,
      /**  Rotation of the reference designator. Max value = 360.000  */  
   Rotation:number,
      /**  Designator Description  */  
   Description:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAsmblAttchRow{
   Company:string,
   JobNum:string,
   AssemblySeq:number,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAsmblInspRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely identifies the JobAsmblInsp record within the JobNum  */  
   PlanSeq:number,
      /**  The inspection plan part number (configurator part number).  */  
   InspPlanPartNum:string,
      /**  The inspection plan revision number (configurator revision number).  */  
   InspPlanRevNum:string,
      /**  The specification ID.  Must be valid in the SpecHed table.  */  
   SpecID:string,
      /**  The specification revision number.  Must be valid in the SpecRev table.  */  
   SpecRevNum:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   SpecHedDescription:string,
   BitFlag:number,
   InspPlanDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAsmblRestrictSubstRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  */  
   JobNum:string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  */  
   AssemblySeq:number,
      /**  Restriction Type identification.  */  
   RestrictionTypeID:string,
      /**  Substance identification.  */  
   SubstanceID:string,
      /**  Default weight of the substance per primary part of UOM  */  
   Weight:number,
      /**  By default the primary UOM of the part.  */  
   WeightUOM:string,
      /**  Defaulted from Part Master Substances. When true then weight is disregarded in compliance roll-up.  */  
   Manual:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   PartNum:string,
   BitFlag:number,
   JobNumPartDescription:string,
   RestrictionDescription:string,
   SubstanceDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAsmblRestrictionRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  */  
   JobNum:string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  */  
   AssemblySeq:number,
      /**  Restriction Type identification.  */  
   RestrictionTypeID:string,
      /**  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  */  
   PartNum:string,
      /**  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  */  
   Manual:boolean,
      /**  Enabled when manual flag is unchecked and company configuration flag for allow direct roll-up is enabled. Default to Indirect Roll-Up.  */  
   RollupType:string,
      /**  Displays one of the compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  */  
   Compliance:string,
      /**  Set when Manual flag is checked or after compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  */  
   ComplianceDate:string,
      /**  Set after compliance roll-up  */  
   LastRollUp:string,
      /**  Displays one of the built compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  */  
   BuiltCompliance:string,
      /**  Set when Manual flag is checked or after built compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  */  
   BuiltComplianceDate:string,
      /**  Set after built compliance roll-up  */  
   BuiltLastRollUp:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  */  
   Weight:boolean,
   EnableRollUpType:boolean,
   BitFlag:number,
   JobNumPartDescription:string,
   RestrictionDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAsmblRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if the Job is complete.  This is a mirror image of JobHead.JobComplete.  Not directly maintainable.  When Job is complete, then all assembly records are also marked complete.  This is used to make database access to open assembly records more efficient.  */  
   JobComplete:boolean,
      /**  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  */  
   JobNum:string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  */  
   AssemblySeq:number,
      /**  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  */  
   PartNum:string,
      /**  Description for the Part on the assembly record.  This cannot be blank.  Use Part.Description as default if a valid Part record exists.  */  
   Description:string,
      /**  The revision number for the assembly.  An optional field.  Defaults from the most current PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**  The production quantity required for this assembly per one of it's parent part.  */  
   QtyPer:number,
      /**  The internal unit of measure for this assembly.  Use the Part.IUM as a default.  */  
   IUM:string,
      /**   This is how many of the assemblies are required to produce the END ITEM.  This is a calculated field.  Calculated as the (( Parents RequiredQty - Parents PullQty) X QtyPer) + OverRunQty.
This field needs to be refreshed whenever a change is made to the production quantity in any of its parents or when its QtyPer, or Overrun fields are changed. The refresh may also occur if the structure of the assemblies is changed.
The production quantity for the assembly which will drive raw material requirements and estimated production times can be determined by ( RequiredQty - PullQty).  */  
   RequiredQty:number,
      /**  This indicates a quantity that will be pulled from inventory for this assembly instead of being manufactured. This is a fixed quantity and is not affected by  QtyPer type changes. If this a valid Part, then it must update the PartWhse.AllocQty.  */  
   PullQty:number,
      /**  This is the warehouse that the material is allocated against.  */  
   WarehouseCode:string,
      /**  The material burden rate for this Job Assembly.  */  
   MtlBurRate:number,
      /**  The estimated unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  */  
   EstUnitCost:number,
      /**  The estimated Mtl burden unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  */  
   EstMtlBurUnitCost:number,
      /**  This value indicates a quantity that is planned to be overrun and put into inventory. This is kept as a separate field so that is does not distort the BOM requirement relationships. This increases the total production quantity for the assembly.  This is a FIXED quantity and is not affected by structure or qty/per type changes.  */  
   OverRunQty:number,
      /**  Scheduled start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process.  */  
   StartDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  */  
   StartHour:number,
      /**  The scheduled due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  */  
   DueDate:string,
      /**  This field is established by scheduling.  It represents the  "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  */  
   DueHour:number,
      /**  Sequence number of the Parent Assembly.  */  
   Parent:number,
      /**   The  sequence number of the prior assembly that is on the same level as this assembly.  This  is known as a PriorPeer assembly.  This is automatically maintained by the maintenance programs.
The logic is to find an assembly where the Parent is the same and the NextPeer is -1.  Then NextPeer of that assembly gets updated with this assemblies sequence number and this assembly gets its PriorPeer field updated with the sequence number from the assembly which was found.  */  
   PriorPeer:number,
      /**   The sequence number of the Next Assembly on the same level as this assembly.  This is known as a NextPeer assembly.  Automatically maintained by the maintenance programs.
The logic is to find an assembly where the Parent is the same and the PriorPeer is -1.  Then the PriorPeer of that assembly is updated with this assemblies sequence number and then this assemblies NextPeer gets updated with the sequence number from the assembly that was found.  */  
   NextPeer:number,
      /**  Sequence number of this assemblies very first subassembly.  This is known as the Child assembly.  Automatically maintained by the maintenance programs.  The logic is to find the Parent assembly record and if its child is -1, update it with this assemblies sequence number.  */  
   Child:number,
      /**  Total cost to date, of this component that was issued from stock.  */  
   TotalCost:number,
      /**  Total material burden cost to date, of this component that was issued from stock.  */  
   MtlBurCost:number,
      /**  This quantity is a summary of all Issue Transactions that were issued to meet this assemblies PullQty requirements.  This is not directly maintainable.  */  
   IssuedQty:number,
      /**  Optional field for Engineering Drawing Number.  Defaulted from BomHead.DrawNum during methods pull functions.  */  
   DrawNum:string,
      /**  Indicates if the pull quantity has been issued complete.  If "yes" then this record is NOT part of the PartWhse.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  */  
   IssuedComplete:boolean,
      /**  Editor widget for Job Assembly comments.  */  
   CommentText:string,
      /**  Indicates if this assembly is to be included in the browse of assemblies in the  "get details" function.  The user can use this option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly, it just keeps it out of the browse.  */  
   InCopyList:boolean,
      /**  An internally system assigned integer which is used as part of an index to organize the records into a Bill of Material fashion sequence.  */  
   BomSequence:number,
      /**  An internally system assigned integer which represents the "Level of Indention" of the assembly in reference to the Bill of Material structure.  */  
   BomLevel:number,
      /**  Scheduled "What If" start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process  */  
   WIStartDate:string,
      /**  This field is established by scheduling.  It represents the What-If  "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  */  
   WIStartHour:number,
      /**  The scheduled "What-If" due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  */  
   WIDueDate:string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  */  
   WIDueHour:number,
      /**  This Level Actual Labor Cost.  */  
   TLALaborCost:number,
      /**  This Level Actual Burden Cost.  */  
   TLABurdenCost:number,
      /**  This Level Actual Material Cost.  */  
   TLAMaterialCost:number,
      /**  This Level Actual Subcontract Cost.  */  
   TLASubcontractCost:number,
      /**  This Level Actual Material Burden Cost.  */  
   TLAMtlBurCost:number,
      /**  This Level Actual Setup Hours.  */  
   TLASetupHours:number,
      /**  This Level Actual Production Hours.  */  
   TLAProdHours:number,
      /**  This Level Estimated Labor Cost.  */  
   TLELaborCost:number,
      /**  This Level Estimated Burden Cost.  */  
   TLEBurdenCost:number,
      /**  This Level Estimated Material Cost.  */  
   TLEMaterialCost:number,
      /**  This Level Estimated Subcontract Cost.  */  
   TLESubcontractCost:number,
      /**  This Level Estimated Material Burden Cost.  */  
   TLEMtlBurCost:number,
      /**  This Level Estimated Setup Hours.  */  
   TLESetupHours:number,
      /**  This Level Estimated Production Hours.  */  
   TLEProdHours:number,
      /**  Lower Level Actual Labor Cost.  */  
   LLALaborCost:number,
      /**  Lower Level Burden Labor Cost.  */  
   LLABurdenCost:number,
      /**  Lower Level Actual Material Cost.  */  
   LLAMaterialCost:number,
      /**  Lower Level Actual Subcontractor Cost.  */  
   LLASubcontractCost:number,
      /**  Lower Level Actual Material Burden Cost.  */  
   LLAMtlBurCost:number,
      /**  Lower Level Actual Setup Hours.  */  
   LLASetupHours:number,
      /**  Lower Level Actual Production Hours.  */  
   LLAProdHours:number,
      /**  Lower Level Estimated Labor Cost.  */  
   LLELaborCost:number,
      /**  Lower Level Estimated Burden Cost.  */  
   LLEBurdenCost:number,
      /**  Lower Level Estimated Material Cost.  */  
   LLEMaterialCost:number,
      /**  Lower Level Estimated Subcontract Cost.  */  
   LLESubcontractCost:number,
      /**  Lower Level Estimated Material Burden Cost.  */  
   LLEMtlBurCost:number,
      /**  Lower Level Estimated Setup Hours.  */  
   LLESetupHours:number,
      /**  Lower Level Estimated Production Hours.  */  
   LLEProdHours:number,
      /**   The operation number (JobOper.OprSeq) that is marked to do the Automatic Receipt to inventory.  Note: Zero = no operation is set to perform the auto receive into inventory function.
This field is not directly maintainable.  Instead it is set during operation maintenance by having the user mark a check box indicating "Auto Receive" which then updates this field with the operations sequence number.  */  
   AutoRecOpr:number,
      /**   The sequence of the operation that is to be considered as the operation which indicates the quantity complete for the Job/Assembly.  In other words this operations completed quantity = Job/Assembly completed.   Note: Zero = no operation is set and that the system should use the last operation to determine quantity complete.
This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Final Operation" which then updates this field with the operations sequence number.  */  
   FinalOpr:number,
      /**  FUTURE IMPLEMENTATION - Characters used on the parent assembly drawing to show where assembly  is used.  */  
   FindNum:string,
      /**  Total received to stock.  This pertains receiving an OverRun quantity.  Used to update the PartDtl file for expected production quantity.  PartDtl is OverRun - ReceivedToStock.  */  
   ReceivedToStock:number,
      /**  Site Identifier.  */  
   Plant:string,
      /**  Indicates if this assembly material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified..  */  
   Direct:boolean,
      /**   An assembly record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.
It can be left as zero meaning that this assembly is required at the very beginning of the production job.  The related operation is also used to calculate scheduled start date.  */  
   RelatedOperation:number,
      /**  This Level Actual Material Labor Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialLabCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   TLAMaterialLabCost:number,
      /**  This Level Actual Issued Material Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialMtlCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   TLAMaterialMtlCost:number,
      /**  This Level Actual Material Subcontract Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialSubCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   TLAMaterialSubCost:number,
      /**  This Level Actual Material Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialBurCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  */  
   TLAMaterialBurCost:number,
      /**  Lower Level Actual Material Labor Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialLabCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   LLAMaterialLabCost:number,
      /**  Lower Level Actual Material Material Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialMtlCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   LLAMaterialMtlCost:number,
      /**  Lower Level Actual Material Subcontract Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialSubCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   LLAMaterialSubCost:number,
      /**  Lower Level Actual Material Burden Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialBurCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  */  
   LLAMaterialBurCost:number,
      /**  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  */  
   TotalMtlMtlCost:number,
      /**  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   TotalMtlLabCost:number,
      /**  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   TotalMtlSubCost:number,
      /**  Total Burden cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   TotalMtlBurCost:number,
      /**  The service call that this assembly belongs to.  */  
   CallNum:number,
      /**  The Service Call Line that this assembly relates to.  */  
   CallLine:number,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   RestoreFlag:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**  The date when the configuration was completed for the assembly.  */  
   LastConfigDate:string,
      /**  The system time when the configuration was completed for the assembly.  */  
   LastConfigTime:number,
      /**  The User ID of the last user to complete the configuration of the assembly.  */  
   LastConfigUserID:string,
      /**  This field will be set to the value of the JobAsmbl.RequiredQty at the time the JobHead.Engineered flag is set to true.  */  
   OrigRequiredQty:number,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  */  
   WhseAllocFlag:boolean,
      /**  This Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for this level.  Otherwise, TLAMaterialMtlBurCost may be populated but is not included in the calculation of TLAMaterialCost.  */  
   TLAMaterialMtlBurCost:number,
      /**  Lower Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for the lower level.  Otherwise, LLAMaterialMtlBurCost may be populated but is not included in the calculation of LLAMaterialCost.  */  
   LLAMaterialMtlBurCost:number,
      /**  This Level Actual Component Labor Cost.  This is the Total Labor costs of all manufactured parts issued as material for this level. Unlike TLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   TLAMfgCompLabCost:number,
      /**  This Level Actual Component Material Cost.  This is the Total Material costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   TLAMfgCompMtlCost:number,
      /**  This Level Actual Component Subcontract Cost.  This is the Total Subcontract costs of all manufactured parts issued as material for this level. Unlike TLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   TLAMfgCompSubCost:number,
      /**  This Level Actual Component Burden Cost.  This is the Total Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   TLAMfgCompBurCost:number,
      /**  This Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  */  
   TLAMfgCompMtlBurCost:number,
      /**  Lower Level Actual Component Labor Cost. This is the Total Labor costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   LLAMfgCompLabCost:number,
      /**  Lower Level Actual Component Material Cost. This is the Total Material costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   LLAMfgCompMtlCost:number,
      /**  Lower Level Actual Component Subcontract Cost. This is the Total Subcontract costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   LLAMfgCompSubCost:number,
      /**  Lower Level Actual Component Burden Cost. This is the Total Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   LLAMfgCompBurCost:number,
      /**  Lower Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  */  
   LLAMfgCompMtlBurCost:number,
      /**  Assembly Weight defaulted from Part Master.  */  
   Weight:number,
      /**  Assembly Weight UOM defaulted from Part Master.  */  
   WeightUOM:string,
      /**  Original Material Sequence. Used in the configurator.  */  
   OrigMtlSeq:number,
      /**  Original Rule Tag. Used in the Configurator.  */  
   OrigRuleTag:string,
      /**  Validate Reference Designators.  */  
   ValRefDes:boolean,
      /**  Base Part Number. Used in the configurator to identify the configurator part Number.  */  
   BasePartNum:string,
      /**  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  */  
   BaseRevisionNum:string,
      /**   The estimated material unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   EstMtlUnitCost:number,
      /**   The estimated labor unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   EstLbrUnitCost:number,
      /**   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   EstBurUnitCost:number,
      /**   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  */  
   EstSubUnitCost:number,
      /**  Indicates if the sub-assemby can be spawned off to a different job.  This can occur during the firming up of a job.  */  
   PlanAsAsm:boolean,
      /**  Plan as assembly reference.  Used to link related subassemblies together when multiple assemblies are created for the same part due to PartSite lot size values.  */  
   PAARef:string,
      /**  Used only on Plan As Assembly records.  Indicates the sub assembly will be split of from the the current job and a separate job for the assembly will be created.  */  
   PAAFirm:boolean,
      /**  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  */  
   EstScrap:number,
      /**  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  */  
   EstScrapType:string,
      /**  If TRUE then this field will mean that the smart string has already been processed  */  
   SmartStringProcessed:boolean,
      /**  Original smart string passed in for configuration  */  
   SmartString:string,
      /**  Required number of designators  */  
   ReqRefDes:number,
      /**  Reassign Serial Numbers Assembly  */  
   ReassignSNAsm:boolean,
      /**  This Level Actual Other Direct Cost.  */  
   TLAODCCost:number,
      /**  AssemblyMatch  */  
   AssemblyMatch:string,
      /**  JdfStatus  */  
   JdfStatus:string,
      /**  PressDevice  */  
   PressDevice:string,
      /**  DigitalFileName  */  
   DigitalFileName:string,
      /**  PrepressJobName  */  
   PrepressJobName:string,
      /**  JdfPrepressAction  */  
   JdfPrepressAction:string,
      /**  SendToPress  */  
   SendToPress:boolean,
      /**  RemovedFromPlan  */  
   RemovedFromPlan:boolean,
      /**  SendToPressInitiator  */  
   SendToPressInitiator:number,
      /**  OperationType  */  
   OperationType:number,
      /**  SendToPrePress  */  
   SendToPrePress:boolean,
      /**  GroupSeq  */  
   GroupSeq:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  PartPlanInfo  */  
   PartPlanInfo:string,
      /**  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  */  
   OrigStructTag:string,
      /**  ContractID  */  
   ContractID:string,
      /**  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  */  
   LinkToContract:boolean,
      /**  PCLinkRemoved  */  
   PCLinkRemoved:boolean,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   ExternalMESSyncRequired:boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   ExternalMESLastSync:string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  Planning number of pieces for this attribute set.  */  
   PlanningNumberOfPieces:number,
      /**  The unique identifier of the related CPQ Configured Quote Product.  */  
   KBConfigProdID:number,
      /**  Calculated Available Quantity  */  
   AvailableQty:number,
      /**  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  */  
   bUseAvailQty:boolean,
      /**  The child assembly sequence field.  The JobAsmbl.Child field value.  The field Child was causing a .net conflict.  */  
   ChildAssemblySeq:number,
      /**  The internal unit of measure for this assembly.  Same as IUM but readOnly  */  
   DispIUM:string,
      /**  The order JobAsmbl records should be displayed.  */  
   DisplayOrder:number,
      /**  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  */  
   EnableAsmSplitCosts:boolean,
   EnableMtlSalvage:boolean,
   EnablePurDir:boolean,
      /**  If it's Stocked assembly and PlanAsAsm is true.  */  
   FirmProcEnable:boolean,
      /**  Is used to select stocked Job Assemblies which will be processed by Firming Process. Is available only for .FirmProcEnable = true.  */  
   FirmProcess:boolean,
      /**  External field for EQSyst GetCostsFromInventory  */  
   GetCostsFromInventory:boolean,
      /**  External field to hold JCSyst.GetCostsFromTemplate value  */  
   GetCostsFromTemplate:boolean,
      /**  The parent assembly sequence field.  The JobAsmbl.Parent field value.  The field Parent was causing a .net conflict.  */  
   ParentAssemblySeq:number,
      /**  Parent Description  */  
   ParentDescription:string,
      /**  Parent PartNum  */  
   ParentPartNum:string,
      /**  Parent RevisionNum  */  
   ParentRev:string,
      /**  Internal flag to identify if current Part is an Inventory Part.  */  
   PartExists:boolean,
   PartmasterPart:boolean,
      /**  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  */  
   RDEndNum:number,
      /**  The prefix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  */  
   RDPrefix:string,
      /**  This number will be used to create reference designators. This field will be defaulted to ?1?  */  
   RDStartNum:number,
      /**  The suffix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  */  
   RDSuffix:string,
      /**  Related Operation Description  */  
   RelatedOperationDesc:string,
      /**  For Internal use ONLY to set a flag calculated from BO to show a warning message to the user when there exists some inconsistences between records on JobAsml table that can cause infinite loop when BOM Resequence.  */  
   ShowWarningBOMResequence:boolean,
      /**  External field used to determine if Add assembly as "Sub"assembly or "Asm"bly  */  
   AddAsmAs:string,
      /**  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  */  
   bAvailQty:number,
   EnableAttributeSetSearch:boolean,
   AttributeSetShortDescription:string,
   AttributeSetDescription:string,
   AttrClassID:string,
      /**  This Level Total Actual Cost (TLAMaterialCost + TLALaborCost + TLABurdenCost + TLASubcontractCost + TLAMtlBurCost)  */  
   TLATotalCost:number,
      /**  The Level Estimated Total Cost (TLEMaterialCost + TLELaborCost + TLEBurdenCost + TLESubcontractCost + TLEMtlBurCost)  */  
   TLETotalCost:number,
   BitFlag:number,
   AnalysisCdDescription:string,
   CallLineLineDesc:string,
   DynAttrValueSetShortDescription:string,
   DynAttrValueSetDescription:string,
   JobNumPartDescription:string,
   PartNumIUM:string,
   PartNumPartDescription:string,
   PartNumTrackDimension:boolean,
   PartNumPricePerCode:string,
   PartNumTrackLots:boolean,
   PartNumTrackSerialNum:boolean,
   PartNumSellingFactor:number,
   PartNumSalesUM:string,
   PartNumTrackInventoryByRevision:boolean,
   PartNumAttrClassID:string,
   PartNumTrackInventoryAttributes:boolean,
   PlantName:string,
   WarehouseCodeDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobAuditRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job number.  */  
   JobNum:string,
      /**  System date when this change was made.  */  
   ChangeDate:string,
      /**  System time (seconds since midnight) of when the changes were made.  */  
   ChangeTime:number,
      /**  UserID who made the changes.  Not maintainable by the user.  */  
   ChangedBy:string,
      /**  Used to enter a description of the changes that were made.  */  
   ChangeDescription:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Formatted display of ChangeTime  */  
   DspChangeTime:string,
   BitFlag:number,
   JobNumPartDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobCostsTableset{
   AssemblyCost:Erp_Tablesets_AssemblyCostRow[],
   MaterialCost:Erp_Tablesets_MaterialCostRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_JobEntryTableset{
   JobHead:Erp_Tablesets_JobHeadRow[],
   JobHeadAttch:Erp_Tablesets_JobHeadAttchRow[],
   JobAsmbl:Erp_Tablesets_JobAsmblRow[],
   JobAsmblAttch:Erp_Tablesets_JobAsmblAttchRow[],
   JobAsmblInsp:Erp_Tablesets_JobAsmblInspRow[],
   JobMtl:Erp_Tablesets_JobMtlRow[],
   JobMtlAttch:Erp_Tablesets_JobMtlAttchRow[],
   JobMtlInsp:Erp_Tablesets_JobMtlInspRow[],
   JobMtlRefDes:Erp_Tablesets_JobMtlRefDesRow[],
   JobMtlRestriction:Erp_Tablesets_JobMtlRestrictionRow[],
   JobMtlRestrictSubst:Erp_Tablesets_JobMtlRestrictSubstRow[],
   JobOper:Erp_Tablesets_JobOperRow[],
   JobOperAttch:Erp_Tablesets_JobOperAttchRow[],
   JobOperAction:Erp_Tablesets_JobOperActionRow[],
   JobOperActionParam:Erp_Tablesets_JobOperActionParamRow[],
   JobOperInsp:Erp_Tablesets_JobOperInspRow[],
   JobOperMachParam:Erp_Tablesets_JobOperMachParamRow[],
   JobOpDtl:Erp_Tablesets_JobOpDtlRow[],
   JobResources:Erp_Tablesets_JobResourcesRow[],
   JobOperRestriction:Erp_Tablesets_JobOperRestrictionRow[],
   JobOperRestrictSubst:Erp_Tablesets_JobOperRestrictSubstRow[],
   JobAsmblRestriction:Erp_Tablesets_JobAsmblRestrictionRow[],
   JobAsmblRestrictSubst:Erp_Tablesets_JobAsmblRestrictSubstRow[],
   JobAsmRefDes:Erp_Tablesets_JobAsmRefDesRow[],
   JobAudit:Erp_Tablesets_JobAuditRow[],
   JobPart:Erp_Tablesets_JobPartRow[],
   JobProd:Erp_Tablesets_JobProdRow[],
   JobStage:Erp_Tablesets_JobStageRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_JobHeadAttchRow{
   Company:string,
   JobNum:string,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobHeadListRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  */  
   JobClosed:boolean,
      /**  Date the Job was closed.  Defaults as the system but can be overridden.  */  
   ClosedDate:string,
      /**  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  */  
   JobComplete:boolean,
      /**  The date that production was completed for this Job.  Maintained via Job Completion Processing.  */  
   JobCompletionDate:string,
      /**  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  */  
   JobEngineered:boolean,
      /**  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  */  
   JobReleased:boolean,
      /**  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  */  
   JobHeld:boolean,
      /**  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  */  
   JobNum:string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   PartNum:string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  */  
   DrawNum:string,
      /**  The description of the part that is to be manufactured.  Use the Part.Description as the default.  */  
   PartDescription:string,
      /**  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.
See JobPart table for information on end parts of a job.  */  
   ProdQty:number,
      /**  The unit of measure for the job.  Defaulted from Part.IUM.  */  
   IUM:string,
      /**  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   StartDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   StartHour:number,
      /**  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   DueDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   DueHour:number,
      /**  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  */  
   ReqDueDate:string,
      /**  An optional user defined code.  This will be used for report selections and views of job headers.  */  
   JobCode:string,
      /**  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  */  
   QuoteNum:number,
      /**  Contains the quote line number reference. (see QuoteNum )  */  
   QuoteLine:number,
      /**  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   ProdCode:string,
      /**  Editor widget for Job header comments.  */  
   CommentText:string,
      /**  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  */  
   ExpenseCode:string,
      /**  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  */  
   InCopyList:boolean,
      /**   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   WIName:string,
      /**  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   WIStartDate:string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   WIStartHour:number,
      /**   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.
This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  */  
   Candidate:boolean,
      /**  Scheduling Code.  SchedCode references a record in the SchedPri table.  */  
   SchedCode:string,
      /**  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  */  
   SchedLocked:boolean,
      /**  Associates the JobHead with a project in the Project table.  This can be blank.  */  
   ProjectID:string,
      /**  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  */  
   WIPCleared:boolean,
      /**  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  */  
   JobFirm:boolean,
      /**  A LIST-DELIM delimited list of people.  */  
   PersonList:string,
      /**   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.
Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  Defaults from the ProdGrup.PersonID.  */  
   PersonID:string,
      /**  Production Team for the Job.  Associates the JobHead with a ProdTeam.  */  
   ProdTeamID:string,
      /**   Production quantity completed.
Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  */  
   QtyCompleted:number,
      /**  Site Identifier.  */  
   Plant:string,
      /**  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  */  
   DatePurged:string,
      /**  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  */  
   TravelerReadyToPrint:boolean,
      /**  The last date the job traveler was mass printed.  */  
   TravelerLastPrinted:string,
      /**  Indicates if the Status can be printed. Print functions are not available if this is = No.  */  
   StatusReadyToPrint:boolean,
      /**  The last date the job status was mass printed.  */  
   StatusLastPrinted:string,
      /**  The Service Call number that this Job is linked to.  */  
   CallNum:number,
      /**  The Service Call Line that this Job is linked to.  */  
   CallLine:number,
      /**  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  */  
   JobType:string,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**  The help desk case that created this job.  */  
   HDCaseNum:number,
      /**  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  */  
   ProductionYield:boolean,
      /**   The ID of the Equipment that this "Maintenance Job" is for.
Foreign key component to Equip table.  */  
   EquipID:string,
      /**   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.
Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.
If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  */  
   PlanNum:number,
      /**  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  */  
   IssueTopicID1:string,
      /**  Indicates the record is used with Machine MES  */  
   ExternalMES:boolean,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  PersonIDName  */  
   PersonIDName:string,
   SOExists:boolean,
      /**  Part Description  */  
   PartNumPartDescription:string,
      /**  Track Dimension  */  
   PartNumTrackDimension:boolean,
      /**  Track Lots  */  
   PartNumTrackLots:boolean,
      /**  Track Serial Num  */  
   PartNumTrackSerialNum:boolean,
   EquipOEM:string,
   EquipModel:string,
   EquipTypeID:string,
   EquipLocID:string,
      /**  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  */  
   PMJob:boolean,
   EquipDescription:string,
   JobTypeName:string,
      /**  Original smart string passed in for configuration  */  
   SmartString:string,
      /**  If TRUE then this field will mean that the smart string has already been processed  */  
   SmartStringProcessed:boolean,
      /**  ID of related Attribute Class  */  
   AttrClassID:string,
      /**  Description of values in set  */  
   AttrDescription:string,
      /**  The Short Description of the Attribute Set which will be visible throughout the system and is to be used in selecting an Attribute Set to go along with the Part  */  
   ShortDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobHeadListTableset{
   JobHeadList:Erp_Tablesets_JobHeadListRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_JobHeadRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  */  
   JobClosed:boolean,
      /**  Date the Job was closed.  Defaults as the system but can be overridden.  */  
   ClosedDate:string,
      /**  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  */  
   JobComplete:boolean,
      /**  The date that production was completed for this Job.  Maintained via Job Completion Processing.  */  
   JobCompletionDate:string,
      /**  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  */  
   JobEngineered:boolean,
      /**   Optional Job check off number 1.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   CheckOff1:boolean,
      /**   Optional Job check off number 2.  The label for this field is found in JCSyst. If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   CheckOff2:boolean,
      /**   Optional Job check off number 3.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   CheckOff3:boolean,
      /**  Optional Job check off number 4.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   CheckOff4:boolean,
      /**  Optional Job check off number 5.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.
These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  */  
   CheckOff5:boolean,
      /**  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  */  
   JobReleased:boolean,
      /**  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  */  
   JobHeld:boolean,
      /**  Scheduling Status Control (R-Required, P-Pending, A-Active, C-Complete).  NOT CURRENTLY IMPLEMENTED.  */  
   SchedStatus:string,
      /**  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  */  
   JobNum:string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   PartNum:string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  */  
   DrawNum:string,
      /**  The description of the part that is to be manufactured.  Use the Part.Description as the default.  */  
   PartDescription:string,
      /**  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.
See JobPart table for information on end parts of a job.  */  
   ProdQty:number,
      /**  The unit of measure for the job.  Defaulted from Part.IUM.  */  
   IUM:string,
      /**  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   StartDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   StartHour:number,
      /**  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   DueDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   DueHour:number,
      /**  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  */  
   ReqDueDate:string,
      /**  An optional user defined code.  This will be used for report selections and views of job headers.  */  
   JobCode:string,
      /**  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  */  
   QuoteNum:number,
      /**  Contains the quote line number reference. (see QuoteNum )  */  
   QuoteLine:number,
      /**  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   ProdCode:string,
      /**  UserChar1  */  
   UserChar1:string,
      /**  UserChar2  */  
   UserChar2:string,
      /**  UserChar3  */  
   UserChar3:string,
      /**  UserChar4  */  
   UserChar4:string,
      /**  UserDate1  */  
   UserDate1:string,
      /**  UserDate2  */  
   UserDate2:string,
      /**  UserDate3  */  
   UserDate3:string,
      /**  UserDate4  */  
   UserDate4:string,
      /**  UserDecimal1  */  
   UserDecimal1:number,
      /**  UserDecimal2  */  
   UserDecimal2:number,
      /**  UserInteger1  */  
   UserInteger1:number,
      /**  UserInteger2  */  
   UserInteger2:number,
      /**  Editor widget for Job header comments.  */  
   CommentText:string,
      /**  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  */  
   ExpenseCode:string,
      /**  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  */  
   InCopyList:boolean,
      /**   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   WIName:string,
      /**  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   WIStartDate:string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   WIStartHour:number,
      /**  Scheduled "What If" finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   WIDueDate:string,
      /**  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   WIDueHour:number,
      /**   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.
This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  */  
   Candidate:boolean,
      /**  Scheduling Code.  SchedCode references a record in the SchedPri table.  */  
   SchedCode:string,
      /**  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  */  
   SchedLocked:boolean,
      /**  Associates the JobHead with a project in the Project table.  This can be blank.  */  
   ProjectID:string,
      /**  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  */  
   WIPCleared:boolean,
      /**  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  */  
   JobFirm:boolean,
      /**  A LIST-DELIM delimited list of people.  */  
   PersonList:string,
      /**   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.
Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  Defaults from the ProdGrup.PersonID.  */  
   PersonID:string,
      /**  Production Team for the Job.  Associates the JobHead with a ProdTeam.  */  
   ProdTeamID:string,
      /**   Production quantity completed.
Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  */  
   QtyCompleted:number,
      /**  Site Identifier.  */  
   Plant:string,
      /**  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  */  
   DatePurged:string,
      /**  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  */  
   TravelerReadyToPrint:boolean,
      /**  The last date the job traveler was mass printed.  */  
   TravelerLastPrinted:string,
      /**  Indicates if the Status can be printed. Print functions are not available if this is = No.  */  
   StatusReadyToPrint:boolean,
      /**  The last date the job status was mass printed.  */  
   StatusLastPrinted:string,
      /**  The Service Call number that this Job is linked to.  */  
   CallNum:number,
      /**  The Service Call Line that this Job is linked to.  */  
   CallLine:number,
      /**  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  */  
   JobType:string,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   RestoreFlag:string,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**  Indicates that the quantity on this job is locked  */  
   LockQty:boolean,
      /**  The help desk case that created this job.  */  
   HDCaseNum:number,
      /**   Values: S(Sequential) or C(Concurrent).
Defaults as S. Must have Advanced Production License to change. Controls how the operations and material requirements are developed. Concurrent jobs are used where the production time is based on the number of machine operations performed and not on the number of parts created. For example, a stamping operation where each cycle of the machine stamps out x number of parts. A further extension of this is that the operation can yield multiple different parts from each cycle of the machine.  Identification of these parts and there associated PPO (parts per operation) is define in the JobPart table.  */  
   ProcessMode:string,
      /**  The planned date when the job needs to be actioned by the production department to make sure that the job is ready on the planned completion date.  */  
   PlannedActionDate:string,
      /**  The date that the job needs to be ready for the warehouse to kit to make sure that it is ready for the job start date.  */  
   PlannedKitDate:string,
      /**  The task ID that is returned from Microsoft Project.  */  
   MSPTaskID:string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back an alpha numeric string.  */  
   MSPPredecessor:string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  */  
   ProductionYield:boolean,
      /**  This field will be set to the value of the JobHead.ProdQty at the time the JobHead.Engineered flag is set to true.  */  
   OrigProdQty:number,
      /**  This field is used to indicate whether the original quantities should be reset in the job header and its assemblies at JobHead update if JobHead.JobEngineered has been changed from false to true. Generally the orig qtys will be reset, unless this flag is set to true because the user was asked if they wanted to reset the orig qtys and they answered yes.  */  
   PreserveOrigQtys:boolean,
      /**  If set to yes then exclude this job from the Job Auto-Completion process. Not directly maintainable.  */  
   NoAutoCompletion:boolean,
      /**  No Auto Closing. If set to yes then exclude this job from the Job Auto-Closing process.  */  
   NoAutoClosing:boolean,
      /**  The user that created this Job.  */  
   CreatedBy:string,
      /**  The date that this Job was created.  */  
   CreateDate:string,
      /**  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  */  
   WhseAllocFlag:boolean,
      /**  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  */  
   OwnershipStatus:string,
      /**  Holds the internal object id of PDM parts.  */  
   PDMObjID:string,
      /**  This field is used to store a code that represents the external system that the Job is being exported to (ex. PDM).  This field is short lived, it is used to instruct the write trigger logic to create IM records for certain types of external systems.  After creating the IM records, the trigger logic should immediately clear the field.  */  
   ExportRequested:string,
      /**  Flag to indicate how to split the manufacturing cost elements when a manufactured material is issued to the job.  If flag is set to true, the cost of the issued material will be split into individual manufacturing cost elements. If set to false, the cost of the issued material is added to the manufacturing material cost element only.  This is defaulted from the JCSyst.SplitMfgCostElements and is not user maintainable.  */  
   SplitMfgCostElements:boolean,
      /**  Cross Reference Part Num. Used for alternate serial mask support.  */  
   XRefPartNum:string,
      /**   Cross Reference Part Type. Used for alternate serial mask support.

I=Internal Cross Reference / C = Customer Part  */  
   XRefPartType:string,
      /**  Customer Number XRefPartNum is related to if it is a customer part. Used for alternate serial number mask support.  */  
   XRefCustNum:number,
      /**  Base Part Number. Used in the configurator to identify the configurator part Number.  */  
   BasePartNum:string,
      /**  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  */  
   BaseRevisionNum:string,
      /**  Indicates if the job was rough cut scheduled.  */  
   RoughCutScheduled:boolean,
      /**   The ID of the Equipment that this "Maintenance Job" is for.
Foreign key component to Equip table.  */  
   EquipID:string,
      /**   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.
Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.
If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  */  
   PlanNum:number,
      /**  Maintenance Job Priority. Valid values: H - High, M - Medium, L - Low.  M is default or if created from a Maint Request then MaintReq.Priority is used as default.  */  
   MaintPriority:string,
      /**  Internal field indicating this job was created by a job split.  Assigned true when a job has been split due to start minimum lot size quantity processing.  */  
   SplitJob:boolean,
      /**  Indicates the type of prefix which is used for create jobs in MRP  */  
   NumberSource:boolean,
      /**  The Meter Reading value entered at time of Job Closing.  */  
   CloseMeterReading:number,
      /**  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  */  
   IssueTopicID1:string,
      /**  Maintenance Issue Topic 2. A sub-topic of IssueTopicID1.  */  
   IssueTopicID2:string,
      /**  Maintenance Issue Topic 3. A sub-topic of IssueTopicID2.  */  
   IssueTopicID3:string,
      /**  Maintenance Issue Topic 4. A sub-topic of IssueTopicID3.  */  
   IssueTopicID4:string,
      /**  Maintenance Issue Topic 5. A sub-topic of IssueTopicID4.  */  
   IssueTopicID5:string,
      /**  Maintenance Issue Topic 6. A sub-topic of IssueTopicID5.  */  
   IssueTopicID6:string,
      /**  Maintenance Issue Topic 7. A sub-topic of IssueTopicID6.  */  
   IssueTopicID7:string,
      /**  Maintenance Issue Topic 8. A sub-topic of IssueTopicID7.  */  
   IssueTopicID8:string,
      /**  Maintenance Issue Topic 9. A sub-topic of IssueTopicID8.  */  
   IssueTopicID9:string,
      /**  Maintenance Issue Topic 10. A sub-topic of IssueTopicID9.  */  
   IssueTopicID10:string,
      /**  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  */  
   IssueTopics:string,
      /**  Maintenance Resolution Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintRes = Yes  */  
   ResTopicID1:string,
      /**  Maintenance Resolution Topic 2. A sub-topic of ResTopicID1.  */  
   ResTopicID2:string,
      /**  Maintenace  Resolution Topic 3. A sub-topic of ResTopicID2.  */  
   ResTopicID3:string,
      /**  Maintenance Resolution Topic 4. A sub-topic of ResTopicID3.  */  
   ResTopicID4:string,
      /**  Maintenance Resolution Topic 5. A sub-topic of ResTopicID4.  */  
   ResTopicID5:string,
      /**  Maintenance Resolution Topic 6. A sub-topic of ResTopicID5.  */  
   ResTopicID6:string,
      /**  Maintenance Resolution Topic 7. A sub-topic of ResTopicID6.  */  
   ResTopicID7:string,
      /**  Maintenance Resolution Topic 8. A sub-topic of ResTopicID7.  */  
   ResTopicID8:string,
      /**  Maintenance Resolution Topic 9. A sub-topic of ResTopicID8.  */  
   ResTopicID9:string,
      /**  Maintenance Resolution Topic 10. A sub-topic of ResTopicID9.  */  
   ResTopicID10:string,
      /**  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  */  
   ResTopics:string,
      /**  It is updated by Calculate Global Scheduling Order process, it indicates if a job has to be scheduled Backwards or Forwards by Global Scheduling Process and it can be modified by Adjust Scheduling Global Order  */  
   Forward:boolean,
      /**  This is the sequence number used to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  */  
   SchedSeq:number,
      /**  Indicates if at least one subassembly contains a part that is plan as assembly.  It does not indicate if the assembly is marked as PAA - only that the part is PAA in the BOM.  Used in MRP when determining if a job can be reused.  */  
   PAAExists:boolean,
      /**  Indicates if the job structure (BOM) was created inside or outside of the mfg lead time for the job part.  Used in MRP when determining if a job can be reused.  */  
   DtlsWithinLeadTime:boolean,
      /**  GroupSeq  */  
   GroupSeq:number,
      /**  It indicates that the shop load for that job was not generated (shopload table). The load in shopload can be recreated by Save Resource Load process  */  
   RoughCut:boolean,
      /**  PlanGUID  */  
   PlanGUID:string,
      /**  PlanUserID  */  
   PlanUserID:string,
      /**  LastChangedBy  */  
   LastChangedBy:string,
      /**  LastChangedOn  */  
   LastChangedOn:string,
      /**  EPMExportLevel  */  
   EPMExportLevel:number,
      /**  JobWorkflowState  */  
   JobWorkflowState:string,
      /**  JobCSR  */  
   JobCSR:string,
      /**  Indicates the record is used with Machine MES  */  
   ExternalMES:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  LastExternalMESDate  */  
   LastExternalMESDate:string,
      /**  LastScheduleDate  */  
   LastScheduleDate:string,
      /**  LastScheduleProc  */  
   LastScheduleProc:string,
      /**  Sequence priority used internally by Calculate Global Scheduling Order process to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  */  
   SchedPriority:number,
      /**  It indicates the days a job is going to be late in relation to its required due date  */  
   DaysLate:number,
      /**  ContractID  */  
   ContractID:string,
      /**  Logical field to indicate if this record has been read by project analysis process  */  
   ProjProcessed:boolean,
      /**  SyncReqBy  */  
   SyncReqBy:boolean,
      /**  CustName  */  
   CustName:string,
      /**  CustID  */  
   CustID:string,
      /**  IsCSRSet  */  
   IsCSRSet:boolean,
      /**  UnReadyCostProcess  */  
   UnReadyCostProcess:boolean,
      /**  ProcSuspendedUpdates  */  
   ProcSuspendedUpdates:string,
      /**  DateTime field to indicate when this record has been read by project analysis process  */  
   ProjProcessedDate:string,
      /**  PCLinkRemoved  */  
   PCLinkRemoved:boolean,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   ExternalMESSyncRequired:boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   ExternalMESLastSync:string,
      /**  Related to Epicor FSA  */  
   EpicorFSA:boolean,
      /**  The unique identifier of the related CPQ Configured Quote Product.  */  
   KBConfigProdID:number,
      /**  Indicates if this revision is to use Advanced Staging.  */  
   UseAdvancedStaging:boolean,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  PersonIDName  */  
   PersonIDName:string,
      /**  This flag indicates if the job is ready to be fulfilled.  */  
   ReadyToFulfill:boolean,
      /**  FSMSendTo  */  
   FSMSendTo:boolean,
      /**  FSMServiceReportID  */  
   FSMServiceReportID:string,
   AdvanceLaborRate:boolean,
      /**  Calculated field is set Not UnReadyCostProcess  */  
   dspReadyCostProcess:boolean,
      /**  Determine if jobengineered is enabled or disabled.  */  
   EnableJobEngineered:boolean,
      /**  Should JobFirm be enabled or disabled?  */  
   EnableJobFirm:boolean,
      /**  Determine if jobreleased is enabled or disabled.  */  
   EnableJobReleased:boolean,
   EnableMaterialStatus:boolean,
   EnableProject:boolean,
      /**  Is the job allowed to be engineered?  */  
   EngineerAllowed:boolean,
   EquipLocDesc:string,
      /**  If some fields except ToFirm have been updated  */  
   ExtUpdated:boolean,
      /**   Final Operation – This is scheduled Due Date for either:
1.	Operation on ASM that has Final Operation checkbox selected
2.	If no Operation on ASM has Final Operation selected than use Last Operation on ASM  */  
   FinalOpDueDate:string,
      /**  If it's Stocked assembly and PlanAsAsm is true.  */  
   FirmProcEnable:boolean,
      /**  is used to select stocked Job which will be processed by Firming Process instead of Firm check-box. Is available only for .FirmProcEnable = true (in Job Status Maintenance).  */  
   FirmProcess:boolean,
      /**  Job has at least one assembly with flag Plan as Assembly.  */  
   HasPlanAsAsm:boolean,
      /**  Depending on the engineered job flag, is the header information enabled?  */  
   HeaderSensitive:boolean,
      /**  It will allow displaying default of this value from Plant.IgnoreMtlConstraints  */  
   IgnoreMtlConstraints:boolean,
   JobTypeName:string,
      /**  If part is backflush the kit time is ignored.  */  
   KitTime:number,
      /**  Locked Qty Flag  */  
   LockedQty:boolean,
   NewMeter:number,
      /**  The old Job Number when JobFirm is changed from no to yes.  */  
   OldJobNum:string,
      /**  The order qty  */  
   OrderQty:number,
      /**  Logical field signifying whether JobHead.PartNum is a valid part master part.  */  
   PartmasterPart:boolean,
   PhaseDescription:string,
      /**  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  */  
   PMJob:boolean,
      /**  Process Mode Description  */  
   ProcessModeDescription:string,
      /**  Receive Time field for Job Part entered on Job  */  
   ReceiveTime:number,
      /**  Original smart string passed in for configuration  */  
   SmartString:string,
      /**  If TRUE then this field will mean that the smart string has already been processed  */  
   SmartStringProcessed:boolean,
   SOExists:boolean,
   StockQty:number,
      /**  To be Firmed  */  
   ToFirm:boolean,
      /**  Description for XRefPartType  */  
   XRefPartTypeDesc:string,
      /**  The audit change description for the jobaudit record.  */  
   ChangeDescription:string,
   ClearDataset:boolean,
      /**  True if more than one co-part exists  */  
   IsCoPart:boolean,
      /**  The identifier of related Process Manufacturing.  */  
   PartRevProcessMfgID:string,
      /**  Type of Process Manufacturing.  */  
   PartRevProcessMfgType:string,
      /**  Determines if the Service Job has to be synchronized with Epicor FSI application.  */  
   SendToFSA:boolean,
   BitFlag:number,
   AnalysisCdDescription:string,
   CallLineLineDesc:string,
   DynAttrValueSetDescription:string,
   DynAttrValueSetShortDescription:string,
   EquipMeterUOM:string,
   EquipSerialNum:string,
   EquipLocID:string,
   EquipPlant:string,
   EquipDescription:string,
   EquipBrand:string,
   EquipModel:string,
   EquipCurrentMeter:number,
   EquipTypeID:string,
   EquipOEM:string,
   ExpenseCodeDescription:string,
   HDCaseDescription:string,
   IssueTopicID1Description:string,
   IssueTopicID10Description:string,
   IssueTopicID2Description:string,
   IssueTopicID3Description:string,
   IssueTopicID4Description:string,
   IssueTopicID5Description:string,
   IssueTopicID6Description:string,
   IssueTopicID7Description:string,
   IssueTopicID8Description:string,
   IssueTopicID9Description:string,
   PartNumSalesUM:string,
   PartNumIUM:string,
   PartNumTrackLots:boolean,
   PartNumPartDescription:string,
   PartNumTrackSerialNum:boolean,
   PartNumTrackDimension:boolean,
   PartNumSellingFactor:number,
   PartNumPricePerCode:string,
   PartNumTrackInventoryByRevision:boolean,
   PartNumLocationIDNumReq:boolean,
   PartNumTrackInventoryAttributes:boolean,
   PartNumAttrClassID:string,
   PlantName:string,
   PlantMaintPlant:string,
   ProdCodeDescription:string,
   ProdTeamIDDescription:string,
   ProdTeamIDName:string,
   ProjectIDDescription:string,
   QuoteLineLineDesc:string,
   QuoteNumCurrencyCode:string,
   ResTopicID1Description:string,
   ResTopicID10Description:string,
   ResTopicID2Description:string,
   ResTopicID3Description:string,
   ResTopicID4Description:string,
   ResTopicID5Description:string,
   ResTopicID6Description:string,
   ResTopicID7Description:string,
   ResTopicID8Description:string,
   ResTopicID9Description:string,
   SchedCodeDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobMtlAttchRow{
   Company:string,
   JobNum:string,
   AssemblySeq:number,
   MtlSeq:number,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobMtlInspRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  A sequence number that uniquely identifies the JobMtlInsp record within the JobNum  */  
   PlanSeq:number,
      /**  The inspection plan part number (configurator part number).  */  
   InspPlanPartNum:string,
      /**  The inspection plan revision number (configurator revision number).  */  
   InspPlanRevNum:string,
      /**  The specification ID.  Must be valid in the SpecHed table.  */  
   SpecID:string,
      /**  The specification revision number.  Must be valid in the SpecRev table.  */  
   SpecRevNum:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   SpecHedDescription:string,
   BitFlag:number,
   InspPlanDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobMtlRefDesRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  Identifier of Reference Designator  */  
   RefDes:string,
      /**  Unique identifies the reference designator with the material sequence.  */  
   RefDesSeq:number,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   MtlPartNum:string,
      /**  Free form side location. (Top, Bottom, Both, Level, etc)  */  
   Side:string,
      /**  X Coordinate of the reference designator  */  
   XLocation:number,
      /**  Y Coordinate of the reference designator  */  
   YLocation:number,
      /**  Z Coordinate of the reference designator  */  
   ZLocation:number,
      /**  Rotation of the reference designator. Max value = 360.000  */  
   Rotation:number,
      /**  Designator Description  */  
   Description:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobMtlRestrictSubstRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  Restriction Type identification.  */  
   RestrictionTypeID:string,
      /**  Substance identification.  */  
   SubstanceID:string,
      /**  Material Weight defaulted from Part Master.  */  
   Weight:number,
      /**  Material Weight UOM defaulted from Part Master.  */  
   WeightUOM:string,
      /**  When true then weight is disregarded in compliance roll-up.  */  
   Manual:boolean,
      /**  The date when exempt status for this substance expires.  */  
   ExemptDate:string,
      /**  Optional. Exemption certificate.  */  
   ExemptCertificate:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Read-only. True when exempt date >= today.  */  
   Exempt:boolean,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   MtlPartNum:string,
   BitFlag:number,
   AssemblySeqDescription:string,
   JobNumPartDescription:string,
   RestrictionDescription:string,
   SubstanceDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobMtlRestrictionRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  Restriction Type identification.  */  
   RestrictionTypeID:string,
      /**  The Part Number of the component material record for the related Parent Part.  */  
   MtlPartNum:string,
      /**  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  */  
   Manual:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  */  
   Weight:boolean,
   BitFlag:number,
   AssemblySeqDescription:string,
   JobNumPartDescription:string,
   PartNumTrackLots:boolean,
   PartNumTrackDimension:boolean,
   PartNumPricePerCode:string,
   PartNumTrackSerialNum:boolean,
   PartNumSalesUM:string,
   PartNumPartDescription:string,
   PartNumIUM:string,
   PartNumSellingFactor:number,
   RestrictionDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobMtlRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  */  
   JobComplete:boolean,
      /**  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  */  
   IssuedComplete:boolean,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  */  
   MtlSeq:number,
      /**  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  */  
   PartNum:string,
      /**  A description of the material.  */  
   Description:string,
      /**  Quantity per parent.  Field Service was EstQty in FSCallMt.  */  
   QtyPer:number,
      /**  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  */  
   RequiredQty:number,
      /**  Internal unit of measure.  The unit used to measure the material.  */  
   IUM:string,
      /**   Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.
When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  */  
   LeadTime:number,
      /**   A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.
It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  */  
   RelatedOperation:number,
      /**  The material burden rate for this Job Material.  */  
   MtlBurRate:number,
      /**  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  */  
   EstMtlBurUnitCost:number,
      /**  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  */  
   EstUnitCost:number,
      /**  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  */  
   IssuedQty:number,
      /**  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  */  
   TotalCost:number,
      /**  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  */  
   MtlBurCost:number,
      /**  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  */  
   ReqDate:string,
      /**  The warehouse that the material is allocated against.  */  
   WarehouseCode:string,
      /**  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  */  
   SalvagePartNum:string,
      /**  Description of Salvageable material.  Use Part.Description for a default.  */  
   SalvageDescription:string,
      /**  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  */  
   SalvageQtyPer:number,
      /**  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  */  
   SalvageUM:string,
      /**  The salvage material burden rate for this Job Material.  */  
   SalvageMtlBurRate:number,
      /**  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  */  
   SalvageUnitCredit:number,
      /**  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  */  
   SalvageEstMtlBurUnitCredit:number,
      /**  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  */  
   SalvageQtyToDate:number,
      /**  Total salvage credit to date.  A summary of salvage receipt transactions.  */  
   SalvageCredit:number,
      /**  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  */  
   SalvageMtlBurCredit:number,
      /**   Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.
View as editor widget.  */  
   MfgComment:string,
      /**  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  */  
   VendorNum:number,
      /**  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  */  
   PurPoint:string,
      /**  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  */  
   BuyIt:boolean,
      /**  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  */  
   Ordered:boolean,
      /**   Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.
View as editor widget.  */  
   PurComment:string,
      /**   Indicates if this material will be backflushed.
Note: this field is defaulted from Part.BackFlush
Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  */  
   BackFlush:boolean,
      /**  Estimated Scrap.  */  
   EstScrap:number,
      /**  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  */  
   EstScrapType:string,
      /**  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  */  
   FixedQty:boolean,
      /**  Characters used on the drawing to show where material is used.  */  
   FindNum:string,
      /**  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**  Controls if an alert is to be sent when this JobMtl is completed.  */  
   SndAlrtCmpl:boolean,
      /**  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  */  
   RcvInspectionReq:boolean,
      /**  Site Identifier.  */  
   Plant:string,
      /**  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  */  
   Direct:boolean,
      /**  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  */  
   MaterialMtlCost:number,
      /**  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   MaterialLabCost:number,
      /**  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   MaterialSubCost:number,
      /**  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  */  
   MaterialBurCost:number,
      /**  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageMtlCredit:number,
      /**  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageLbrCredit:number,
      /**  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageBurCredit:number,
      /**  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  */  
   SalvageSubCredit:number,
      /**   Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler.
'I' to ignore in eScheduler
'M' to treat at Material in eScheduler
'A' to treat as AddResType in eScheduler  */  
   APSAddResType:string,
      /**  The service call that this Material belongs to.  */  
   CallNum:number,
      /**  The Service Call Line that this material relates to.  */  
   CallLine:number,
      /**  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   ProdCode:string,
      /**  FS - Unit Price for the Material in base currency.  */  
   UnitPrice:number,
      /**  FS - Billable Unit Price for the Material in base currency.  */  
   BillableUnitPrice:number,
      /**  FS - Billable Price per unit for the material in customers currency.  */  
   DocBillableUnitPrice:number,
      /**  Problem reason code from the reason master table. type Service call.  */  
   ResReasonCode:string,
      /**  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  */  
   PricePerCode:string,
      /**  Is this a billable material item.  */  
   Billable:boolean,
      /**  Holds the quantity of the item that has been shipped through misc.  shipments  */  
   ShippedQty:number,
      /**  FS - Unit Price for the Material in Customer currency.  */  
   DocUnitPrice:number,
      /**  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  */  
   QtyStagedToDate:number,
      /**  This material was added after initial setup of the job  */  
   AddedMtl:boolean,
      /**  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  */  
   MiscCharge:boolean,
      /**  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  */  
   MiscCode:string,
      /**  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  */  
   SCMiscCode:string,
      /**  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  */  
   RFQNeeded:boolean,
      /**  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  */  
   RFQVendQuotes:number,
      /**  RFQ number that the item is linked to.  */  
   RFQNum:number,
      /**  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  */  
   RFQLine:number,
      /**   RFQ Status.
W= Waiting, A = Accepted, R = Requested, C = Received  */  
   RFQStat:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**  Global RFQ flag.  Used in Consolidated Purchasing.  */  
   GlbRFQ:boolean,
      /**  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  */  
   WhseAllocFlag:boolean,
      /**  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  */  
   WIReqDate:string,
      /**  Reporting currency value of this field  */  
   Rpt1BillableUnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt2BillableUnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt3BillableUnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt1UnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt2UnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt3UnitPrice:number,
      /**   Required Quantity in the Parts Base UOM.  Set by the system by doing a UOM conversion of the JobMtl.RequiredQty which is in the UOM of the requirement to the JobMtl.BaseUOM which is the UOM of the Part and it's unit costs.
This quantity multiplied by the JobMtl.EstMtlUnitCost is used to update the total estimated costs found in JobAsmbl.TLEMaterialCost  */  
   BaseRequiredQty:number,
      /**   Unit of Measure of the JobMtl.BaseRequiredQty.
If valid part, then it is the Parts Primary Inventory UOM otherwise it is the same as JobMtl.IUM  */  
   BaseUOM:string,
      /**  Material Weight defaulted from Part Master.  */  
   Weight:number,
      /**  Material Weight UOM defaulted from Part Master.  */  
   WeightUOM:string,
      /**  Required number of designators  */  
   ReqRefDes:number,
      /**  Base Part Number. Used in the configurator to identify the configurator part Number.  */  
   BasePartNum:string,
      /**  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  */  
   BaseRevisionNum:string,
      /**  Indicates if the job material is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  */  
   SelectForPicking:boolean,
      /**  The job pick "Staging" warehouse for the job material.  Defaults from the system default warehouse (PlantConfCtrl.DefJobPickWhse).  */  
   StagingWarehouseCode:string,
      /**  The job pick "Staging" bin for the job material.  Defaults from the system default bin (PlantConfCtrl.DefJobPickBin).  */  
   StagingBinNum:string,
      /**   A non blank character indicates that the release could not be picked by the Auto Pick process.
The possible values are;
"L" - Order Line can't be shipped complete.
"O" - Order can't be shipped complete.
"I" - Insufficient quantity reserved
"Z" - Zero quantity reserved.  */  
   PickError:string,
      /**   Estimated Material Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   EstMtlUnitCost:number,
      /**   Estimated Labor Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   EstLbrUnitCost:number,
      /**   Estimated Burden Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   EstBurUnitCost:number,
      /**   Estimated Subcontract Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:
EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  */  
   EstSubUnitCost:number,
      /**   Estimated Salvage Material Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   SalvageEstMtlUnitCredit:number,
      /**   Estimated Salvage Labor Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   SalvageEstLbrUnitCredit:number,
      /**   Estimated Salvage Burden Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   SalvageEstBurUnitCredit:number,
      /**   Estimated Salvage Subcontract Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:
SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  */  
   SalvageEstSubUnitCredit:number,
      /**  The material quantity that has been loaned out to another job.  */  
   LoanedQty:number,
      /**  The material quantity that has been borrowed from another job.  */  
   BorrowedQty:number,
      /**  flag used to designate if the serial numbers from the job material/subassembly can be reassigned as the serial number of the parent assembly (top assembly or n deep subassembly) being reworked using a job.  */  
   ReassignSNAsm:boolean,
      /**  GeneralPlanInfo  */  
   GeneralPlanInfo:string,
      /**  EstStdDescription  */  
   EstStdDescription:string,
      /**  PricingUOM  */  
   PricingUOM:string,
      /**  RemovedFromPlan  */  
   RemovedFromPlan:boolean,
      /**  IsPOCostingMaintained  */  
   IsPOCostingMaintained:boolean,
      /**  EstStdType  */  
   EstStdType:number,
      /**  POCostingFactor  */  
   POCostingFactor:number,
      /**  PlannedQtyPerUnit  */  
   PlannedQtyPerUnit:number,
      /**  POCostingDirection  */  
   POCostingDirection:number,
      /**  POCostingUnitVal  */  
   POCostingUnitVal:number,
      /**  GroupSeq  */  
   GroupSeq:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  */  
   OrigStructTag:string,
      /**  By storing the original Group Sequence of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  */  
   OrigGroupSeq:number,
      /**  ShowStatusIcon  */  
   ShowStatusIcon:string,
      /**  ContractID  */  
   ContractID:string,
      /**  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  */  
   LinkToContract:boolean,
      /**  Stores the lot number of the material in the Staging Warehouse/Bin.  */  
   StagingLotNum:string,
      /**  PCLinkRemoved  */  
   PCLinkRemoved:boolean,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   ExternalMESSyncRequired:boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   ExternalMESLastSync:string,
      /**  Controls if this material record is viewable in Location Management or the web.  */  
   LocationView:boolean,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  Planning number of pieces for this attribute set.  */  
   PlanningNumberOfPieces:number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   SalvageAttributeSetID:number,
      /**  Salvage planning number of pieces for this attribute set.  */  
   SalvagePlanningNumberOfPieces:number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   SalvagePlanningAttributeSetID:number,
      /**  The identification of related StageNo.  */  
   RelatedStage:string,
      /**  Revision number which is used to uniquely identify the revision of the part.  */  
   SalvageRevisionNum:string,
      /**  Indicates if the job material should be added or removed from the fulfillment queue.  */  
   PartAllocQueueAction:string,
      /**  This flag indicates if the job material is ready to be fulfilled.  */  
   ReadyToFulfill:boolean,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
      /**  The currency switch flag  */  
   CurrencySwitch:boolean,
      /**  A symbol that identifies the currency. Used on Forms and displays  */  
   CurrSymbol:string,
      /**  The display of extended price.  */  
   DisplayExtPrice:number,
      /**  The display unit price.  */  
   DisplayUnitPrice:number,
      /**  The document display extended price  */  
   DocDisplayExtPrice:number,
      /**  The document display extended price  */  
   DocDisplayUnitPrice:number,
      /**  BuyIt field for display in the UI.  */  
   dspBuyIt:boolean,
      /**  Display IUM (readonly)  */  
   DspIUM:string,
      /**  Should the backflush field be enabled?  */  
   EnableBackflush:boolean,
      /**  Field used to determine if there is security on JobMtl.BuyIt. If there is a row rule will disable the dspBuyIt.  */  
   EnableBuyIt:boolean,
      /**  flag to determine whether the Configure Option should be enabled.  */  
   EnableConfigure:boolean,
      /**  flag to determine whether the Make Direct field should be enabled.  */  
   EnableDirect:boolean,
      /**  This external field is used as a flag to determine when to enable/disable the FixedQty field according to the rules of Serial numbers design.  */  
   EnableFixedQty:boolean,
   EnableMtlSalvage:boolean,
   EnablePurDir:boolean,
      /**  Field to determine if the the RcvInspectionReq field should be enabled or disabled.  */  
   EnableRcvInspReq:boolean,
      /**  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  */  
   EnableSndAlrtCmpl:boolean,
      /**  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  */  
   EnableSplitCosts:boolean,
      /**  RequiredQty * EstUnitCost - RequiredQty * SalvageQtyPer * SalvageUnitCredit  */  
   EstCost:number,
      /**  The name of the calling program  */  
   IPCaller:string,
      /**  IsBaseCurrency  */  
   IsBaseCurrency:boolean,
   IsMtlConfigurationOn:boolean,
   IsMtlConfigureOn:boolean,
   IsMtlExtConfig:boolean,
      /**  IsMtlRevisionApproved  */  
   IsMtlRevisionApproved:boolean,
      /**  Internal flag to identify if current Part is an Inventory Part.  */  
   PartExists:boolean,
      /**  Calculated field gets list of available Sites  */  
   PlantList:string,
      /**  Price Per Code Description  */  
   PricePerCodeDescription:string,
      /**  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  */  
   RDEndNum:number,
      /**  The prefix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  */  
   RDPrefix:string,
      /**  This number will be used to create reference designators. This field will be defaulted to ?1?  */  
   RDStartNum:number,
      /**  The suffix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  */  
   RDSuffix:string,
      /**  The description of the related operation  */  
   RelatedOperationDesc:string,
      /**  Logical used to determine if record is created from PO Entry.  */  
   RetainValues:boolean,
   Rpt1DisplayExtPrice:number,
   Rpt1DisplayUnitPrice:number,
   Rpt2DisplayExtPrice:number,
   Rpt2DisplayUnitPrice:number,
   Rpt3DisplayExtPrice:number,
   Rpt3DisplayUnitPrice:number,
      /**  BaseUOM for SalvagePartNum  */  
   SalvageBaseUOM:string,
      /**  Satatus of InspectionRequired image on JobMaterial form.  */  
   ShowInspRqdImg:boolean,
      /**  Added for UI Framework?  This flags the material as being a "SubContract" or an "Internal" material.  */  
   SubContract:boolean,
      /**  Can the backflush be unchecked?  */  
   AllowBackflushUncheck:boolean,
   EnableAttributeSetSearch:boolean,
   EnableSalvageAttributeSetSearch:boolean,
      /**  Number of pieces for inventory attribute tracked parts  */  
   PlanningNumberOfPiecesDisp:number,
      /**  Number of pieces for inventory attribute tracked parts.  */  
   SalvagePlanningNumberOfPiecesDisp:number,
      /**  Indicates if unit price calculation should occur.  When false the unit price will be calculated.  When false the unit price will remain its current value.  */  
   SkipUnitPriceCalc:boolean,
      /**  Error Status Display  */  
   ErrorStatusDisplay:string,
      /**  True if this job material is in the fulfillment queue.  */  
   InPartAllocQueue:boolean,
      /**  Show Fulfillment Queue Actions  */  
   ShowFulfillmentQueueActions:boolean,
      /**  Indicates this row is selected for action.  */  
   SelectedForAction:boolean,
      /**  The allocated quantity for this job material.  */  
   AllocatedQty:number,
      /**  The reserved quantity for this job material.  */  
   ReservedQty:number,
      /**  The available quantity for this job material.  */  
   AvailableQty:number,
   BitFlag:number,
   AnalysisCdDescription:string,
   AssemblySeqPartNum:string,
   AssemblySeqDescription:string,
   CallLineLineDesc:string,
   DynAttrValueSetDescription:string,
   DynAttrValueSetShortDescription:string,
   JobNumPartDescription:string,
   JobNumPartNum:string,
   MiscCodeDescription:string,
   PartNumTrackInventoryAttributes:boolean,
   PartNumTrackInventoryByRevision:boolean,
   PartNumAttrClassID:string,
   PartNumTrackLots:boolean,
   PartNumIUM:string,
   PartNumPricePerCode:string,
   PartNumTrackDimension:boolean,
   PartNumTrackSerialNum:boolean,
   PartNumPartDescription:string,
   PartNumSellingFactor:number,
   PartNumSalesUM:string,
   PlantName:string,
   ProdCodeDescription:string,
   PurMiscCodeDescription:string,
   PurMiscCodeLCAmount:number,
   PurMiscCodeLCDisburseMethod:string,
   PurMiscCodeLCCurrencyCode:string,
   ReasonDescription:string,
   RFQLineLineDesc:string,
   SalvageAttributeSetIDDescription:string,
   SalvageAttributeSetIDShortDescription:string,
   SalvagePartNumPartDescription:string,
   SalvagePartNumPricePerCode:string,
   SalvagePartNumTrackInventoryByRevision:boolean,
   SalvagePartNumTrackSerialNum:boolean,
   SalvagePartNumTrackDimension:boolean,
   SalvagePartNumTrackInventoryAttributes:boolean,
   SalvagePartNumAttrClassID:string,
   SalvagePartNumSellingFactor:number,
   SalvagePartNumTrackLots:boolean,
   SalvagePartNumSalesUM:string,
   SalvagePartNumIUM:string,
   SCMiscCodeDescription:string,
   StageNoDescription:string,
   VendorNumTermsCode:string,
   VendorNumVendorID:string,
   VendorNumZIP:string,
   VendorNumAddress2:string,
   VendorNumDefaultFOB:string,
   VendorNumCountry:string,
   VendorNumState:string,
   VendorNumAddress3:string,
   VendorNumCurrencyCode:string,
   VendorNumAddress1:string,
   VendorNumCity:string,
   VendorNumName:string,
   VendorPPState:string,
   VendorPPAddress2:string,
   VendorPPCountry:string,
   VendorPPPrimPCon:number,
   VendorPPZip:string,
   VendorPPCity:string,
   VendorPPAddress1:string,
   VendorPPAddress3:string,
   VendorPPName:string,
   WarehouseCodeDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOpDtlRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  Associates the record back to the JobHead.  */  
   JobNum:string,
      /**  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  Assigned by the system.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the JobOper record within the JobAsmbl.   System assigned.  */  
   OprSeq:number,
      /**  Uniquely identifies an OpDtl.  System assigned.  */  
   OpDtlSeq:number,
      /**  Identifies which part of the production, setup or production, the resource is required for.   Valid values are "S", indicating the resource is RequiredFor the Setup phase of this operation, "P" for Production phase, or "B" meaning Both setup and production phase.  */  
   SetupOrProd:string,
      /**  The user can select the capability the operation is to perform.  The system will select the resource.  */  
   CapabilityID:string,
      /**  The user can select a Resource Group for the operation to be performed on.  The system will select the actual resource.  */  
   ResourceGrpID:string,
      /**  Descriptive code assigned by the user to uniquely identify the Resource for this operation to be performed on.  If a resource was not explicitly assigned this field is blank.  */  
   ResourceID:string,
      /**  Concurrent Capacity is a constraint that prevents a Resource from being overloaded because it has, at a given time, this much capacity.  For example, a Resource has 4 racks, and they can be reused, but once they've been selected for an operation, they're tied up until the operation is complete.  */  
   ConcurrentCapacity:number,
      /**  The Daily Prod rate contains the rate required to make 1. This is multiplied with the mfg qty of the job to get the total production qty. This total is then compared to the resource's daily production quantity  and with any usage stored in the Shopload record.   Once the production limit for a resource has been reached, the Resource has been consumed for that day.  */  
   DailyProdRate:number,
      /**  This is the number of resources the operation can run on.  If multiple resources can perform the required Capability, then up to this many will be employed.  This determines the number of setups the system will allow for the operation.  However, the number of setups cannot exceed the number of operations.  The idea being that once a part is on a machine you will complete the operation on that resource.  */  
   NumResources:number,
      /**  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  */  
   EstSetHours:number,
      /**   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.
FORMULAS:
If StdFormat = "HR" then EstProdHours = ProdStandard. 
If StdFormat = "PH" then (JobOper.RunQty / Std).
If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.
If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.
If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.
If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.
If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  */  
   EstProdHours:number,
      /**   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.
NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  */  
   ProdStandard:number,
      /**   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;
"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,
"PM" - Pieces/Minute, "OH" - Operations/Hour,
"OM"  - Operations/minute, HR - Fixed Hours.  */  
   StdFormat:string,
      /**   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.
This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  */  
   StdBasis:string,
      /**  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  */  
   OpsPerPart:number,
      /**  Labor rate used for estimated production labor costs. Default from the OpMasDtl.ProdLabRate.  */  
   ProdLabRate:number,
      /**  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  */  
   SetupLabRate:number,
      /**  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  */  
   ProdBurRate:number,
      /**  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  */  
   SetupBurRate:number,
      /**  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  */  
   ProdComplete:boolean,
      /**  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  */  
   SetupComplete:boolean,
      /**  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  */  
   ActProdHours:number,
      /**  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   ActProdRwkHours:number,
      /**  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  */  
   ActSetupHours:number,
      /**  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   ActSetupRwkHours:number,
      /**  Setup function percent complete.  Maintained via labor entry.  */  
   SetupPctComplete:number,
      /**  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  */  
   ActBurCost:number,
      /**   Total of ALL labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.
The Total Cost, updated via the receipt process.  */  
   ActLabCost:number,
      /**  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  */  
   ReworkBurCost:number,
      /**  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup and Production. Updated via the LaborDtl\Write.p trigger.  */  
   ReworkLabCost:number,
      /**  Resource Lock.  If the user explicitly selected a Resource for the JobOpDtl, when they accept the scheduling changes, the WISchedResource will be stored as the explicit Resource.  Else the WISchedResource will become the SchedResource and the WISchedResourceGrp will become the ResourceGroup.  */  
   ResourceLock:boolean,
      /**  System maintained.  Date the JobOpDtl record was added to the database.  */  
   SysCreateDate:string,
      /**  Time in seconds since midnight that the system created the record.  */  
   SysCreateTime:number,
      /**  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  */  
   OpDtlDesc:string,
      /**   The estimated set up hours per machine.
Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  */  
   EstSetHoursPerMch:number,
      /**  If yes then the user has overridden the rates that were on the  record when it was inititally created.  The initial rates came from the master files.  */  
   OverrideRates:boolean,
      /**  Duplicated from JobOper.SetupCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  */  
   ProdCrewSize:number,
      /**  Duplicated from JobOper.SetupCrewSize. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  */  
   SetUpCrewSize:number,
      /**  RemovedFromPlan  */  
   RemovedFromPlan:boolean,
      /**  IsPrimaryProd  */  
   IsPrimaryProd:boolean,
      /**  IsPrimarySetup  */  
   IsPrimarySetup:boolean,
      /**  AutoSystemAdded  */  
   AutoSystemAdded:boolean,
      /**  MobileAllocatedResource  */  
   MobileAllocatedResource:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  */  
   QtyPerCycle:number,
      /**  Capability Description  */  
   CapabilityDesc:string,
      /**  The Operation Standard ID stored in JobOper.  */  
   OperOpStdID:string,
      /**  Indicates if primary production operation.  */  
   PrimaryProd:boolean,
      /**  Indicates if primary setup operation.  */  
   PrimarySetup:boolean,
      /**  Resource Group Description  */  
   ResourceGrpDesc:string,
      /**  Scheduled Resource Description  */  
   SchedResourceDesc:string,
      /**  Scheduled Resource Group Description  */  
   SchedResourceGrpDesc:string,
      /**  flag for subcontract  */  
   SubContract:boolean,
      /**  What-if Scheduled Resource Description  */  
   WISchedResourceDesc:string,
      /**  What-if Scheduled Resource Group Description  */  
   WISchedResourceGrpDesc:string,
      /**  Resource Description  */  
   ResourceDesc:string,
   BitFlag:number,
   AssemblySeqDescription:string,
   CapabilityIDDescription:string,
   JobNumPartDescription:string,
   ResourceGrpIDDescription:string,
   ResourceIDDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperActionParamRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  A sequence number which uniquely identifies the assembly record within the method.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the method.  */  
   OprSeq:number,
      /**  A sequence number which uniquely identifies action record within the operation set.  */  
   ActionSeq:number,
      /**  A sequence number which uniquely identifies parameter within the Operation/Action set.  */  
   ActionParamSeq:number,
      /**  Data type of Action Parameter.  */  
   ActionParamFieldDataType:string,
      /**  Value of Action Parameter.  */  
   ActionParamValueCharacter:string,
      /**  Value of Action Parameter.  */  
   ActionParamValueDate:string,
      /**  Value of Action Parameter.  */  
   ActionParamValueDecimal:number,
      /**  Value of Action Parameter.  */  
   ActionParamValueInteger:number,
      /**  Value of Action Parameter.  */  
   ActionParamValueLogical:boolean,
      /**  SysRevID  */  
   SysRevID:number,
      /**  SysRowID  */  
   SysRowID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperActionRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  A sequence number which uniquely identifies the assembly record within the method.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the method.  */  
   OprSeq:number,
      /**  A sequence number which uniquely identifies action record within the operation set.  */  
   ActionSeq:number,
      /**  Description of Action.  */  
   ActionDesc:string,
      /**  Indicated if this action must be completed before Operation can be completed.  */  
   Required:boolean,
      /**  Indicates if this Action was completed.  */  
   Completed:boolean,
      /**  The number of the employee that performed the work.  */  
   CompletedBy:string,
      /**  Date the Action was completed.  */  
   CompletedOn:string,
      /**  SysRevID  */  
   SysRevID:number,
      /**  SysRowID  */  
   SysRowID:string,
   BitFlag:number,
   EmpBasicName:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperAttchRow{
   Company:string,
   JobNum:string,
   AssemblySeq:number,
   OprSeq:number,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperInspRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly sequence number that this material is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the Job.  */  
   OprSeq:number,
      /**  A sequence number that uniquely identifies the JobOperInsp record within the JobNum  */  
   PlanSeq:number,
      /**  The inspection plan part number (configurator part number).  */  
   InspPlanPartNum:string,
      /**  The inspection plan revision number (configurator revision number).  */  
   InspPlanRevNum:string,
      /**  The specification ID.  Must be valid in the SpecHed table.  */  
   SpecID:string,
      /**  The specification revision number.  Must be valid in the SpecRev table.  */  
   SpecRevNum:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   SpecHedDescription:string,
   BitFlag:number,
   InspPlanDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperMachParamRow{
      /**  Company  */  
   Company:string,
      /**  JobNum  */  
   JobNum:string,
      /**  AssemblySeq  */  
   AssemblySeq:number,
      /**  OprSeq  */  
   OprSeq:number,
      /**  MachParamSeq  */  
   MachParamSeq:number,
      /**  RequestCode  */  
   RequestCode:string,
      /**  MachineNum  */  
   MachineNum:string,
      /**  ToolNum  */  
   ToolNum:string,
      /**  PartNum  */  
   PartNum:string,
      /**  ParamNum  */  
   ParamNum:number,
      /**  ParamUpperLimit  */  
   ParamUpperLimit:number,
      /**  ParamNominalValue  */  
   ParamNominalValue:number,
      /**  ParamLowerLimit  */  
   ParamLowerLimit:number,
      /**  ParamDelayValue  */  
   ParamDelayValue:number,
      /**  SpecEnable  */  
   SpecEnable:boolean,
      /**  SpecControlAlarm  */  
   SpecControlAlarm:boolean,
      /**  SpecRunAlarm  */  
   SpecRunAlarm:boolean,
      /**  ProcSpecAlarm  */  
   ProcSpecAlarm:boolean,
      /**  ProcControlAlarm  */  
   ProcControlAlarm:boolean,
      /**  PartQualSpecEnable  */  
   PartQualSpecEnable:boolean,
      /**  PartQualControlEnable  */  
   PartQualControlEnable:boolean,
      /**  CreatedBy  */  
   CreatedBy:string,
      /**  CreatedOn  */  
   CreatedOn:string,
      /**  ChangedBy  */  
   ChangedBy:string,
      /**  ChangedOn  */  
   ChangedOn:string,
      /**  SysRevID  */  
   SysRevID:number,
      /**  SysRowID  */  
   SysRowID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperRestrictSubstRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number  */  
   JobNum:string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   OprSeq:number,
      /**  Restriction Type identification.  */  
   RestrictionTypeID:string,
      /**  Substance identification.  */  
   SubstanceID:string,
      /**  Default weight of the substance per primary part of UOM  */  
   Weight:number,
      /**  By default the primary UOM of the part.  */  
   WeightUOM:string,
      /**  When true then weight is disregarded in compliance roll-up.  */  
   Manual:boolean,
      /**  The date when exempt status for this substance expires.  */  
   ExemptDate:string,
      /**  Optional. Exemption certificate.  */  
   ExemptCertificate:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Read-only. True when exempt date >= today.  */  
   Exempt:boolean,
      /**  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  */  
   OpCode:string,
   BitFlag:number,
   AssemblySeqDescription:string,
   JobNumPartDescription:string,
   RestrictionDescription:string,
   SubstanceDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperRestrictionRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number  */  
   JobNum:string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   OprSeq:number,
      /**  Restriction Type identification.  */  
   RestrictionTypeID:string,
      /**  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  */  
   OpCode:string,
      /**  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  */  
   Manual:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  */  
   Weight:boolean,
   BitFlag:number,
   AssemblySeqDescription:string,
   JobNumPartDescription:string,
   RestrictionDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobOperRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobOper records are also marked.  This is used to make database access to open operation records more efficient.  */  
   JobComplete:boolean,
      /**   Indicates if this operation is completed. This is normally set to complete via labor entry transactions.   Not maintainable by Job Entry. It can't be reset to "No" if the JobHead.Complete = Yes.
Labor entry setting logic is: If SetUpComplete = Yes and  EstProdHours = 0 or ProdComplete = Yes and EstSetHours = 0 or both ProdComplete = Yes and SetupComplete = Yes  then OpComplete = Yes.
This field is also set by PO receipt entry "issue complete" for subcontract operations.  */  
   OpComplete:boolean,
      /**  Job Number  */  
   JobNum:string,
      /**  Assembly Sequence # that this Operation is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  */  
   OprSeq:number,
      /**  Operation Master Code - Links the JobOper  record with a OpMaster record.  Default is given from WrkCenter.OpCode.  Must be valid in the OpMaster file.  */  
   OpCode:string,
      /**   The Operation standard ID.  This links the JobOper to the OpStd master file.  This can be blank or if entered must be valid if entered.  When this field is changed the ProdStandard, StdFormat and StdBasis should be refreshed with the new defaults.
Valid for "inside operations" only.  */  
   OpStdID:string,
      /**  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  */  
   EstSetHours:number,
      /**   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.
FORMULAS:
If StdFormat = "HR" then EstProdHours = ProdStandard. 
If StdFormat = "PH" then (JobOper.RunQty / Std).
If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.
If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.
If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.
If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.
If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  */  
   EstProdHours:number,
      /**   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.
NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  */  
   ProdStandard:number,
      /**   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;
"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,
"PM" - Pieces/Minute, "OH" - Operations/Hour,
"OM"  - Operations/minute, HR - Fixed Hours.  */  
   StdFormat:string,
      /**   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.
This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  */  
   StdBasis:string,
      /**  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  */  
   OpsPerPart:number,
      /**  Production Quantity per one of the Parent Item.  */  
   QtyPer:number,
      /**  Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  */  
   QueStartDate:string,
      /**  Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   QueStartHour:number,
      /**  Scheduled production start date. Not directly maintainable, updated via the scheduling process.  */  
   StartDate:string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  */  
   StartHour:number,
      /**  Scheduled production due date. Not directly maintainable, updated via the scheduling process.  */  
   DueDate:string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  */  
   DueHour:number,
      /**  Scheduled move due date. Not directly maintainable, updated via the scheduling process.  */  
   MoveDueDate:string,
      /**  Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   MoveDueHour:number,
      /**  Labor rate used for estimated production labor costs. Default from the OpMaster.ProdLabRate.  */  
   ProdLabRate:number,
      /**  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  */  
   SetupLabRate:number,
      /**  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  */  
   ProdBurRate:number,
      /**  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  */  
   SetupBurRate:number,
      /**  This indicates if this is an "added operation". An added operation is one that was not planned on.  */  
   AddedOper:boolean,
      /**  Defaulted from the WrkCenter.SchMachines field. This is the number of machines that this operation will run on at the same time. Logically thought of as a "Squeeze factor" to scheduling. That is the more machines, the shorter the schedule. This affects how much of the total daily workcenter capacity that the operation will consume. For example; Center has 4 machines, 8 Hours per day and operation 2 machines. This operation would consume 16 hours of capacity per day. So if it had 32 hours of estimated production it would schedule as taking 2 days. NOTE THIS ONLY APPLIES TO PRODUCTION HOURS, TOTAL SETUP HOURS ARE ADDED TO THE SQUEEZED PRODUCTION HOURS TO GET THE NUMBER OF HOURS TO BE SCHEDULED. It is however used to calculate the total setup hours on the operation.  */  
   Machines:number,
      /**  Defaulted from the WrkCenter.SetUpCrewSize field. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  */  
   SetUpCrewSize:number,
      /**  Defaults from the WrkCenter.ProdCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  */  
   ProdCrewSize:number,
      /**  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  */  
   ProdComplete:boolean,
      /**  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  */  
   SetupComplete:boolean,
      /**  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  */  
   ActProdHours:number,
      /**  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   ActProdRwkHours:number,
      /**  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  */  
   ActSetupHours:number,
      /**  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  */  
   ActSetupRwkHours:number,
      /**   For Non Subcontract operations: A summary of labor transaction detail. (LaborDtl.LaborQty). Labor entry/collection maintains this field.  Only the LaborQty for transactions that are Production labor ( LaborType = P ) and Not rework (LaborDtl.Rework = No) are included in this summary.
This quantity is used to reduce shop load when the system is configured to reduce load based on quantity completed. (JCSyst.RemoveLoad = Q)
For Subcontract Operations this field is updated by the Purchased Receipt process. The detail records are in the PartTran file.  */  
   QtyCompleted:number,
      /**  Setup function percent complete.  Maintained via labor entry.  */  
   SetupPctComplete:number,
      /**  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  */  
   EstScrap:number,
      /**  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  */  
   EstScrapType:string,
      /**  This flags the operation as being a "SubContract" or an "Internal" operation.  This also controls what fields are allowed to be updated for this record. For example,  an internal operation will not have a PartNum.  */  
   SubContract:boolean,
      /**  Inventory UOM  */  
   IUM:string,
      /**  Estimated Unit Cost for the SubContract operation.  Defaults from the Part table if valid PartNum.  */  
   EstUnitCost:number,
      /**  Hours required is calculated as days * 8.  */  
   DaysOut:number,
      /**  The PartNum to be shipped to the subcontract. Default the JobHead.PartNum or JobAsmbl.PartNum depending on the JobMtl.AssemblySeq.  */  
   PartNum:string,
      /**  Description used only for subcontract operations  */  
   Description:string,
      /**  The SubContractors VendorNum that ties back to the Vendor master file.  This is only valid for "SubContract"  operations. This field is not directly maintainable, instead its assigned by having the user either enter the "VendorID" and then finding the VendorNum in the Vendor file or by  selection list processing.  This is a mandatory entry for subcontract operations.  */  
   VendorNum:number,
      /**  The Vendors purchase point ID. This field is only for the "Subcontract" operations. Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default Purchase point defined in the Vendor file.  */  
   PurPoint:string,
      /**  Editor widget for Job operation comments.  */  
   CommentText:string,
      /**   Indicates the scheduling relationship between this and the preceding  operation. Possible values are "SS" - Start to Start, "FS" Finish to Start or "FF" Finish to Finish.
A "SS" can start when the preceding operation starts.
A "FS" starts when the preceding operation is finished.
A "FF" can finish when the preceding operation finishes.
These relationships do not span between levels of assemblies. The first operation on an assembly is always treated as being "FS" relationship.
A "FF" finishes when the preceding operation is finished.  */  
   SchedRelation:string,
      /**   The total operation quantity. This is a calculated field.  Calculated as (Assembly Required Qty X QtyPer) + Scrap. The assembly qty is either the JobHead.ProdQty if  JobOPer.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobOPer.AssemblySeq > 0.
This value is refreshed when maintenance is performed on the operation record or an assemblies production qty is changed  */  
   RunQty:number,
      /**   This field is blank or contains the UserID. When not blank it indicates that the operations schedule has been changed and is considered as being in a "What If" mode.
This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  */  
   WIName:string,
      /**  This is the What-If number of machines that this operation will run on at the same time.  Setup by and for scheduling from the Machines field.  */  
   WIMachines:number,
      /**  What-if Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  */  
   WIQueStartDate:string,
      /**  What-if Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   WIQueStartHour:number,
      /**  What if Scheduled production start date. Not directly maintainable, updated via the scheduling process.  */  
   WIStartDate:string,
      /**  This field is established by scheduling. It represents the What If "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  */  
   WIStartHour:number,
      /**  What If Scheduled production due date. Not directly maintainable, updated via the scheduling process.  */  
   WIDueDate:string,
      /**  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  */  
   WIDueHour:number,
      /**  What-If Scheduled move due date. Not directly maintainable, updated via the scheduling process.  */  
   WIMoveDueDate:string,
      /**  What-if Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  */  
   WIMoveDueHour:number,
      /**  The Number of Hours per machine per day that this operations "What If" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining ShopLoad records.  */  
   WIHoursPerMachine:number,
      /**  Date at which the operations current outstanding "What-If" load starts at.  Updated by the JobOper write trigger. (See LoadDate)  */  
   WILoadDate:string,
      /**  "Hour offset from the beginning of the work day" for the operations outstanding "What-If"  load. Related to WILoadDate.  */  
   WILoadHour:number,
      /**  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  */  
   ActBurCost:number,
      /**   FOR NON-SUBCONTRACT OPERATIONS: Total of "ALL" labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.
FOR SUBCONTRACT OPERATIONS: The Total Cost, updated via the receipt process.  */  
   ActLabCost:number,
      /**  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  */  
   ReworkBurCost:number,
      /**  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup & Production. Updated via the LaborDtl\Write.p trigger.  */  
   ReworkLabCost:number,
      /**   A total additional charge that is incurred when purchasing this service. Ex(Lot,Setup,Handling,etc...).
Defaulted from VendPart.MiscAmt. This is NOT part of the a Unit Cost. It is NOT consider in the logic of using Minimum Cost.  */  
   MiscAmt:number,
      /**  The Number of Hours per machine per day that this operations "actual" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining the ShopLoad records.  */  
   HoursPerMachine:number,
      /**   Date at which the operations current outstanding load starts at.
Ex: Op schedule is 2/1/97 - 2/10/97, initially LoadDate = 2/1/97. As load is relieved through labor processing the LoadDate moves forward accordingly. When 1/2 completed the LoadDate would be 2/5/97. This field is primarily used by the Scheduling Board to calculate the graphical image of outstanding load.  Updated by the JobOper write trigger.  */  
   LoadDate:string,
      /**  "Hour offset from the beginning of the work day" for the operations outstanding load. Related to LoadDate.  */  
   LoadHour:number,
      /**  Internally used field to prevent redundant read of JobOper during execution of "Reloader" program. (See WrkCenter.ReloadNum)  */  
   ReloadNum:number,
      /**  Controls if an alert is to be sent when this JobOper is completed.  */  
   SndAlrtCmpl:boolean,
      /**  Indicates if  Inspection is required when items are received to this JobOper (subcontract only). Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  */  
   RcvInspectionReq:boolean,
      /**  Identical to JobHead.JobEngineered.  ShopLoad capacity is only allocated to Jobs where JobEngineered = YES.  */  
   JobEngineered:boolean,
      /**   The estimated set up hours per machine.
Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  */  
   EstSetHoursPerMch:number,
      /**   Part Revision number.
Pertains to subcontracting operations only.   An optional field.   Related JobAsmbl.RevisionNum is used as the default.  */  
   RevisionNum:string,
      /**  Currently not used. Prep for future development.  */  
   AutoReceiptDate:string,
      /**  The labor date of the last labor transaction that was posted to this operation.  Used by the JobOper write trigger Auto Receieve logic.  */  
   LastLaborDate:string,
      /**  The service call that this operation belongs to.  */  
   CallNum:number,
      /**  The Service Call Line that this operation relates to.  */  
   CallLine:number,
      /**  Labor rate used for  time on an operation.  Time per hour per technician. in base currency.  */  
   LaborRate:number,
      /**  Billable Labor rate used for  time on a service.  Time per hour per technician. in base currency. This field considers the percentage coverage of a warranty or contract.  */  
   BillableLaborRate:number,
      /**  Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. Does not consider warranty or contract  */  
   DocLaborRate:number,
      /**  Billable Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. considers warranty or contract  */  
   DocBillableLaborRate:number,
      /**  FS - Is this a billable operation.  */  
   Billable:boolean,
      /**  FS - Unit Price for the subcontract in base currency.  */  
   UnitPrice:number,
      /**  FS - Billable Unit Price for the subcontract in base currency.  */  
   BillableUnitPrice:number,
      /**  FS - Billable Price per unit for the subcontract in customers currency.  */  
   DocBillableUnitPrice:number,
      /**  FS - Unit Price for the for the Subcontract in Customer currency.  */  
   DocUnitPrice:number,
      /**  Indicates the Method for Labor Entry.  Can be "T" - Time and Quantity, "Q" - Quantity Only (Time is estimated), "B" - Backflush or "X" - Time - Backflush Qty.  */  
   LaborEntryMethod:string,
      /**  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  */  
   PricePerCode:string,
      /**  The quantity requested for first article inspection.  */  
   FAQty:number,
      /**  The "to date" quantity that has been moved to the input Warehouse/Bin of the subsequent operations ResourceGroup/Resource input Warehouse/Bin.  This is NOT A balance.  It is a "to date" value.  It is not reduced as it is consumed.  Used in calculation of "Outstanding" WIP in the Request Material/WIP program (ame30-dg.w).  Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the WIP material in/out of the staging area (Issues, Returns).  */  
   QtyStagedToDate:number,
      /**  A flag to indicate that this job operation requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  This only applies to subcontract operations.  */  
   RFQNeeded:boolean,
      /**  The number of vendor quotes that are required for this job subcontract operation.  Can be zero if RFQ(s) are not required.  */  
   RFQVendQuotes:number,
      /**  RFQ number that the item is linked to.  */  
   RFQNum:number,
      /**  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  */  
   RFQLine:number,
      /**   RFQ Status.
W= Waiting, A = Accepted, R = Requested, C = Received  */  
   RFQStat:string,
      /**  Used to group operation to save on setups.  */  
   SetupGroup:string,
      /**  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  */  
   RestoreFlag:string,
      /**  Analysis Code  */  
   AnalysisCode:string,
      /**   Identifies the primary JobOpDtl to be used for setup.  The setup time for the operation is determined on the JobOpDtl.
If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = S or B.  */  
   PrimarySetupOpDtl:number,
      /**   Identifies the primary JobOpDtl to be used for production.  The production run time for the operation is determined on the JobOpDtl.
If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = P or B.  */  
   PrimaryProdOpDtl:number,
      /**  Operation Description.  */  
   OpDesc:string,
      /**  Kit Date. Not directly maintanable. Updated via the scheduling process.  */  
   KitDate:string,
      /**  Global RFQ flag.  Used in Consolidated Purchasing.  */  
   GlbRFQ:boolean,
      /**  Booked Unit Cost  */  
   BookedUnitCost:number,
      /**   Initially defaulted to false. This flag is set to true at the time JobOper.ProdComplete is set to true if JobHead.ProductionYield = true and OpMaster. PrdYldRecalcExpected = true and the actual completed qty for the operation vs. the expected completion qty is out of variance based on the under percentage set in OpMaster. This flag is used by the production yield recalculation logic to determine if recalculation is required for a job.
This field is maintained by the system only.  */  
   RecalcExpProdYld:boolean,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  When true this would signify that this operation was rough cut scheduled - meaning the operation would have start and end dates but no supporting resourcetimeused or shopload records.  */  
   RoughCutSched:boolean,
      /**  Scheduling Comments  */  
   SchedComment:string,
      /**  Reporting currency value of this field  */  
   Rpt1BillableLaborRate:number,
      /**  Reporting currency value of this field  */  
   Rpt2BillableLaborRate:number,
      /**  Reporting currency value of this field  */  
   Rpt3BillableLaborRate:number,
      /**  Reporting currency value of this field  */  
   Rpt1BillableUnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt2BillableUnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt3BillableUnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt1LaborRate:number,
      /**  Reporting currency value of this field  */  
   Rpt2LaborRate:number,
      /**  Reporting currency value of this field  */  
   Rpt3LaborRate:number,
      /**  Reporting currency value of this field  */  
   Rpt1UnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt2UnitPrice:number,
      /**  Reporting currency value of this field  */  
   Rpt3UnitPrice:number,
      /**  Indicates whether serial numbers are required form this operation. When true the system will prompt in labor entry processes for the serial numbers that have been completed on this operation.  */  
   SNRequiredOpr:boolean,
      /**  Indicates whether serial numbers are required on subcontract ship for a subcontract operation.  */  
   SNRequiredSubConShip:boolean,
      /**  Operation Weight defaulted from Part Master.  */  
   Weight:number,
      /**  Operation Weight UOM defaulted from Part Master.  */  
   WeightUOM:string,
      /**   Determines the scheduling offset for the secondary start-to-start operation, offset which will be either

calculated (or entered) on the primary operation. The offset time can be calculated by pieces, percentage 

of the operation duration or entered manually by the user on the primary operation. The secondary operation 

will scheduled to start after the offset period.  */  
   SendAheadType:string,
      /**   Scheduling offset for the secondary start-to-start operation. The offset time can be calculated by pieces,

percentage of the operation duration or entered manually by the user on the primary operation. The 

secondary operation will scheduled to start after the offset period.  */  
   SendAheadOffset:number,
      /**  Delimited list of PrjRoleCd codes that are allowed for this operation.  */  
   PrjRoleList:string,
      /**  Scheduled tear down start date. The start date would be the production end date.  */  
   TearDwnEndDate:string,
      /**  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  */  
   TearDwnEndHour:number,
      /**  Scheduled tear down start date. The start date would be the production end date.  */  
   WITearDwnEndDate:string,
      /**  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  */  
   WITearDwnEndHour:number,
   UseAllRoles:boolean,
      /**  The PartNum for the asset. This should be disabled for a service call job, in which case the asset information would be transferred from the service call line when an operation is created for the job.  */  
   AssetPartNum:string,
      /**  Serial number of the asset.  */  
   SerialNumber:string,
      /**  ActualStartDate  */  
   ActualStartDate:string,
      /**  ActualStartHour  */  
   ActualStartHour:number,
      /**  ActualEndDate  */  
   ActualEndDate:string,
      /**  ActualEndHour  */  
   ActualEndHour:number,
      /**  FSJobStatus  */  
   FSJobStatus:number,
      /**  Instructions  */  
   Instructions:string,
      /**  ProdUOM  */  
   ProdUOM:string,
      /**  GeneralPlanInfo  */  
   GeneralPlanInfo:string,
      /**  EstStdDescription  */  
   EstStdDescription:string,
      /**  JDFOpCompleted  */  
   JDFOpCompleted:boolean,
      /**  RemovedfromPlan  */  
   RemovedfromPlan:boolean,
      /**  EstStdType  */  
   EstStdType:number,
      /**  Indicates the record is used with Machine MES  */  
   ExternalMES:boolean,
      /**  PctReg  */  
   PctReg:number,
      /**  SetupMaterial  */  
   SetupMaterial:number,
      /**  MaterialColorRating  */  
   MaterialColorRating:number,
      /**  MiscInfo1  */  
   MiscInfo1:string,
      /**  MiscInfo2  */  
   MiscInfo2:string,
      /**  SetupURL  */  
   SetupURL:string,
      /**  ExpPctUp  */  
   ExpPctUp:number,
      /**  ExpCycTm  */  
   ExpCycTm:number,
      /**  ExpGood  */  
   ExpGood:number,
      /**  NonProdLimit  */  
   NonProdLimit:number,
      /**  AutoSpcEnable  */  
   AutoSpcEnable:boolean,
      /**  AutoSpcPeriod  */  
   AutoSpcPeriod:number,
      /**  PartQualEnable  */  
   PartQualEnable:boolean,
      /**  AutoSpcSubgroup  */  
   AutoSpcSubgroup:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  MobileOperation  */  
   MobileOperation:boolean,
      /**  ReWork  */  
   ReWork:boolean,
      /**  RequestMove  */  
   RequestMove:boolean,
      /**  ContractID  */  
   ContractID:string,
      /**  PrinterID  */  
   PrinterID:string,
      /**  LastPrintedDate  */  
   LastPrintedDate:string,
      /**  LastPCIDPrinted  */  
   LastPCIDPrinted:string,
      /**  CurrentPkgCode  */  
   CurrentPkgCode:string,
      /**  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  */  
   ExternalMESSyncRequired:boolean,
      /**  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  */  
   ExternalMESLastSync:string,
      /**  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  */  
   QtyPerCycle:number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  Planning number of pieces for this attribute set.  */  
   PlanningNumberOfPieces:number,
      /**  The identification of related StageNo.  */  
   StageNumber:string,
      /**  TemplateID  */  
   TemplateID:string,
      /**  The sum of LaborDtl ScrapQty for this operation.  */  
   ActScrapQty:number,
      /**  Auto receive flag  */  
   AutoReceive:boolean,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
      /**  The currency switch flag.  */  
   CurrencySwitch:boolean,
      /**  A symbol that identifies the currency. Used on Forms and displays  */  
   CurrSymbol:string,
   DisplayExtPrice:number,
      /**  The display service amount.  */  
   DisplayServAmt:number,
      /**  The display service labor rate  */  
   DisplayServLaborRate:number,
      /**  Calculated display unit price  */  
   DisplayUnitPrice:number,
      /**  The document display extended price  */  
   DocDisplayExtPrice:number,
      /**  The converted display service amount.  */  
   DocDisplayServAmt:number,
      /**  The converted display service labor rate.  */  
   DocDisplayServLaborRate:number,
      /**  The document display unit price  */  
   DocDisplayUnitPrice:number,
      /**  Display IUM field (readonly)  */  
   DspIUM:string,
      /**  Field to determine to enable or disable autoreceive.  */  
   EnableAutoReceive:boolean,
      /**  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  */  
   EnableSndAlrtCmpl:boolean,
      /**  This external field is used as a flag to determine when to enable/disable the SNRequiredSubConShip field on UI screen.  */  
   EnableSNReqSubConShip:boolean,
   EnableSNRequiredOpr:boolean,
      /**  For non subconctract operations JobOper.EstSetHours * JobOper.SetupBurRate + JobOper.EstProdHours * JobOper.ProdBurRate  */  
   EstBurdenCost:number,
      /**  The calculated estimated labor hours  */  
   EstLabHours:number,
      /**  For non subcontract operations : JobOper.EstSetHours * JobOper.SetupCrewSize * JobOper.SetupLabRate +JobOper.EstProdHours * JobOper.ProdCrewSize * JobOper.ProdLabRate  */  
   EstLaborCost:number,
      /**  For SubContract operations: JobOper.EstUnitCost * JobOper.RunQty  */  
   EstSubCost:number,
      /**  Final operation  */  
   FinalOpr:boolean,
      /**  IsBaseCurrency  */  
   IsBaseCurrency:boolean,
      /**  This is the description of the Method for Labor Entry.  Can be "Time and Quantity" for 'T', "Quantity Only" for 'Q', "Backflush" for 'B' or "Time and Backflush Qty" for 'X'  */  
   LaborEntryMethodDesc:string,
      /**  The total Load Hours calculated by summing the SetUpLoadHrs + ProdLoadHrs.  */  
   LoadHrs:number,
   OpStdDescription:string,
      /**  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  */  
   PrimaryProdOpDtlDesc:string,
      /**  Primary Resource Group Description  */  
   PrimaryResourceGrpDesc:string,
      /**  The Resource Group ID of the primary production operation detail.  */  
   PrimaryResourceGrpID:string,
      /**  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  */  
   PrimarySetupOpDtlDesc:string,
      /**  The calculated production quantity  */  
   ProductionQty:number,
      /**  Indicates if the scheduling resources should be refreshed when the op code changes.  */  
   RefreshResources:boolean,
   Rpt1DisplayExtPrice:number,
   Rpt1DisplayServAmt:number,
   Rpt1DisplayServLaborRate:number,
   Rpt1DisplayUnitPrice:number,
   Rpt2DisplayExtPrice:number,
   Rpt2DisplayServAmt:number,
   Rpt2DisplayServLaborRate:number,
   Rpt2DisplayUnitPrice:number,
   Rpt3DisplayExtPrice:number,
   Rpt3DisplayServAmt:number,
   Rpt3DisplayServLaborRate:number,
   Rpt3DisplayUnitPrice:number,
      /**  The calculated scrap quantity  */  
   ScrapQty:number,
      /**  Contains the value of which icon to display in tree for joboper  */  
   ShowStatusIcon:string,
      /**  StdBasis Description  */  
   StdBasisDescription:string,
      /**  StdFormat Description  */  
   StdFormatDescription:string,
      /**  For SubContract Operations equals to the ActLaborCost  */  
   ActSubCost:number,
   EnableAttributeSetSearch:boolean,
   BitFlag:number,
   AnalysisCdDescription:string,
   AssemblySeqDescription:string,
   CallLineLineDesc:string,
   DynAttrValueSetShortDescription:string,
   DynAttrValueSetDescription:string,
   JobNumPartDescription:string,
   OpCodeOpDesc:string,
   PartNumAttrClassID:string,
   PartNumSellingFactor:number,
   PartNumPricePerCode:string,
   PartNumTrackDimension:boolean,
   PartNumIUM:string,
   PartNumSalesUM:string,
   PartNumPartDescription:string,
   PartNumTrackSerialNum:boolean,
   PartNumTrackLots:boolean,
   PartNumTrackInventoryAttributes:boolean,
   PartNumTrackInventoryByRevision:boolean,
   RFQLineLineDesc:string,
   SetupGroupDescription:string,
   StageNoDescription:string,
   VendorNumTermsCode:string,
   VendorNumDefaultFOB:string,
   VendorNumName:string,
   VendorNumCountry:string,
   VendorNumAddress2:string,
   VendorNumCurrencyCode:string,
   VendorNumZIP:string,
   VendorNumState:string,
   VendorNumAddress1:string,
   VendorNumAddress3:string,
   VendorNumCity:string,
   VendorNumVendorID:string,
   VendorPPZip:string,
   VendorPPCity:string,
   VendorPPAddress2:string,
   VendorPPPrimPCon:number,
   VendorPPAddress1:string,
   VendorPPCountry:string,
   VendorPPState:string,
   VendorPPName:string,
   VendorPPAddress3:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobPartRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number. Used in tying record back to its parent JobHead record.  */  
   JobNum:string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   PartNum:string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**   Part Per Operation. Active only for Concurrent process
Jobs. Otherwise set to 1.  */  
   PartsPerOp:number,
      /**   The number of individual parts that are being produced
part. Sum of all related JobProd.ProdQty.
Not Directly maintable.  */  
   PartQty:number,
      /**  Part Qty that is being produced for Stock.  */  
   StockQty:number,
      /**   Total Quantity of the end part shipped from this job.
Updated via the ShipDtl write triggers.  */  
   ShippedQty:number,
      /**   Total quantity received to stock for the end part of the Job.
Updated via the Manufacturing receipts process.  */  
   ReceivedQty:number,
      /**   Represents the "outstanding" WIP of production quantity.
A summary of JobProd.WIPQty, updated via JobProd write trigger.  */  
   WIPQty:number,
      /**   Part Production quantity completed.
Updated via JobOper write trigger or LaborPart trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  */  
   QtyCompleted:number,
      /**  Quantity of the job completed quantity that is "Reserved" for the linked demands (sales orders/other jobs). Summary of PartAlloc.ReservedQty where PartAlloc.SupplyJobNum = JobHead.JobNum.  Reservations for Orders are made via the Order Allocations program. They are excluded from available quantity calculations for the job. Available Quantity = JobHead.QtyCompleted - (Shipped + Received to stk + ReservedAllocQty + PickingQty + PickedQty).  Maintained via PartAlloc write trigger.  */  
   ReservedQty:number,
      /**  Total Allocated Quantity for this job part  */  
   AllocatedQty900:number,
      /**  Quantity of the job completed quantity that is considered as in the "Picking" process for the linked sales orders. Summary of PartAlloc.PickingQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickingQty is set in the Order Allocation program. Maintained via PartAlloc write trigger.  */  
   PickingQty:number,
      /**  Quantity of the job completed quantity that is considered as in the shipping "Staging" process for the linked sales orders. Summary of PartAlloc.PickedQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickedQty is updated when the material move moves the item to the staging area.  Maintained via PartAlloc write trigger.  */  
   PickedQty:number,
      /**   Defines an integer value which is used to calculate a
ratio for prorating the labor costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  */  
   LbrCostBase:number,
      /**   Defines an integer value which is used to calculate a
ratio for prorating the material costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  */  
   MtlCostBase:number,
      /**  Indicates if Job is closed.  Mirror image of JobHead.JobClosed. Duplicated for performance reasons  */  
   JobClosed:boolean,
      /**  Indicates if production is complete for the job.   Mirror image of JobHead.JobClosed. Duplicated for performance reasons  */  
   JobComplete:boolean,
      /**  Site Identifier.  Mirror image of JobHead.Site. Duplicated for performance reasons  */  
   Plant:string,
      /**  Describes the Part.  */  
   PartDescription:string,
      /**  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  */  
   IUM:string,
      /**   Shipping Documents Required.
Indicates if shipping documents are required when shipping this part from the Job. Pertains to Job Shipments only and only if the PartNum does not exist in the PartTable. If it does exist then the Part.ShipDocReq. If checked, then at the time of shipping the system will require that the JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  */  
   ShipDocReq:boolean,
      /**   Required Shipping Documents Available.
A flag manually set by the user to indicate that the required documents for the Job Part  are available. In order to set to Yes, at least one attachment having a DocType with Shipment = yes must exist for the Job Part.  If the Part.ShipDocReq = yes  then JobPart.ShipDocsA vail must = yes before the system will allow shipment of the Part from the job.Requires DocManagement license.  */  
   ShipDocAvail:boolean,
      /**  List of materials that us this part as cost base  */  
   MtlList:string,
      /**  Indicates that MRP should not create job suggestions for the specified co-part  */  
   PreventSugg:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
   OrderQty:number,
      /**  The value of the JobHead.ProcessMode  */  
   ProcessMode:string,
      /**  Indicates if ShipDocReq is enabled. Only if JobPart.PartNum does not exist in Part Table and if Document Management is installed.  */  
   EnableShipDocReq:boolean,
      /**  Logical field signifying whether JobPart.PartNum is a valid part master part.  */  
   PartmasterPart:boolean,
   EnableSugg:boolean,
   BitFlag:number,
   DynAttrValueSetDescription:string,
   DynAttrValueSetShortDescription:string,
   PartTrackDimension:boolean,
   PartPricePerCode:string,
   PartTrackInventoryByRevision:boolean,
   PartAttrClassID:string,
   PartPartDescription:string,
   PartTrackLots:boolean,
   PartIUM:string,
   PartSellingFactor:number,
   PartSalesUM:string,
   PartTrackInventoryAttributes:boolean,
   PartTrackSerialNum:boolean,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobProdRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number. Used in tying record back to its parent JobHead record.  */  
   JobNum:string,
      /**  Related sales order number. For build to stock demands the OrderNum, OrderLine and OrderRel fields are all zero  */  
   OrderNum:number,
      /**  Related Sales order line number.  */  
   OrderLine:number,
      /**  Related sales order release number.  */  
   OrderRelNum:number,
      /**   The planned production quantity for a  Job to fill the demand.
Note: updates the JobHead.ProdQty via JobProd write trigger.  */  
   ProdQty:number,
      /**   Inventory warehouse that job is producing for.
Only relevant for build to stock demands (ordernum = 0). In this case a valid Part must be referenced.  */  
   WarehouseCode:string,
      /**  Production Demands can be from other jobs.  That is, one job can be building parts that are required by another job. The demand is defined by a JobMtl record on some other job.  "TargetJobNum" is the job that this job is making parts for.  */  
   TargetJobNum:string,
      /**  Assembly Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  */  
   TargetAssemblySeq:number,
      /**  Material Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  */  
   TargetMtlSeq:number,
      /**   Quantity Shipped against this allocation.
Updated via the ShipDtl write triggers.  */  
   ShippedQty:number,
      /**   Total quantity received to stock for this production allocation.
Updated via the Manufacturing Receipts process  */  
   ReceivedQty:number,
      /**   Represents the "outstanding" WIP production quantity.
WIPQty = JobProd.Quantity - (ShippedQty +ReceivedQty) if negative then it is set to zero. If related Order Release is closed then reservation is zero.
Updated via the JobProd, OrderRel triggers.  */  
   WIPQty:number,
      /**  The Service Call number that this Job is linked to.  */  
   CallNum:number,
      /**  The Service Call Line that this Job is linked to.  */  
   CallLine:number,
      /**  This is the unique key for this table.  It will have a prefix like Job to indicate firm or unfirm orders.  The record can be linked to an Order Header by using the TFOrdNum TFOrdSeq keys.  */  
   TFLineNum:string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   PartNum:string,
      /**  Site Identifier.  */  
   Plant:string,
      /**  The demand contract this demand schedule is for.  */  
   DemandContractNum:number,
      /**  The sequence from the DemandHead record this DemandSchedule is related to.  */  
   DemandHeadSeq:number,
      /**  The sequence from the DemandDetail record this DemandSchedule is related to.  */  
   DemandDtlSeq:number,
      /**  This field along with Company, DemandContractNum, DemandHeadSeq, and DemandDetailSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandSchedulel record for the DemandDetail and the adding 1 to it.  */  
   DemandScheduleSeq:number,
      /**  PlanUserID  */  
   PlanUserID:string,
      /**  PlanID  */  
   PlanID:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Job will be shipped through a Misc Shipment directly from WIP when job is closed.  */  
   WIPToMiscShipment:boolean,
      /**  RMA Num linked from RMA Disposition.  */  
   RMANum:number,
      /**  RMA Line linked from RMA Disposition.  */  
   RMALine:number,
      /**  RMA Receipt linked from RMA Disposition.  */  
   RMAReceipt:number,
      /**  RMA Disposition linked from RMA Disposition.  */  
   RMADisp:number,
      /**  DMRNum  */  
   DMRNum:number,
      /**  DMRActionNum  */  
   DMRActionNum:number,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  Planning number of pieces for this attribute set.  */  
   PlanningNumberOfPieces:number,
      /**  Revision number which is used to uniquely identify the revision of the part.  */  
   RevisionNum:string,
      /**  The customer ID  */  
   CustID:string,
      /**  The customer name.  */  
   CustName:string,
      /**  The demand linke source  */  
   DemandLinkSource:string,
      /**  The demand link status  */  
   DemandLinkStatus:string,
      /**  IUM  */  
   IUM:string,
      /**  The jobhead part description  */  
   JHPartDesc:string,
      /**  The jobhead part number  */  
   JHPartNum:string,
      /**  The make to job quantity  */  
   MakeToJobQty:number,
      /**  The make to stock quantity  */  
   MakeToStockQty:number,
      /**  The Make to type (i.e. Stock, Job, Order)  */  
   MakeToType:string,
      /**  Calculated quantity that could come from allocatedqty or accumulation from parttran.  */  
   MaxAllowedQty:number,
      /**  The jobmtl part description.  */  
   MtlPartDesc:string,
      /**  The jobmtl part number.  */  
   MtlPartNum:string,
      /**  The order WIP quantity  */  
   OrdWIPQty:number,
      /**  Calculated field OurStockQty, will update OrderRel.OurStockQty  */  
   OurStockQty:number,
      /**  Pull from Stock warehouse code (orderrel.warehousecode  */  
   PullFromStockWarehouseCode:string,
      /**  The pull from stock warehouse description  */  
   PullFromStockWarehouseDesc:string,
      /**  The Demand Link Due Date - Ship By  */  
   ShipBy:string,
      /**  The split quantity for the demand.  */  
   SplitQty:number,
      /**  The stock WIP quantity  */  
   StkWIPQty:number,
   TFOrdLine:number,
   TFOrdNum:string,
      /**  Temp field so UI has a column to bind to for calculation of Total Split Quantity.  */  
   TotalSplitQuantity:number,
   TrackSerialNumbers:boolean,
      /**  This is a field used in Split Job to determine if record has been validated.  */  
   Valid:boolean,
      /**  The jobasmbl part description.  */  
   AsmPartDesc:string,
      /**  The jobasmbl part number.  */  
   AsmPartNum:string,
   EnableAttributeSetSearch:boolean,
      /**  Number of pieces for inventory attribute tracked parts.  */  
   DispNumberOfPieces:number,
      /**  Indicates a customer referenced on the record is inactive.  */  
   CustInactive:boolean,
      /**  Indicates if a ShipTo referenced on the record is inactive.  */  
   ShipToNumInactive:boolean,
   BitFlag:number,
   CallLineLineDesc:string,
   DynAttrValueSetShortDescription:string,
   DynAttrValueSetDescription:string,
   JobNumPartDescription:string,
   OrderLineLineDesc:string,
   OrderNumCurrencyCode:string,
   OrderNumCardMemberName:string,
   PartAttrClassID:string,
   PartTrackInventoryByRevision:boolean,
   PartSalesUM:string,
   PartTrackSerialNum:boolean,
   PartSellingFactor:number,
   PartTrackLots:boolean,
   PartIUM:string,
   PartTrackDimension:boolean,
   PartPricePerCode:string,
   PartPartDescription:string,
   PartTrackInventoryAttributes:boolean,
   WarehouseCodeDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobResourcesRow{
   Company:string,
   JobNum:string,
   AssemblySeq:number,
   OprSeq:number,
   OpDtlSeq:number,
   WhatIf:boolean,
   AllocNum:number,
   ResourceGrpID:string,
   ResourceID:string,
   ResourceDesc:string,
      /**  Calendar Name  */  
   CalendarName:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_JobStageRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Job Number.  */  
   JobNum:string,
      /**  Assembly Sequence # that this Stage is associated with.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies stage record within the stage set.  */  
   StageSeq:number,
      /**  The identification of related StageNo.  */  
   StageNumber:string,
      /**  SysRevID  */  
   SysRevID:number,
      /**  SysRowID  */  
   SysRowID:string,
   BitFlag:number,
   StageNumberDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_MaterialCostRow{
   AssemblySeq:number,
   Description:string,
   EstBurUnitCost:number,
   EstLbrUnitCost:number,
   EstMtlBurUnitCost:number,
   EstMtlUnitCost:number,
   EstSubUnitCost:number,
   EstUnitCost:number,
   MaterialBurCost:number,
   MaterialLabCost:number,
   MaterialMtlCost:number,
   MaterialSubCost:number,
   MtlBurCost:number,
   MtlSeq:number,
   PartNum:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_UpdExtJobEntryTableset{
   JobHead:Erp_Tablesets_JobHeadRow[],
   JobHeadAttch:Erp_Tablesets_JobHeadAttchRow[],
   JobAsmbl:Erp_Tablesets_JobAsmblRow[],
   JobAsmblAttch:Erp_Tablesets_JobAsmblAttchRow[],
   JobAsmblInsp:Erp_Tablesets_JobAsmblInspRow[],
   JobMtl:Erp_Tablesets_JobMtlRow[],
   JobMtlAttch:Erp_Tablesets_JobMtlAttchRow[],
   JobMtlInsp:Erp_Tablesets_JobMtlInspRow[],
   JobMtlRefDes:Erp_Tablesets_JobMtlRefDesRow[],
   JobMtlRestriction:Erp_Tablesets_JobMtlRestrictionRow[],
   JobMtlRestrictSubst:Erp_Tablesets_JobMtlRestrictSubstRow[],
   JobOper:Erp_Tablesets_JobOperRow[],
   JobOperAttch:Erp_Tablesets_JobOperAttchRow[],
   JobOperAction:Erp_Tablesets_JobOperActionRow[],
   JobOperActionParam:Erp_Tablesets_JobOperActionParamRow[],
   JobOperInsp:Erp_Tablesets_JobOperInspRow[],
   JobOperMachParam:Erp_Tablesets_JobOperMachParamRow[],
   JobOpDtl:Erp_Tablesets_JobOpDtlRow[],
   JobResources:Erp_Tablesets_JobResourcesRow[],
   JobOperRestriction:Erp_Tablesets_JobOperRestrictionRow[],
   JobOperRestrictSubst:Erp_Tablesets_JobOperRestrictSubstRow[],
   JobAsmblRestriction:Erp_Tablesets_JobAsmblRestrictionRow[],
   JobAsmblRestrictSubst:Erp_Tablesets_JobAsmblRestrictSubstRow[],
   JobAsmRefDes:Erp_Tablesets_JobAsmRefDesRow[],
   JobAudit:Erp_Tablesets_JobAuditRow[],
   JobPart:Erp_Tablesets_JobPartRow[],
   JobProd:Erp_Tablesets_JobProdRow[],
   JobStage:Erp_Tablesets_JobStageRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

   /** Required : 
      @param ipJobNum
      @param ipStartAssemblySeq
      @param ipPartNum
   */  
export interface FindAssembly_input{
      /**  The job number to search from.  */  
   ipJobNum:string,
      /**  The starting assembly sequence to search from.  */  
   ipStartAssemblySeq:number,
      /**  The part number or part number string to search for.  */  
   ipPartNum:string,
}

export interface FindAssembly_output{
parameters : {
      /**  output parameters  */  
   opAssemblySeq:number,
   opRowid:string,
}
}

   /** Required : 
      @param partNum
   */  
export interface GetApprovedConfiguredRevisionNum_input{
      /**  Part Number that will be used to get the most recent approved part revision  */  
   partNum:string,
}

export interface GetApprovedConfiguredRevisionNum_output{
parameters : {
      /**  output parameters  */  
   revisionNum:string,
}
}

   /** Required : 
      @param ipJobNum
      @param ipAssemblySeq
   */  
export interface GetAssemblyCosts_input{
      /**  Job Number of the target Assembly  */  
   ipJobNum:string,
      /**  Assembly Sequence  */  
   ipAssemblySeq:number,
}

export interface GetAssemblyCosts_output{
   returnObj:Erp_Tablesets_JobCostsTableset[],
}

   /** Required : 
      @param jobNum
   */  
export interface GetByID_input{
   jobNum:string,
}

export interface GetByID_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param jobNum
      @param jobType
   */  
export interface GetByIdandJobType_input{
      /**  JobHead.JobNum  */  
   jobNum:string,
      /**  JobHead.JobType  */  
   jobType:string,
}

export interface GetByIdandJobType_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param id
   */  
export interface GetBySysRowID_input{
   id:string,
}

export interface GetBySysRowID_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ids
   */  
export interface GetBySysRowIDs_input{
   ids:string,
}

export interface GetBySysRowIDs_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param tableName
      @param fieldName
   */  
export interface GetCodeDescList_input{
   tableName:string,
   fieldName:string,
}

export interface GetCodeDescList_output{
   returnObj:string,
}

   /** Required : 
      @param ds
      @param ipJobNum
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
      @param ipJobTypeMode
   */  
export interface GetDatasetForTreeByRef_input{
   ds:Erp_Tablesets_JobEntryTableset[],
      /**  The Job Number to return data for.  */  
   ipJobNum:string,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to return a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
      /**  Job must be one of these types else it is an error. ipJobTypeMode can be blank, no constraint  */  
   ipJobTypeMode:string,
}

export interface GetDatasetForTreeByRef_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobNum
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
      @param ipJobTypeMode
   */  
export interface GetDatasetForTree_input{
      /**  The Job Number to return data for.  */  
   ipJobNum:string,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to return a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
      /**  Job must be one of these types else it is an error. ipJobTypeMode can be blank, no constraint  */  
   ipJobTypeMode:string,
}

export interface GetDatasetForTree_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param currJobNum
      @param currAsmSeq
      @param sourceFile
      @param sourceQuote
      @param sourceLine
      @param sourceJob
      @param sourceAsm
      @param sourcePart
      @param sourceRev
      @param sourceAltMethod
      @param resequence
      @param useMethodForParts
      @param getCostsFromInv
      @param getCostsFromTemp
   */  
export interface GetDetailsMsgWarning_input{
      /**  Job Number of the target Assembly  */  
   currJobNum:string,
      /**  Sequence of the target Assembly  */  
   currAsmSeq:number,
      /**  Source (Quote, Job, or Method) of the details to copy  */  
   sourceFile:string,
      /**  Quote Number to get details from (populated when sourceFile = "Quote")  */  
   sourceQuote:number,
      /**  Quote Line to get details from (populated when sourceFile = "Quote")  */  
   sourceLine:number,
      /**  Job Number to get details from (populated when sourceFile = "Job")  */  
   sourceJob:string,
      /**  Quote Assembly to get details from (populated when sourceFile = "Quote" or "Job")  */  
   sourceAsm:number,
      /**  Part Num to get details from (populated when sourceFile = "Method")  */  
   sourcePart:string,
      /**  Revision number to get details from (populated when sourceFile = "Method")  */  
   sourceRev:string,
      /**  Alternate Method to get details from (populated when sourceFile = "Method")  */  
   sourceAltMethod:string,
      /**  Indicates if assemblys should be resequenced  */  
   resequence:boolean,
      /**  If true use the method passed in for all parts in assemblies, if false
            <param name="getCostsFromInv"></param><param name="getCostsFromTemp"></param>
            use the assembly part's default method.  */  
   useMethodForParts:boolean,
   getCostsFromInv:boolean,
   getCostsFromTemp:boolean,
}

export interface GetDetailsMsgWarning_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   outWarningList:string,
}
}

   /** Required : 
      @param currJobNum
      @param currAsmSeq
      @param sourceFile
      @param sourceQuote
      @param sourceLine
      @param sourceJob
      @param sourceAsm
      @param sourcePart
      @param sourceRev
      @param sourceAltMethod
      @param resequence
      @param useMethodForParts
      @param getCostsFromInv
      @param getCostsFromTemp
   */  
export interface GetDetails_input{
      /**  Job Number of the target Assembly  */  
   currJobNum:string,
      /**  Sequence of the target Assembly  */  
   currAsmSeq:number,
      /**  Source (Quote, Job, or Method) of the details to copy  */  
   sourceFile:string,
      /**  Quote Number to get details from (populated when sourceFile = "Quote")  */  
   sourceQuote:number,
      /**  Quote Line to get details from (populated when sourceFile = "Quote")  */  
   sourceLine:number,
      /**  Job Number to get details from (populated when sourceFile = "Job")  */  
   sourceJob:string,
      /**  Quote Assembly to get details from (populated when sourceFile = "Quote" or "Job")  */  
   sourceAsm:number,
      /**  Part Num to get details from (populated when sourceFile = "Method")  */  
   sourcePart:string,
      /**  Revision number to get details from (populated when sourceFile = "Method")  */  
   sourceRev:string,
      /**  Alternate Method to get details from (populated when sourceFile = "Method")  */  
   sourceAltMethod:string,
      /**  Indicates if assemblys should be resequenced  */  
   resequence:boolean,
      /**  If true use the method passed in for all parts in assemblies, if false
            <param name="getCostsFromInv"></param><param name="getCostsFromTemp"></param>
            use the assembly part's default method.  */  
   useMethodForParts:boolean,
   getCostsFromInv:boolean,
   getCostsFromTemp:boolean,
}

export interface GetDetails_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

export interface GetIfCurrentSiteHasExternalMES_output{
   returnObj:boolean,
}

   /** Required : 
      @param JobNum
   */  
export interface GetJMtlStatFilters_input{
      /**  Job Number for the Job Material Status view  */  
   JobNum:string,
}

export interface GetJMtlStatFilters_output{
   returnObj:Erp_Tablesets_JMtlStatFiltersTableset[],
}

   /** Required : 
      @param ds
   */  
export interface GetJMtlStat_input{
   ds:Erp_Tablesets_JMtlStatFiltersTableset[],
}

export interface GetJMtlStat_output{
   returnObj:Erp_Tablesets_JMtlStatTableset[],
}

   /** Required : 
      @param whereClause
      @param pageSize
      @param absolutePage
   */  
export interface GetJobListForSerialTrackedParts_input{
      /**  An expression used to filter the rows. Can be left blank for all rows.  */  
   whereClause:string,
      /**  The maximum number of rows to return. Leave as zero for no maximum.  */  
   pageSize:number,
      /**  Page of rows to return.  */  
   absolutePage:number,
}

export interface GetJobListForSerialTrackedParts_output{
   returnObj:Erp_Tablesets_JobHeadListTableset[],
parameters : {
      /**  output parameters  */  
   morePages:boolean,
}
}

   /** Required : 
      @param ds
   */  
export interface GetJobMtlIsMtlConfigurationOn_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface GetJobMtlIsMtlConfigurationOn_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobNum
   */  
export interface GetLinkedQuoteLineList_input{
      /**  The JobNum to return values for  */  
   ipJobNum:string,
}

export interface GetLinkedQuoteLineList_output{
parameters : {
      /**  output parameters  */  
   opQuoteLineList:string,
}
}

   /** Required : 
      @param whereClause
      @param pageSize
      @param absolutePage
   */  
export interface GetList_input{
      /**  An expression used to filter the rows. Can be left blank for all rows.  */  
   whereClause:string,
      /**  The maximum number of rows to return. Leave as zero for no maximum.  */  
   pageSize:number,
      /**  Page of rows to return.  */  
   absolutePage:number,
}

export interface GetList_output{
   returnObj:Erp_Tablesets_JobHeadListTableset[],
parameters : {
      /**  output parameters  */  
   morePages:boolean,
}
}

export interface GetMaintJobEntryUIDefaults_output{
parameters : {
      /**  output parameters  */  
   defaultValues:string,
}
}

   /** Required : 
      @param sysRowID
      @param revisionNum
   */  
export interface GetMtlConfigPartRevAndConfigType_input{
   sysRowID:string,
   revisionNum:string,
}

export interface GetMtlConfigPartRevAndConfigType_output{
parameters : {
      /**  output parameters  */  
   cfgPartNum:string,
   cfgRevisionNum:string,
   configType:string,
   configURL:string,
}
}

   /** Required : 
      @param sysRowID
      @param tableName
   */  
export interface GetMtlConfigPartRev_input{
   sysRowID:string,
   tableName:string,
}

export interface GetMtlConfigPartRev_output{
parameters : {
      /**  output parameters  */  
   cfgPartNum:string,
   cfgRevisionNum:string,
}
}

   /** Required : 
      @param jobSelected
   */  
export interface GetMultiJobList_input{
   jobSelected:Erp_Tablesets_JobHeadListTableset[],
}

export interface GetMultiJobList_output{
parameters : {
      /**  output parameters  */  
   opJobList:string,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param mtlSeq
   */  
export interface GetNewJobAsmRefDes_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   mtlSeq:number,
}

export interface GetNewJobAsmRefDes_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
   */  
export interface GetNewJobAsmblAttch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
}

export interface GetNewJobAsmblAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
   */  
export interface GetNewJobAsmblInsp_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
}

export interface GetNewJobAsmblInsp_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param restrictionTypeID
   */  
export interface GetNewJobAsmblRestrictSubst_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   restrictionTypeID:string,
}

export interface GetNewJobAsmblRestrictSubst_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
   */  
export interface GetNewJobAsmblRestriction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
}

export interface GetNewJobAsmblRestriction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
   */  
export interface GetNewJobAsmbl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
}

export interface GetNewJobAsmbl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param changeDate
   */  
export interface GetNewJobAudit_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   changeDate:string,
}

export interface GetNewJobAudit_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
   */  
export interface GetNewJobHeadAttch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
}

export interface GetNewJobHeadAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
   */  
export interface GetNewJobHead_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface GetNewJobHead_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param mtlSeq
   */  
export interface GetNewJobMtlAttch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   mtlSeq:number,
}

export interface GetNewJobMtlAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param stageNumber
   */  
export interface GetNewJobMtlByStageNumber_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   stageNumber:string,
}

export interface GetNewJobMtlByStageNumber_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param mtlSeq
   */  
export interface GetNewJobMtlInsp_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   mtlSeq:number,
}

export interface GetNewJobMtlInsp_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param mtlSeq
   */  
export interface GetNewJobMtlRefDes_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   mtlSeq:number,
}

export interface GetNewJobMtlRefDes_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param mtlSeq
      @param restrictionTypeID
   */  
export interface GetNewJobMtlRestrictSubst_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   mtlSeq:number,
   restrictionTypeID:string,
}

export interface GetNewJobMtlRestrictSubst_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param mtlSeq
   */  
export interface GetNewJobMtlRestriction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   mtlSeq:number,
}

export interface GetNewJobMtlRestriction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
   */  
export interface GetNewJobMtl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
}

export interface GetNewJobMtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
   */  
export interface GetNewJobOpDtl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
}

export interface GetNewJobOpDtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
      @param actionSeq
   */  
export interface GetNewJobOperActionParam_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
   actionSeq:number,
}

export interface GetNewJobOperActionParam_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
   */  
export interface GetNewJobOperAction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
}

export interface GetNewJobOperAction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
   */  
export interface GetNewJobOperAttch_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
}

export interface GetNewJobOperAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
   */  
export interface GetNewJobOperInsp_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
}

export interface GetNewJobOperInsp_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
   */  
export interface GetNewJobOperMachParam_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
}

export interface GetNewJobOperMachParam_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
      @param restrictionTypeID
   */  
export interface GetNewJobOperRestrictSubst_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
   restrictionTypeID:string,
}

export interface GetNewJobOperRestrictSubst_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param oprSeq
   */  
export interface GetNewJobOperRestriction_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
   oprSeq:number,
}

export interface GetNewJobOperRestriction_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
   */  
export interface GetNewJobOper_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
}

export interface GetNewJobOper_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
   */  
export interface GetNewJobPart_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
}

export interface GetNewJobPart_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param partNum
      @param orderNum
      @param orderLine
      @param orderRelNum
      @param warehouseCode
      @param targetJobNum
      @param targetAssemblySeq
   */  
export interface GetNewJobProd_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   partNum:string,
   orderNum:number,
   orderLine:number,
   orderRelNum:number,
   warehouseCode:string,
   targetJobNum:string,
   targetAssemblySeq:number,
}

export interface GetNewJobProd_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
   */  
export interface GetNewJobStage_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assemblySeq:number,
}

export interface GetNewJobStage_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ds
      @param jobNum
      @param assySeq
      @param stageNumber
   */  
export interface GetNewOprByStageNumber_input{
   ds:Erp_Tablesets_JobEntryTableset[],
   jobNum:string,
   assySeq:number,
   stageNumber:string,
}

export interface GetNewOprByStageNumber_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipPartSugRowid
   */  
export interface GetNextJobNumOrderRelease_input{
      /**  The rowid of the partsug record to create job for.  */  
   ipPartSugRowid:string,
}

export interface GetNextJobNumOrderRelease_output{
parameters : {
      /**  output parameters  */  
   opNextJobNum:string,
}
}

export interface GetNextJobNum_output{
parameters : {
      /**  output parameters  */  
   opNextJobNum:string,
}
}

export interface GetNextMntJobNum_output{
parameters : {
      /**  output parameters  */  
   opNextJobNum:string,
}
}

export interface GetPlantConfCtrlUse3rdPartySched_output{
      /**  bool: the value  */  
   returnObj:boolean,
}

export interface GetProjectRoles_output{
   returnObj:any,      //schema had no properties on an object.
}

   /** Required : 
      @param whereClauseJobHead
      @param whereClauseJobHeadAttch
      @param whereClauseJobAsmbl
      @param whereClauseJobAsmblAttch
      @param whereClauseJobAsmblInsp
      @param whereClauseJobMtl
      @param whereClauseJobMtlAttch
      @param whereClauseJobMtlInsp
      @param whereClauseJobMtlRefDes
      @param whereClauseJobMtlRestriction
      @param whereClauseJobMtlRestrictSubst
      @param whereClauseJobOper
      @param whereClauseJobOperAttch
      @param whereClauseJobOperAction
      @param whereClauseJobOperActionParam
      @param whereClauseJobOperInsp
      @param whereClauseJobOperMachParam
      @param whereClauseJobOpDtl
      @param whereClauseJobResources
      @param whereClauseJobOperRestriction
      @param whereClauseJobOperRestrictSubst
      @param whereClauseJobAsmblRestriction
      @param whereClauseJobAsmblRestrictSubst
      @param whereClauseJobAsmRefDes
      @param whereClauseJobAudit
      @param whereClauseJobPart
      @param whereClauseJobProd
      @param whereClauseJobStage
      @param pageSize
      @param absolutePage
   */  
export interface GetRows_input{
   whereClauseJobHead:string,
   whereClauseJobHeadAttch:string,
   whereClauseJobAsmbl:string,
   whereClauseJobAsmblAttch:string,
   whereClauseJobAsmblInsp:string,
   whereClauseJobMtl:string,
   whereClauseJobMtlAttch:string,
   whereClauseJobMtlInsp:string,
   whereClauseJobMtlRefDes:string,
   whereClauseJobMtlRestriction:string,
   whereClauseJobMtlRestrictSubst:string,
   whereClauseJobOper:string,
   whereClauseJobOperAttch:string,
   whereClauseJobOperAction:string,
   whereClauseJobOperActionParam:string,
   whereClauseJobOperInsp:string,
   whereClauseJobOperMachParam:string,
   whereClauseJobOpDtl:string,
   whereClauseJobResources:string,
   whereClauseJobOperRestriction:string,
   whereClauseJobOperRestrictSubst:string,
   whereClauseJobAsmblRestriction:string,
   whereClauseJobAsmblRestrictSubst:string,
   whereClauseJobAsmRefDes:string,
   whereClauseJobAudit:string,
   whereClauseJobPart:string,
   whereClauseJobProd:string,
   whereClauseJobStage:string,
   pageSize:number,
   absolutePage:number,
}

export interface GetRows_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   morePages:boolean,
}
}

   /** Required : 
      @param treeSelection
   */  
export interface GetTreeStructure_input{
      /**  The string identifier that corresponds to the tree you want  */  
   treeSelection:string,
}

export interface GetTreeStructure_output{
      /**  The requested JSON as a string  */  
   returnObj:string,
}

export interface Ice_BOUpdErrorRow{
   TableName:string,
   ErrorLevel:string,
   ErrorType:string,
   ErrorText:string,
   ErrorSysRowID:string,
   SysRowID:string,
   RowMod:string,
}

export interface Ice_BOUpdErrorTableset{
   BOUpdError:Ice_BOUpdErrorRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Ice_Extensions_ExtensionRow{
   ColumnValues:object
   RowMod:string,
   SysRowID:string,
}

export interface Ice_Extensions_ExtensionTableColumn{
   ColumnName:string,
   ColumnType:string,
}

export interface Ice_Extensions_ExtensionTableData{
   Table:Ice_Extensions_ExtensionRow[],
   SystemCode:string,
   TableName:string,
   Columns:Ice_Extensions_ExtensionTableColumn[],
   PrimaryKeyColumns:string,
   PeerTableSystemCode:string,
   PeerTableName:string,
}

   /** Required : 
      @param ds
   */  
export interface InitJobOperSNReqSubConShip_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface InitJobOperSNReqSubConShip_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipParentJobAsmblRowid
      @param ipSourceRowid
      @param ipOperSeq
      @param ipDroppedAs
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface InsertBOMAsm_input{
      /**  The rowid of the parent jobasmbl to add to  */  
   ipParentJobAsmblRowid:string,
      /**  The rowid of source record could be jobasmbl, jobmtl, or
            quotemtl to be added to the parent jobasmbl  */  
   ipSourceRowid:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  The character value to determine where to drop and to drop as what.
            valid values: JobAsmbl, JobAsmbl-AsMtl, QuoteAsm, QuoteAsm-AsMtl  */  
   ipDroppedAs:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface InsertBOMAsm_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipParentJobAsmblRowid
      @param ipSourceRowid
      @param ipOperSeq
      @param ipMtlSeq
      @param ipBeforeMtlRowid
      @param ipDroppedAs
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
      @param ipRelatedStage
   */  
export interface InsertBOMMtlWithStage_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipParentJobAsmblRowid:string,
      /**  The rowid of source record could be jobasmbl, jobmtl, or
            quotemtl to be added to the parent jobasmbl  */  
   ipSourceRowid:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  The material seq to use  */  
   ipMtlSeq:number,
      /**  The material rowid to insert material before  */  
   ipBeforeMtlRowid:string,
      /**  The character value to determine where to drop and to drop as what.
            valid values: PartMtl-AsMtl, PartMtl-AsAsm, JobMtl-AsAsm, JobMtl, QuoteMtl-AsAsm, QuoteMtl  */  
   ipDroppedAs:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
      /**  Related stage  */  
   ipRelatedStage:string,
}

export interface InsertBOMMtlWithStage_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipParentJobAsmblRowid
      @param ipSourceRowid
      @param ipOperSeq
      @param ipMtlSeq
      @param ipBeforeMtlRowid
      @param ipDroppedAs
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface InsertBOMMtl_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipParentJobAsmblRowid:string,
      /**  The rowid of source record could be jobasmbl, jobmtl, or
            quotemtl to be added to the parent jobasmbl  */  
   ipSourceRowid:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  The material seq to use  */  
   ipMtlSeq:number,
      /**  The material rowid to insert material before  */  
   ipBeforeMtlRowid:string,
      /**  The character value to determine where to drop and to drop as what.
            valid values: PartMtl-AsMtl, PartMtl-AsAsm, JobMtl-AsAsm, JobMtl, QuoteMtl-AsAsm, QuoteMtl  */  
   ipDroppedAs:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface InsertBOMMtl_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipParentJobAsmblRowid
      @param ipSourceRowid
      @param ipNewOperSeq
      @param ipBeforeOperRowid
      @param ipDroppedAs
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface InsertBOMOper_input{
      /**  The rowid of the parent jobasmbl to add to  */  
   ipParentJobAsmblRowid:string,
      /**  The rowid of source record could be joboper, partopr, or
            quoteopr to be added to the parent jobasmbl  */  
   ipSourceRowid:string,
      /**  The new operation seq  */  
   ipNewOperSeq:number,
      /**  The operation rowid to insert operation before  */  
   ipBeforeOperRowid:string,
      /**  The character value to determine where to drop and to drop as what.
            valid values: PartOpr, JobOper, QuoteOpr  */  
   ipDroppedAs:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface InsertBOMOper_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipPartNum
      @param ipOperSeq
      @param ipMtlSeq
      @param ipBeforeMtlRowid
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
      @param ipRelatedStage
   */  
export interface InsertMaterialWithStage_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipJobAsmblRowID:string,
      /**  The part number being added  */  
   ipPartNum:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  The material seq to use  */  
   ipMtlSeq:number,
      /**  The material rowid to insert material before  */  
   ipBeforeMtlRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
      /**  The related stage for the ingredient(material)  */  
   ipRelatedStage:string,
}

export interface InsertMaterialWithStage_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipPartNum
      @param ipOperSeq
      @param ipMtlSeq
      @param ipBeforeMtlRowid
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface InsertMaterial_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipJobAsmblRowID:string,
      /**  The part number being added  */  
   ipPartNum:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  The material seq to use  */  
   ipMtlSeq:number,
      /**  The material rowid to insert material before  */  
   ipBeforeMtlRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface InsertMaterial_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ds
      @param jobNum
      @param assemblySeq
      @param bomLevel
      @param priorAssemblySeq
   */  
export interface InsertNewJobAsmbl_input{
   ds:Erp_Tablesets_JobEntryTableset[],
      /**  Assembly's parent Job  */  
   jobNum:string,
      /**  Assembly's parent assembly Seq  */  
   assemblySeq:number,
      /**  Assembly's parent BOMLevel  */  
   bomLevel:number,
      /**  If adding a sub-assembly record, this value is 0.  If
            insterting after a specific assembly then use that record's assembly seq (must be different
            from the parent assembly seq)  */  
   priorAssemblySeq:number,
}

export interface InsertNewJobAsmbl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipPartNum
      @param ipOperSeq
      @param ipMtlSeq
      @param ipBeforeMtlRowid
      @param ds
   */  
export interface InsertNewJobMtl_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipJobAsmblRowID:string,
      /**  The part number being added  */  
   ipPartNum:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  The material seq to use  */  
   ipMtlSeq:number,
      /**  The material rowid to insert material before  */  
   ipBeforeMtlRowid:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface InsertNewJobMtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipNewOprSeq
      @param ipBeforeOperRowid
      @param ds
   */  
export interface InsertNewJobOper_input{
      /**  The rowid of the JobAsmbl record to add the operation to  */  
   ipJobAsmblRowID:string,
      /**  The new operation seq  */  
   ipNewOprSeq:number,
      /**  The operation rowid to insert operation before  */  
   ipBeforeOperRowid:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface InsertNewJobOper_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipPartNum
      @param ipOperSeq
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface InsertNewSubAssembly_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipJobAsmblRowID:string,
      /**  The part number being added  */  
   ipPartNum:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to return a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface InsertNewSubAssembly_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   revisionNum:string,
   newJobAsmblSeq:number,
   newJobAsmblSysRowID:string,
}
}

   /** Required : 
      @param ipJobOperRowID
      @param ipCapabilityID
      @param ipNewOpDtlSeq
      @param ipBeforeOpDtlRowid
      @param ipReturn
   */  
export interface InsertOpDtlCapability_input{
      /**  The rowid of the JobOper record to add the operation detail to  */  
   ipJobOperRowID:string,
      /**  The Capability ID being added  */  
   ipCapabilityID:string,
      /**  The new operation detail seq  */  
   ipNewOpDtlSeq:number,
      /**  The operation detail rowid to insert operation detail before  */  
   ipBeforeOpDtlRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOpDtlCapability_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipJobOperRowID
      @param ipResourceGrpID
      @param ipNewOpDtlSeq
      @param ipBeforeOpDtlRowid
      @param ipReturn
   */  
export interface InsertOpDtlResGroup_input{
      /**  The rowid of the JobOper record to add the operation detail to  */  
   ipJobOperRowID:string,
      /**  The Resource Group ID being added  */  
   ipResourceGrpID:string,
      /**  The new operation detail seq  */  
   ipNewOpDtlSeq:number,
      /**  The operation detail rowid to insert operation detail before  */  
   ipBeforeOpDtlRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOpDtlResGroup_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipJobOperRowID
      @param ipResourceID
      @param ipNewOpDtlSeq
      @param ipBeforeOpDtlRowid
      @param ipReturn
   */  
export interface InsertOpDtlResource_input{
      /**  The rowid of the JobOper record to add the operation detail to  */  
   ipJobOperRowID:string,
      /**  The Resource ID being added  */  
   ipResourceID:string,
      /**  The new operation detail seq  */  
   ipNewOpDtlSeq:number,
      /**  The operation detail rowid to insert operation detail before  */  
   ipBeforeOpDtlRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOpDtlResource_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipCapabilityID
      @param ipNewOprSeq
      @param ipBeforeOprRowid
      @param ipReturn
   */  
export interface InsertOperCapability_input{
      /**  The rowid of the JobAsmbl record to add the operation detail to  */  
   ipJobAsmblRowID:string,
      /**  The Capability ID being added  */  
   ipCapabilityID:string,
      /**  The new operation seq  */  
   ipNewOprSeq:number,
      /**  The operation rowid to insert operation before  */  
   ipBeforeOprRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOperCapability_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipResourceGrpID
      @param ipNewOprSeq
      @param ipBeforeOprRowid
      @param ipReturn
   */  
export interface InsertOperResGroup_input{
      /**  The rowid of the JobAsmbl record to add the operation detail to  */  
   ipJobAsmblRowID:string,
      /**  The Resource Group ID being added  */  
   ipResourceGrpID:string,
      /**  The new operation seq  */  
   ipNewOprSeq:number,
      /**  The operation rowid to insert operation before  */  
   ipBeforeOprRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOperResGroup_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipResourceID
      @param ipNewOprSeq
      @param ipBeforeOprRowid
      @param ipReturn
   */  
export interface InsertOperResource_input{
      /**  The rowid of the JobAsmbl record to add the operation detail to  */  
   ipJobAsmblRowID:string,
      /**  The Resource ID being added  */  
   ipResourceID:string,
      /**  The new operation seq  */  
   ipNewOprSeq:number,
      /**  The operation rowid to insert operation before  */  
   ipBeforeOprRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOperResource_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipOpCode
      @param ipNewOprSeq
      @param ipBeforeOperRowid
      @param ipReturn
   */  
export interface InsertOperationOP_input{
      /**  The rowid of the JobAsmbl record to add the operation to  */  
   ipJobAsmblRowID:string,
      /**  The operation code being added  */  
   ipOpCode:string,
      /**  The new operation seq  */  
   ipNewOprSeq:number,
      /**  The operation rowid to insert operation before  */  
   ipBeforeOperRowid:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
}

export interface InsertOperationOP_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipJobAsmblRowID
      @param ipPartNum
      @param ipOperSeq
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface InsertSubAssembly_input{
      /**  The rowid of the JobAsmbl record to add the material to  */  
   ipJobAsmblRowID:string,
      /**  The part number being added  */  
   ipPartNum:string,
      /**  The related operation seq (or 0 if unrelated)  */  
   ipOperSeq:number,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to return a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface InsertSubAssembly_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param jobNum
      @param assemblySeq
   */  
export interface JobAsmblChildDelete_input{
   jobNum:string,
   assemblySeq:number,
}

export interface JobAsmblChildDelete_output{
}

   /** Required : 
      @param ipJobNum
      @param ipReturn
      @param ipStartAssemblySeq
      @param ipCurrentAssemblySeq
      @param ipCompleteTree
   */  
export interface JobScheduling_input{
      /**  The  Job to schedule  */  
   ipJobNum:string,
      /**  Logical used to determine if you would like the dataset refreshed and brought back.  */  
   ipReturn:boolean,
      /**  The Assembly Sequence to return data for.  */  
   ipStartAssemblySeq:number,
      /**  The Assembly Sequence to return data for.  */  
   ipCurrentAssemblySeq:number,
      /**  Would you like to retun a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
}

export interface JobScheduling_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param revisionNum
      @param ds
   */  
export interface OnChangingJobOperRevisionNum_input{
   revisionNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingJobOperRevisionNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param revisionNum
      @param ds
   */  
export interface OnChangingJobPartRevisionNum_input{
   revisionNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingJobPartRevisionNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param attributeSetID
      @param ds
   */  
export interface OnChangingJobProdAttributeSetID_input{
   attributeSetID:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingJobProdAttributeSetID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param numberOfPieces
      @param ds
   */  
export interface OnChangingJobProdNumberOfPieces_input{
   numberOfPieces:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingJobProdNumberOfPieces_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param revisionNum
      @param ds
   */  
export interface OnChangingMtlRevisionNum_input{
   revisionNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingMtlRevisionNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param numberOfPieces
      @param ds
   */  
export interface OnChangingNumberOfPieces_input{
   numberOfPieces:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingNumberOfPieces_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param attributeSetID
      @param ds
   */  
export interface OnChangingSalvageAttributeSetID_input{
   attributeSetID:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingSalvageAttributeSetID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param salvageNumberOfPieces
      @param ds
   */  
export interface OnChangingSalvageNumberOfPieces_input{
   salvageNumberOfPieces:number,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingSalvageNumberOfPieces_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param revisionNum
      @param ds
   */  
export interface OnChangingSalvageRevisionNum_input{
   revisionNum:string,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface OnChangingSalvageRevisionNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param jobNum
      @param assemblySeq
   */  
export interface PopulateCallContext_input{
   jobNum:string,
   assemblySeq:number,
}

export interface PopulateCallContext_output{
parameters : {
      /**  output parameters  */  
   callContext:string,
}
}

   /** Required : 
      @param ipJobNum
      @param ipPartNum
      @param ipMakeToType
   */  
export interface PreCheckNewJobProd_input{
      /**  The job number to create the jobprod for  */  
   ipJobNum:string,
      /**  The part number to create the jobprod for  */  
   ipPartNum:string,
      /**  The new maketotype value to create the jobprod with.
            Valid Values: STOCK, ORDER, JOB  */  
   ipMakeToType:string,
}

export interface PreCheckNewJobProd_output{
}

   /** Required : 
      @param sourcePartNum
      @param sourceRevisionNum
      @param sourceFile
      @param targetJobNum
      @param targetAsm
      @param sourceSysRowID
   */  
export interface PreGetDetails_input{
      /**  Indicates the source part number to get details from  */  
   sourcePartNum:string,
      /**  Indicates the source revision number to get details from  */  
   sourceRevisionNum:string,
      /**  Indicates where the details are being appended from.  Either Quote,
            Job or Method  */  
   sourceFile:string,
      /**  Target Job Number  */  
   targetJobNum:string,
      /**  Sequence of the target Assembly  */  
   targetAsm:number,
   sourceSysRowID:string,
}

export interface PreGetDetails_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
   BasePartNum:string,
   BaseRevisionNum:string,
}
}

   /** Required : 
      @param ipPartNum
   */  
export interface PreInsertSubAssembly_input{
      /**  The inputted part number  */  
   ipPartNum:string,
}

export interface PreInsertSubAssembly_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param ipJobNum
   */  
export interface RemoveFromSchedule_input{
      /**  Job number  */  
   ipJobNum:string,
}

export interface RemoveFromSchedule_output{
}

   /** Required : 
      @param ipJobNum
      @param ipAssemblySeq
      @param ipCompleteTree
      @param ipResequenceBy
      @param ipGetDatasetForTree
      @param ipReturn
   */  
export interface ResequenceMaterials_input{
      /**  The Job Number to return data for.  */  
   ipJobNum:string,
      /**  The Assembly Sequence to return data for.  */  
   ipAssemblySeq:number,
      /**  Would you like to return a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
      /**  Will provide the field to resequence the materials by.  */  
   ipResequenceBy:string,
      /**  Used for GetDatasetForTree, Would you like to retun a complete dataset for this Job  */  
   ipGetDatasetForTree:boolean,
      /**  Logical to determine if you would like the dataset refreshed and brought back
            refreshed by GetDatasetForTree?  True = call GetDatasetFor, False = call GetByID  */  
   ipReturn:boolean,
}

export interface ResequenceMaterials_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param ipJobNum
      @param ipAssemblySeq
      @param ipCompleteTree
      @param ipGetDatasetForTree
      @param ipReturn
      @param ipOrderOprByStageSeq
   */  
export interface ResequenceOperations_input{
      /**  The Job Number to return data for.  */  
   ipJobNum:string,
      /**  The Assembly Sequence to return data for.  */  
   ipAssemblySeq:number,
      /**  Would you like to return a complete dataset for this job number?  */  
   ipCompleteTree:boolean,
      /**  Used for GetDatasetForTree, Would you like to retun a complete dataset for this Job  */  
   ipGetDatasetForTree:boolean,
      /**  Logical to determine if you would like the dataset refreshed and brought back
             refreshed by GetDatasetForTree?  True = call GetDatasetFor, False = call GetByID  */  
   ipReturn:boolean,
      /**  If true ECOOprs are retrieved ordered by their parent StageSeq in order to correctly resequence
             operations after changing a StageSeq  */  
   ipOrderOprByStageSeq:boolean,
}

export interface ResequenceOperations_output{
   returnObj:Erp_Tablesets_JobEntryTableset[],
}

   /** Required : 
      @param jobNum
      @param kbConfigProdID
      @param assemblySeq
   */  
export interface SetKBMaxConfigProdID_input{
      /**  Job Number  */  
   jobNum:string,
      /**  CPQ Quote Product ID  */  
   kbConfigProdID:number,
      /**  Job Assembly sequence  */  
   assemblySeq:number,
}

export interface SetKBMaxConfigProdID_output{
}

   /** Required : 
      @param jobNum
      @param kbConfigProdID
      @param assemblySeq
   */  
export interface SyncKBMaxConfigurator_input{
      /**  Job Number  */  
   jobNum:string,
      /**  CPQ Quote Product ID  */  
   kbConfigProdID:number,
      /**  Job Assembly sequence  */  
   assemblySeq:number,
}

export interface SyncKBMaxConfigurator_output{
}

   /** Required : 
      @param ds
      @param continueProcessingOnError
      @param rollbackParentOnChildError
   */  
export interface UpdateExt_input{
   ds:Erp_Tablesets_UpdExtJobEntryTableset[],
   continueProcessingOnError:boolean,
   rollbackParentOnChildError:boolean,
}

export interface UpdateExt_output{
   returnObj:Ice_BOUpdErrorTableset[],
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_UpdExtJobEntryTableset,
   errorsOccurred:boolean,
}
}

   /** Required : 
      @param jobNum
      @param assemblySeq
      @param configuredProductJson
   */  
export interface UpdateKBMaxConfigurator_input{
      /**  Job Number  */  
   jobNum:string,
      /**  Job Assembly sequence  */  
   assemblySeq:number,
      /**  KBMax configurator data passed from the embed API  */  
   configuredProductJson:string,
}

export interface UpdateKBMaxConfigurator_output{
}

   /** Required : 
      @param ds
   */  
export interface Update_input{
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface Update_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ipProposedInspPlan
      @param ipProposedSpecId
      @param iptable
      @param setRev
      @param ds
   */  
export interface ValidateInspection_input{
      /**  The new proposed InspPlanPartNum value  */  
   ipProposedInspPlan:string,
      /**  The new proposed SpecID value  */  
   ipProposedSpecId:string,
      /**  table name  */  
   iptable:string,
      /**  if set default revision  */  
   setRev:boolean,
   ds:Erp_Tablesets_JobEntryTableset[],
}

export interface ValidateInspection_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_JobEntryTableset,
}
}

   /** Required : 
      @param ValidationLevel
      @param JobNum
      @param JobEngineered
      @param JobReleased
   */  
export interface ValidateJobDuomAttributes_input{
      /**  Options are: "JobEngineered" or "JobReleased"  */  
   ValidationLevel:string,
      /**  Job Number to be validated  */  
   JobNum:string,
      /**  Current value or proposed value of JobEngineered  */  
   JobEngineered:boolean,
      /**  Current value or proposed value of JobReleased  */  
   JobReleased:boolean,
}

export interface ValidateJobDuomAttributes_output{
}

   /** Required : 
      @param jobNum
      @param jobType
   */  
export interface ValidateJobNumJobType_input{
      /**  The Job Number to validate.  */  
   jobNum:string,
      /**  Job must be one of these types else it is an error. jobType can be blank, no constraint  */  
   jobType:string,
}

export interface ValidateJobNumJobType_output{
}

   /** Required : 
      @param ipJobNum
   */  
export interface ValidateJobNum_input{
      /**  The entered job number.  */  
   ipJobNum:string,
}

export interface ValidateJobNum_output{
}

   /** Required : 
      @param bLinkToContract
      @param partNum
      @param jobnum
      @param tablename
   */  
export interface ValidateLinkToContractData_input{
      /**  Indicates if LinkToContract was selected  */  
   bLinkToContract:boolean,
      /**  Part Number to be validated  */  
   partNum:string,
      /**  Job Number to find the ContractID row.  */  
   jobnum:string,
      /**  Table where the error is generated.  */  
   tablename:string,
}

export interface ValidateLinkToContractData_output{
}

   /** Required : 
      @param ipJobNum
      @param ipAsmSeq
   */  
export interface ValidateRefDes_input{
      /**  Job Number to validate  */  
   ipJobNum:string,
      /**  Assembly Seq of the Job Number to validate or -1 to validate all of them  */  
   ipAsmSeq:number,
}

export interface ValidateRefDes_output{
}

   /** Required : 
      @param cCompany
      @param cJobNum
      @param iAsmSeq
   */  
export interface nextMtlRefDesSeq_input{
   cCompany:string,
   cJobNum:string,
   iAsmSeq:number,
}

export interface nextMtlRefDesSeq_output{
   returnObj:number,
}

   /** Required : 
      @param ttJobMtl
   */  
export interface setJobMtlIsMtlConfigurationOn_input{
   ttJobMtl:Erp_Tablesets_JobMtlRow[],
}

export interface setJobMtlIsMtlConfigurationOn_output{
parameters : {
      /**  output parameters  */  
   ttJobMtl:Erp_Tablesets_JobMtlRow,
}
}

